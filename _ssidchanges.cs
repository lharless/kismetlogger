
/*
//===============================================================================
//  Generated From - SQLite_CSharp_BusinessEntity.vbgen
//
//  The supporting base class SQLiteEntity is in the Architecture directory in "dOOdads".
//  
//  This object is 'abstract' which means you need to inherit from it to be able
//  to instantiate it.  This is very easilly done. You can override properties and
//  methods in your derived class, this allows you to regenerate this class at any
//  time and not worry about overwriting custom code. 
//
//  NEVER EDIT THIS FILE.
//
//  public class YourObject :  _YourObject
//  {
//
//  }
//
//===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.2)

using System;
using System.Data;
using Finisar.SQLite;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace KismetLogger
{
	public abstract class _ssidchanges : SQLiteEntity
	{
		public _ssidchanges()
		{
			this.QuerySource = "ssidchanges";
			this.MappingName = "ssidchanges";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		public override string GetAutoKeyColumns()
		{
			return "";
		}
		

		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return this.Query.Load();
		}
	
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(string Bssid, string Date)
		{
			this.Where.Bssid.Value = Bssid;
this.Where.Date.Value = Date;
			
			return this.Query.Load();
		}
		
		
		#region Parameters
		protected class Parameters
		{
			
			public static SQLiteParameter Bssid
			{
				get
				{
					return new SQLiteParameter("@Bssid", DbType.String);

				}
			}
			
			public static SQLiteParameter Date
			{
				get
				{
					return new SQLiteParameter("@Date", DbType.String);

				}
			}
			
			public static SQLiteParameter Oldname
			{
				get
				{
					return new SQLiteParameter("@Oldname", DbType.String);

				}
			}
			
			public static SQLiteParameter Newname
			{
				get
				{
					return new SQLiteParameter("@Newname", DbType.String);

				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Bssid = "bssid";
            public const string Date = "date";
            public const string Oldname = "oldname";
            public const string Newname = "newname";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Bssid] = _ssidchanges.PropertyNames.Bssid;
					ht[Date] = _ssidchanges.PropertyNames.Date;
					ht[Oldname] = _ssidchanges.PropertyNames.Oldname;
					ht[Newname] = _ssidchanges.PropertyNames.Newname;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Bssid = "Bssid";
            public const string Date = "Date";
            public const string Oldname = "Oldname";
            public const string Newname = "Newname";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Bssid] = _ssidchanges.ColumnNames.Bssid;
					ht[Date] = _ssidchanges.ColumnNames.Date;
					ht[Oldname] = _ssidchanges.ColumnNames.Oldname;
					ht[Newname] = _ssidchanges.ColumnNames.Newname;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Bssid = "s_Bssid";
            public const string Date = "s_Date";
            public const string Oldname = "s_Oldname";
            public const string Newname = "s_Newname";

		}
		#endregion		
		
		#region Properties
	
		public virtual string Bssid
	    {
			get
	        {
				return base.Getstring(ColumnNames.Bssid);
			}
			set
	        {
				base.Setstring(ColumnNames.Bssid, value);
			}
		}

		public virtual string Date
	    {
			get
	        {
				return base.Getstring(ColumnNames.Date);
			}
			set
	        {
				base.Setstring(ColumnNames.Date, value);
			}
		}

		public virtual string Oldname
	    {
			get
	        {
				return base.Getstring(ColumnNames.Oldname);
			}
			set
	        {
				base.Setstring(ColumnNames.Oldname, value);
			}
		}

		public virtual string Newname
	    {
			get
	        {
				return base.Getstring(ColumnNames.Newname);
			}
			set
	        {
				base.Setstring(ColumnNames.Newname, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Bssid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bssid) ? string.Empty : base.GetstringAsString(ColumnNames.Bssid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bssid);
				else
					this.Bssid = base.SetstringAsString(ColumnNames.Bssid, value);
			}
		}

		public virtual string s_Date
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Date) ? string.Empty : base.GetstringAsString(ColumnNames.Date);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Date);
				else
					this.Date = base.SetstringAsString(ColumnNames.Date, value);
			}
		}

		public virtual string s_Oldname
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Oldname) ? string.Empty : base.GetstringAsString(ColumnNames.Oldname);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Oldname);
				else
					this.Oldname = base.SetstringAsString(ColumnNames.Oldname, value);
			}
		}

		public virtual string s_Newname
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Newname) ? string.Empty : base.GetstringAsString(ColumnNames.Newname);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Newname);
				else
					this.Newname = base.SetstringAsString(ColumnNames.Newname, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Bssid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bssid, Parameters.Bssid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Date
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Date, Parameters.Date);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Oldname
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Oldname, Parameters.Oldname);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Newname
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Newname, Parameters.Newname);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Bssid
		    {
				get
		        {
					if(_Bssid_W == null)
	        	    {
						_Bssid_W = TearOff.Bssid;
					}
					return _Bssid_W;
				}
			}

			public WhereParameter Date
		    {
				get
		        {
					if(_Date_W == null)
	        	    {
						_Date_W = TearOff.Date;
					}
					return _Date_W;
				}
			}

			public WhereParameter Oldname
		    {
				get
		        {
					if(_Oldname_W == null)
	        	    {
						_Oldname_W = TearOff.Oldname;
					}
					return _Oldname_W;
				}
			}

			public WhereParameter Newname
		    {
				get
		        {
					if(_Newname_W == null)
	        	    {
						_Newname_W = TearOff.Newname;
					}
					return _Newname_W;
				}
			}

			private WhereParameter _Bssid_W = null;
			private WhereParameter _Date_W = null;
			private WhereParameter _Oldname_W = null;
			private WhereParameter _Newname_W = null;

			public void WhereClauseReset()
			{
				_Bssid_W = null;
				_Date_W = null;
				_Oldname_W = null;
				_Newname_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Bssid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bssid, Parameters.Bssid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Date
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Date, Parameters.Date);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Oldname
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Oldname, Parameters.Oldname);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Newname
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Newname, Parameters.Newname);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Bssid
		    {
				get
		        {
					if(_Bssid_W == null)
	        	    {
						_Bssid_W = TearOff.Bssid;
					}
					return _Bssid_W;
				}
			}

			public AggregateParameter Date
		    {
				get
		        {
					if(_Date_W == null)
	        	    {
						_Date_W = TearOff.Date;
					}
					return _Date_W;
				}
			}

			public AggregateParameter Oldname
		    {
				get
		        {
					if(_Oldname_W == null)
	        	    {
						_Oldname_W = TearOff.Oldname;
					}
					return _Oldname_W;
				}
			}

			public AggregateParameter Newname
		    {
				get
		        {
					if(_Newname_W == null)
	        	    {
						_Newname_W = TearOff.Newname;
					}
					return _Newname_W;
				}
			}

			private AggregateParameter _Bssid_W = null;
			private AggregateParameter _Date_W = null;
			private AggregateParameter _Oldname_W = null;
			private AggregateParameter _Newname_W = null;

			public void AggregateClauseReset()
			{
				_Bssid_W = null;
				_Date_W = null;
				_Oldname_W = null;
				_Newname_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
			
		
		protected override IDbCommand GetInsertCommand()
		{
			SQLiteCommand cmd = new SQLiteCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
			@"INSERT INTO [ssidchanges]
			(
				[bssid],
				[date],
				[oldname],
				[newname]
			)
			VALUES
			(
				@bssid,
				@date,
				@oldname,
				@newname
			)";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			SQLiteCommand cmd = new SQLiteCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText = 
			@"UPDATE [ssidchanges] SET 
				[oldname]=@oldname,
				[newname]=@newname
			WHERE
				[bssid]=@bssid AND 
				[date]=@date";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			SQLiteCommand cmd = new SQLiteCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
			@"DELETE FROM [ssidchanges] 
			WHERE
				[bssid]=@bssid AND 
				[date]=@date";

	
			SQLiteParameter p;
			p = cmd.Parameters.Add(Parameters.Bssid);
			p.SourceColumn = ColumnNames.Bssid;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Date);
			p.SourceColumn = ColumnNames.Date;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SQLiteCommand cmd)
		{
			SQLiteParameter p;
		
			p = cmd.Parameters.Add(Parameters.Bssid);
			p.SourceColumn = ColumnNames.Bssid;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Date);
			p.SourceColumn = ColumnNames.Date;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Oldname);
			p.SourceColumn = ColumnNames.Oldname;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Newname);
			p.SourceColumn = ColumnNames.Newname;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}		
		
	
	}
}
