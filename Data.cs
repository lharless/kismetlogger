
/*
//===============================================================================
//  Generated From - SQLite_CSharp_BusinessEntity.vbgen
//
//  The supporting base class SQLiteEntity is in the Architecture directory in "dOOdads".
//  
//  This object is 'abstract' which means you need to inherit from it to be able
//  to instantiate it.  This is very easilly done. You can override properties and
//  methods in your derived class, this allows you to regenerate this class at any
//  time and not worry about overwriting custom code. 
//
//  NEVER EDIT THIS FILE.
//
//  public class YourObject :  _YourObject
//  {
//
//  }
//
//===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.2)

using System.Collections;
using System.Data;
using Finisar.SQLite;
using MyGeneration.dOOdads;

namespace KismetLogger
{
	public abstract class _Data : SQLiteEntity
	{
		public _Data()
		{
			QuerySource = "Data";
			this.MappingName = "Data";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
		}
		
		public override void FlushData()
		{
		    this._whereClause = null;
		    this._aggregateClause = null;
			base.FlushData();
		}
		
		public override string GetAutoKeyColumns()
		{
			return "";
		}
		

		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return this.Query.Load();
		}
	
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(string BSSID)
		{
			this.Where.BSSID.Value = BSSID;
			
			return this.Query.Load();
		}
		
		
		#region Parameters
		protected class Parameters
		{
			
			public static SQLiteParameter Oui
			{
				get
				{
					return new SQLiteParameter("@Oui", DbType.String);

				}
			}
			
			public static SQLiteParameter Totalpacketsweak
			{
				get
				{
					return new SQLiteParameter("@Totalpacketsweak", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Totalpacketstotal
			{
				get
				{
					return new SQLiteParameter("@Totalpacketstotal", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Totalpacketsllc
			{
				get
				{
					return new SQLiteParameter("@Totalpacketsllc", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Totalpacketsdupeiv
			{
				get
				{
					return new SQLiteParameter("@Totalpacketsdupeiv", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Totalpacketsdata
			{
				get
				{
					return new SQLiteParameter("@Totalpacketsdata", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Totalpacketscrypt
			{
				get
				{
					return new SQLiteParameter("@Totalpacketscrypt", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Network
			{
				get
				{
					return new SQLiteParameter("@Network", DbType.String);

				}
			}
			
			public static SQLiteParameter NetType
			{
				get
				{
					return new SQLiteParameter("@NetType", DbType.String);

				}
			}
			
			public static SQLiteParameter ESSID
			{
				get
				{
					return new SQLiteParameter("@ESSID", DbType.String);

				}
			}
			
			public static SQLiteParameter BSSID
			{
				get
				{
					return new SQLiteParameter("@BSSID", DbType.String);

				}
			}
			
			public static SQLiteParameter Info
			{
				get
				{
					return new SQLiteParameter("@Info", DbType.String);

				}
			}
			
			public static SQLiteParameter Channel
			{
				get
				{
					return new SQLiteParameter("@Channel", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Cloaked
			{
				get
				{
					return new SQLiteParameter("@Cloaked", DbType.String);

				}
			}
			
			public static SQLiteParameter Encryption
			{
				get
				{
					return new SQLiteParameter("@Encryption", DbType.String);

				}
			}
			
			public static SQLiteParameter Decrypted
			{
				get
				{
					return new SQLiteParameter("@Decrypted", DbType.String);

				}
			}
			
			public static SQLiteParameter MaxRate
			{
				get
				{
					return new SQLiteParameter("@MaxRate", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter MaxSeenRate
			{
				get
				{
					return new SQLiteParameter("@MaxSeenRate", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Beacon
			{
				get
				{
					return new SQLiteParameter("@Beacon", DbType.String);

				}
			}
			
			public static SQLiteParameter LLC
			{
				get
				{
					return new SQLiteParameter("@LLC", DbType.String);

				}
			}
			
			public static SQLiteParameter Data
			{
				get
				{
					return new SQLiteParameter("@Data", DbType.String);

				}
			}
			
			public static SQLiteParameter Crypt
			{
				get
				{
					return new SQLiteParameter("@Crypt", DbType.String);

				}
			}
			
			public static SQLiteParameter Weak
			{
				get
				{
					return new SQLiteParameter("@Weak", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Total
			{
				get
				{
					return new SQLiteParameter("@Total", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Carrier
			{
				get
				{
					return new SQLiteParameter("@Carrier", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Encoding
			{
				get
				{
					return new SQLiteParameter("@Encoding", DbType.String);

				}
			}
			
			public static SQLiteParameter FirstTime
			{
				get
				{
					return new SQLiteParameter("@FirstTime", DbType.String);

				}
			}
			
			public static SQLiteParameter LastTime
			{
				get
				{
					return new SQLiteParameter("@LastTime", DbType.String);

				}
			}
			
			public static SQLiteParameter BestQuality
			{
				get
				{
					return new SQLiteParameter("@BestQuality", DbType.String);

				}
			}
			
			public static SQLiteParameter BestSignal
			{
				get
				{
					return new SQLiteParameter("@BestSignal", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter BestNoise
			{
				get
				{
					return new SQLiteParameter("@BestNoise", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter GPSMinLat
			{
				get
				{
					return new SQLiteParameter("@GPSMinLat", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter GPSMinLon
			{
				get
				{
					return new SQLiteParameter("@GPSMinLon", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter GPSMinAlt
			{
				get
				{
					return new SQLiteParameter("@GPSMinAlt", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter GPSMinSpd
			{
				get
				{
					return new SQLiteParameter("@GPSMinSpd", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter GPSMaxLat
			{
				get
				{
					return new SQLiteParameter("@GPSMaxLat", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter GPSMaxLon
			{
				get
				{
					return new SQLiteParameter("@GPSMaxLon", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter GPSMaxAlt
			{
				get
				{
					return new SQLiteParameter("@GPSMaxAlt", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter GPSMaxSpd
			{
				get
				{
					return new SQLiteParameter("@GPSMaxSpd", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter GPSBestLat
			{
				get
				{
					return new SQLiteParameter("@GPSBestLat", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter GPSBestLon
			{
				get
				{
					return new SQLiteParameter("@GPSBestLon", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter GPSBestAlt
			{
				get
				{
					return new SQLiteParameter("@GPSBestAlt", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Datasize
			{
				get
				{
					return new SQLiteParameter("@Datasize", DbType.String);

				}
			}
			
			public static SQLiteParameter IPType
			{
				get
				{
					return new SQLiteParameter("@IPType", DbType.String);

				}
			}
			
			public static SQLiteParameter IP
			{
				get
				{
					return new SQLiteParameter("@IP", DbType.String);

				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Oui = "oui";
            public const string Totalpacketsweak = "totalpacketsweak";
            public const string Totalpacketstotal = "totalpacketstotal";
            public const string Totalpacketsllc = "totalpacketsllc";
            public const string Totalpacketsdupeiv = "totalpacketsdupeiv";
            public const string Totalpacketsdata = "totalpacketsdata";
            public const string Totalpacketscrypt = "totalpacketscrypt";
            public const string Network = "Network";
            public const string NetType = "NetType";
            public const string ESSID = "ESSID";
            public const string BSSID = "BSSID";
            public const string Info = "Info";
            public const string Channel = "Channel";
            public const string Cloaked = "Cloaked";
            public const string Encryption = "Encryption";
            public const string Decrypted = "Decrypted";
            public const string MaxRate = "MaxRate";
            public const string MaxSeenRate = "MaxSeenRate";
            public const string Beacon = "Beacon";
            public const string LLC = "LLC";
            public const string Data = "Data";
            public const string Crypt = "Crypt";
            public const string Weak = "Weak";
            public const string Total = "Total";
            public const string Carrier = "Carrier";
            public const string Encoding = "Encoding";
            public const string FirstTime = "FirstTime";
            public const string LastTime = "LastTime";
            public const string BestQuality = "BestQuality";
            public const string BestSignal = "BestSignal";
            public const string BestNoise = "BestNoise";
            public const string GPSMinLat = "GPSMinLat";
            public const string GPSMinLon = "GPSMinLon";
            public const string GPSMinAlt = "GPSMinAlt";
            public const string GPSMinSpd = "GPSMinSpd";
            public const string GPSMaxLat = "GPSMaxLat";
            public const string GPSMaxLon = "GPSMaxLon";
            public const string GPSMaxAlt = "GPSMaxAlt";
            public const string GPSMaxSpd = "GPSMaxSpd";
            public const string GPSBestLat = "GPSBestLat";
            public const string GPSBestLon = "GPSBestLon";
            public const string GPSBestAlt = "GPSBestAlt";
            public const string Datasize = "Datasize";
            public const string IPType = "IPType";
            public const string IP = "IP";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Oui] = PropertyNames.Oui;
					ht[Totalpacketsweak] = PropertyNames.Totalpacketsweak;
					ht[Totalpacketstotal] = PropertyNames.Totalpacketstotal;
					ht[Totalpacketsllc] = PropertyNames.Totalpacketsllc;
					ht[Totalpacketsdupeiv] = PropertyNames.Totalpacketsdupeiv;
					ht[Totalpacketsdata] = PropertyNames.Totalpacketsdata;
					ht[Totalpacketscrypt] = PropertyNames.Totalpacketscrypt;
					ht[Network] = PropertyNames.Network;
					ht[NetType] = PropertyNames.NetType;
					ht[ESSID] = PropertyNames.ESSID;
					ht[BSSID] = PropertyNames.BSSID;
					ht[Info] = PropertyNames.Info;
					ht[Channel] = PropertyNames.Channel;
					ht[Cloaked] = PropertyNames.Cloaked;
					ht[Encryption] = PropertyNames.Encryption;
					ht[Decrypted] = PropertyNames.Decrypted;
					ht[MaxRate] = PropertyNames.MaxRate;
					ht[MaxSeenRate] = PropertyNames.MaxSeenRate;
					ht[Beacon] = PropertyNames.Beacon;
					ht[LLC] = PropertyNames.LLC;
					ht[Data] = PropertyNames.Data;
					ht[Crypt] = PropertyNames.Crypt;
					ht[Weak] = PropertyNames.Weak;
					ht[Total] = PropertyNames.Total;
					ht[Carrier] = PropertyNames.Carrier;
					ht[Encoding] = PropertyNames.Encoding;
					ht[FirstTime] = PropertyNames.FirstTime;
					ht[LastTime] = PropertyNames.LastTime;
					ht[BestQuality] = PropertyNames.BestQuality;
					ht[BestSignal] = PropertyNames.BestSignal;
					ht[BestNoise] = PropertyNames.BestNoise;
					ht[GPSMinLat] = PropertyNames.GPSMinLat;
					ht[GPSMinLon] = PropertyNames.GPSMinLon;
					ht[GPSMinAlt] = PropertyNames.GPSMinAlt;
					ht[GPSMinSpd] = PropertyNames.GPSMinSpd;
					ht[GPSMaxLat] = PropertyNames.GPSMaxLat;
					ht[GPSMaxLon] = PropertyNames.GPSMaxLon;
					ht[GPSMaxAlt] = PropertyNames.GPSMaxAlt;
					ht[GPSMaxSpd] = PropertyNames.GPSMaxSpd;
					ht[GPSBestLat] = PropertyNames.GPSBestLat;
					ht[GPSBestLon] = PropertyNames.GPSBestLon;
					ht[GPSBestAlt] = PropertyNames.GPSBestAlt;
					ht[Datasize] = PropertyNames.Datasize;
					ht[IPType] = PropertyNames.IPType;
					ht[IP] = PropertyNames.IP;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Oui = "Oui";
            public const string Totalpacketsweak = "Totalpacketsweak";
            public const string Totalpacketstotal = "Totalpacketstotal";
            public const string Totalpacketsllc = "Totalpacketsllc";
            public const string Totalpacketsdupeiv = "Totalpacketsdupeiv";
            public const string Totalpacketsdata = "Totalpacketsdata";
            public const string Totalpacketscrypt = "Totalpacketscrypt";
            public const string Network = "Network";
            public const string NetType = "NetType";
            public const string ESSID = "ESSID";
            public const string BSSID = "BSSID";
            public const string Info = "Info";
            public const string Channel = "Channel";
            public const string Cloaked = "Cloaked";
            public const string Encryption = "Encryption";
            public const string Decrypted = "Decrypted";
            public const string MaxRate = "MaxRate";
            public const string MaxSeenRate = "MaxSeenRate";
            public const string Beacon = "Beacon";
            public const string LLC = "LLC";
            public const string Data = "Data";
            public const string Crypt = "Crypt";
            public const string Weak = "Weak";
            public const string Total = "Total";
            public const string Carrier = "Carrier";
            public const string Encoding = "Encoding";
            public const string FirstTime = "FirstTime";
            public const string LastTime = "LastTime";
            public const string BestQuality = "BestQuality";
            public const string BestSignal = "BestSignal";
            public const string BestNoise = "BestNoise";
            public const string GPSMinLat = "GPSMinLat";
            public const string GPSMinLon = "GPSMinLon";
            public const string GPSMinAlt = "GPSMinAlt";
            public const string GPSMinSpd = "GPSMinSpd";
            public const string GPSMaxLat = "GPSMaxLat";
            public const string GPSMaxLon = "GPSMaxLon";
            public const string GPSMaxAlt = "GPSMaxAlt";
            public const string GPSMaxSpd = "GPSMaxSpd";
            public const string GPSBestLat = "GPSBestLat";
            public const string GPSBestLon = "GPSBestLon";
            public const string GPSBestAlt = "GPSBestAlt";
            public const string Datasize = "Datasize";
            public const string IPType = "IPType";
            public const string IP = "IP";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Oui] = ColumnNames.Oui;
					ht[Totalpacketsweak] = ColumnNames.Totalpacketsweak;
					ht[Totalpacketstotal] = ColumnNames.Totalpacketstotal;
					ht[Totalpacketsllc] = ColumnNames.Totalpacketsllc;
					ht[Totalpacketsdupeiv] = ColumnNames.Totalpacketsdupeiv;
					ht[Totalpacketsdata] = ColumnNames.Totalpacketsdata;
					ht[Totalpacketscrypt] = ColumnNames.Totalpacketscrypt;
					ht[Network] = ColumnNames.Network;
					ht[NetType] = ColumnNames.NetType;
					ht[ESSID] = ColumnNames.ESSID;
					ht[BSSID] = ColumnNames.BSSID;
					ht[Info] = ColumnNames.Info;
					ht[Channel] = ColumnNames.Channel;
					ht[Cloaked] = ColumnNames.Cloaked;
					ht[Encryption] = ColumnNames.Encryption;
					ht[Decrypted] = ColumnNames.Decrypted;
					ht[MaxRate] = ColumnNames.MaxRate;
					ht[MaxSeenRate] = ColumnNames.MaxSeenRate;
					ht[Beacon] = ColumnNames.Beacon;
					ht[LLC] = ColumnNames.LLC;
					ht[Data] = ColumnNames.Data;
					ht[Crypt] = ColumnNames.Crypt;
					ht[Weak] = ColumnNames.Weak;
					ht[Total] = ColumnNames.Total;
					ht[Carrier] = ColumnNames.Carrier;
					ht[Encoding] = ColumnNames.Encoding;
					ht[FirstTime] = ColumnNames.FirstTime;
					ht[LastTime] = ColumnNames.LastTime;
					ht[BestQuality] = ColumnNames.BestQuality;
					ht[BestSignal] = ColumnNames.BestSignal;
					ht[BestNoise] = ColumnNames.BestNoise;
					ht[GPSMinLat] = ColumnNames.GPSMinLat;
					ht[GPSMinLon] = ColumnNames.GPSMinLon;
					ht[GPSMinAlt] = ColumnNames.GPSMinAlt;
					ht[GPSMinSpd] = ColumnNames.GPSMinSpd;
					ht[GPSMaxLat] = ColumnNames.GPSMaxLat;
					ht[GPSMaxLon] = ColumnNames.GPSMaxLon;
					ht[GPSMaxAlt] = ColumnNames.GPSMaxAlt;
					ht[GPSMaxSpd] = ColumnNames.GPSMaxSpd;
					ht[GPSBestLat] = ColumnNames.GPSBestLat;
					ht[GPSBestLon] = ColumnNames.GPSBestLon;
					ht[GPSBestAlt] = ColumnNames.GPSBestAlt;
					ht[Datasize] = ColumnNames.Datasize;
					ht[IPType] = ColumnNames.IPType;
					ht[IP] = ColumnNames.IP;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Oui = "s_Oui";
            public const string Totalpacketsweak = "s_Totalpacketsweak";
            public const string Totalpacketstotal = "s_Totalpacketstotal";
            public const string Totalpacketsllc = "s_Totalpacketsllc";
            public const string Totalpacketsdupeiv = "s_Totalpacketsdupeiv";
            public const string Totalpacketsdata = "s_Totalpacketsdata";
            public const string Totalpacketscrypt = "s_Totalpacketscrypt";
            public const string Network = "s_Network";
            public const string NetType = "s_NetType";
            public const string ESSID = "s_ESSID";
            public const string BSSID = "s_BSSID";
            public const string Info = "s_Info";
            public const string Channel = "s_Channel";
            public const string Cloaked = "s_Cloaked";
            public const string Encryption = "s_Encryption";
            public const string Decrypted = "s_Decrypted";
            public const string MaxRate = "s_MaxRate";
            public const string MaxSeenRate = "s_MaxSeenRate";
            public const string Beacon = "s_Beacon";
            public const string LLC = "s_LLC";
            public const string Data = "s_Data";
            public const string Crypt = "s_Crypt";
            public const string Weak = "s_Weak";
            public const string Total = "s_Total";
            public const string Carrier = "s_Carrier";
            public const string Encoding = "s_Encoding";
            public const string FirstTime = "s_FirstTime";
            public const string LastTime = "s_LastTime";
            public const string BestQuality = "s_BestQuality";
            public const string BestSignal = "s_BestSignal";
            public const string BestNoise = "s_BestNoise";
            public const string GPSMinLat = "s_GPSMinLat";
            public const string GPSMinLon = "s_GPSMinLon";
            public const string GPSMinAlt = "s_GPSMinAlt";
            public const string GPSMinSpd = "s_GPSMinSpd";
            public const string GPSMaxLat = "s_GPSMaxLat";
            public const string GPSMaxLon = "s_GPSMaxLon";
            public const string GPSMaxAlt = "s_GPSMaxAlt";
            public const string GPSMaxSpd = "s_GPSMaxSpd";
            public const string GPSBestLat = "s_GPSBestLat";
            public const string GPSBestLon = "s_GPSBestLon";
            public const string GPSBestAlt = "s_GPSBestAlt";
            public const string Datasize = "s_Datasize";
            public const string IPType = "s_IPType";
            public const string IP = "s_IP";

		}
		#endregion		
		
		#region Properties
	
		public virtual string Oui
	    {
			get
	        {
				return base.Getstring(ColumnNames.Oui);
			}
			set
	        {
				base.Setstring(ColumnNames.Oui, value);
			}
		}

		public virtual decimal Totalpacketsweak
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Totalpacketsweak);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Totalpacketsweak, value);
			}
		}

		public virtual decimal Totalpacketstotal
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Totalpacketstotal);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Totalpacketstotal, value);
			}
		}

		public virtual decimal Totalpacketsllc
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Totalpacketsllc);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Totalpacketsllc, value);
			}
		}

		public virtual decimal Totalpacketsdupeiv
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Totalpacketsdupeiv);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Totalpacketsdupeiv, value);
			}
		}

		public virtual decimal Totalpacketsdata
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Totalpacketsdata);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Totalpacketsdata, value);
			}
		}

		public virtual decimal Totalpacketscrypt
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Totalpacketscrypt);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Totalpacketscrypt, value);
			}
		}

		public virtual string Network
	    {
			get
	        {
				return base.Getstring(ColumnNames.Network);
			}
			set
	        {
				base.Setstring(ColumnNames.Network, value);
			}
		}

		public virtual string NetType
	    {
			get
	        {
				return base.Getstring(ColumnNames.NetType);
			}
			set
	        {
				base.Setstring(ColumnNames.NetType, value);
			}
		}

		public virtual string ESSID
	    {
			get
	        {
				return base.Getstring(ColumnNames.ESSID);
			}
			set
	        {
				base.Setstring(ColumnNames.ESSID, value);
			}
		}

		public virtual string BSSID
	    {
			get
	        {
				return base.Getstring(ColumnNames.BSSID);
			}
			set
	        {
				base.Setstring(ColumnNames.BSSID, value);
			}
		}

		public virtual string Info
	    {
			get
	        {
				return base.Getstring(ColumnNames.Info);
			}
			set
	        {
				base.Setstring(ColumnNames.Info, value);
			}
		}

		public virtual decimal Channel
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Channel);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Channel, value);
			}
		}

		public virtual string Cloaked
	    {
			get
	        {
				return base.Getstring(ColumnNames.Cloaked);
			}
			set
	        {
				base.Setstring(ColumnNames.Cloaked, value);
			}
		}

		public virtual string Encryption
	    {
			get
	        {
				return base.Getstring(ColumnNames.Encryption);
			}
			set
	        {
				base.Setstring(ColumnNames.Encryption, value);
			}
		}

		public virtual string Decrypted
	    {
			get
	        {
				return base.Getstring(ColumnNames.Decrypted);
			}
			set
	        {
				base.Setstring(ColumnNames.Decrypted, value);
			}
		}

		public virtual decimal MaxRate
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.MaxRate);
			}
			set
	        {
				base.Setdecimal(ColumnNames.MaxRate, value);
			}
		}

		public virtual decimal MaxSeenRate
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.MaxSeenRate);
			}
			set
	        {
				base.Setdecimal(ColumnNames.MaxSeenRate, value);
			}
		}

		public virtual string Beacon
	    {
			get
	        {
				return base.Getstring(ColumnNames.Beacon);
			}
			set
	        {
				base.Setstring(ColumnNames.Beacon, value);
			}
		}

		public virtual string LLC
	    {
			get
	        {
				return base.Getstring(ColumnNames.LLC);
			}
			set
	        {
				base.Setstring(ColumnNames.LLC, value);
			}
		}

		public virtual string Data
	    {
			get
	        {
				return base.Getstring(ColumnNames.Data);
			}
			set
	        {
				base.Setstring(ColumnNames.Data, value);
			}
		}

		public virtual string Crypt
	    {
			get
	        {
				return base.Getstring(ColumnNames.Crypt);
			}
			set
	        {
				base.Setstring(ColumnNames.Crypt, value);
			}
		}

		public virtual decimal Weak
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Weak);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Weak, value);
			}
		}

		public virtual decimal Total
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Total);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Total, value);
			}
		}

		public virtual decimal Carrier
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Carrier);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Carrier, value);
			}
		}

		public virtual string Encoding
	    {
			get
	        {
				return base.Getstring(ColumnNames.Encoding);
			}
			set
	        {
				base.Setstring(ColumnNames.Encoding, value);
			}
		}

		public virtual string FirstTime
	    {
			get
	        {
				return base.Getstring(ColumnNames.FirstTime);
			}
			set
	        {
				base.Setstring(ColumnNames.FirstTime, value);
			}
		}

		public virtual string LastTime
	    {
			get
	        {
				return base.Getstring(ColumnNames.LastTime);
			}
			set
	        {
				base.Setstring(ColumnNames.LastTime, value);
			}
		}

		public virtual string BestQuality
	    {
			get
	        {
				return base.Getstring(ColumnNames.BestQuality);
			}
			set
	        {
				base.Setstring(ColumnNames.BestQuality, value);
			}
		}

		public virtual decimal BestSignal
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.BestSignal);
			}
			set
	        {
				base.Setdecimal(ColumnNames.BestSignal, value);
			}
		}

		public virtual decimal BestNoise
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.BestNoise);
			}
			set
	        {
				base.Setdecimal(ColumnNames.BestNoise, value);
			}
		}

		public virtual decimal GPSMinLat
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.GPSMinLat);
			}
			set
	        {
				base.Setdecimal(ColumnNames.GPSMinLat, value);
			}
		}

		public virtual decimal GPSMinLon
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.GPSMinLon);
			}
			set
	        {
				base.Setdecimal(ColumnNames.GPSMinLon, value);
			}
		}

		public virtual decimal GPSMinAlt
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.GPSMinAlt);
			}
			set
	        {
				base.Setdecimal(ColumnNames.GPSMinAlt, value);
			}
		}

		public virtual decimal GPSMinSpd
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.GPSMinSpd);
			}
			set
	        {
				base.Setdecimal(ColumnNames.GPSMinSpd, value);
			}
		}

		public virtual decimal GPSMaxLat
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.GPSMaxLat);
			}
			set
	        {
				base.Setdecimal(ColumnNames.GPSMaxLat, value);
			}
		}

		public virtual decimal GPSMaxLon
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.GPSMaxLon);
			}
			set
	        {
				base.Setdecimal(ColumnNames.GPSMaxLon, value);
			}
		}

		public virtual decimal GPSMaxAlt
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.GPSMaxAlt);
			}
			set
	        {
				base.Setdecimal(ColumnNames.GPSMaxAlt, value);
			}
		}

		public virtual decimal GPSMaxSpd
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.GPSMaxSpd);
			}
			set
	        {
				base.Setdecimal(ColumnNames.GPSMaxSpd, value);
			}
		}

		public virtual decimal GPSBestLat
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.GPSBestLat);
			}
			set
	        {
				base.Setdecimal(ColumnNames.GPSBestLat, value);
			}
		}

		public virtual decimal GPSBestLon
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.GPSBestLon);
			}
			set
	        {
				base.Setdecimal(ColumnNames.GPSBestLon, value);
			}
		}

		public virtual decimal GPSBestAlt
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.GPSBestAlt);
			}
			set
	        {
				base.Setdecimal(ColumnNames.GPSBestAlt, value);
			}
		}

		public virtual string Datasize
	    {
			get
	        {
				return base.Getstring(ColumnNames.Datasize);
			}
			set
	        {
				base.Setstring(ColumnNames.Datasize, value);
			}
		}

		public virtual string IPType
	    {
			get
	        {
				return base.Getstring(ColumnNames.IPType);
			}
			set
	        {
				base.Setstring(ColumnNames.IPType, value);
			}
		}

		public virtual string IP
	    {
			get
	        {
				return base.Getstring(ColumnNames.IP);
			}
			set
	        {
				base.Setstring(ColumnNames.IP, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Oui
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Oui) ? string.Empty : base.GetstringAsString(ColumnNames.Oui);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Oui);
				else
					this.Oui = base.SetstringAsString(ColumnNames.Oui, value);
			}
		}

		public virtual string s_Totalpacketsweak
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Totalpacketsweak) ? string.Empty : base.GetdecimalAsString(ColumnNames.Totalpacketsweak);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Totalpacketsweak);
				else
					this.Totalpacketsweak = base.SetdecimalAsString(ColumnNames.Totalpacketsweak, value);
			}
		}

		public virtual string s_Totalpacketstotal
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Totalpacketstotal) ? string.Empty : base.GetdecimalAsString(ColumnNames.Totalpacketstotal);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Totalpacketstotal);
				else
					this.Totalpacketstotal = base.SetdecimalAsString(ColumnNames.Totalpacketstotal, value);
			}
		}

		public virtual string s_Totalpacketsllc
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Totalpacketsllc) ? string.Empty : base.GetdecimalAsString(ColumnNames.Totalpacketsllc);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Totalpacketsllc);
				else
					this.Totalpacketsllc = base.SetdecimalAsString(ColumnNames.Totalpacketsllc, value);
			}
		}

		public virtual string s_Totalpacketsdupeiv
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Totalpacketsdupeiv) ? string.Empty : base.GetdecimalAsString(ColumnNames.Totalpacketsdupeiv);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Totalpacketsdupeiv);
				else
					this.Totalpacketsdupeiv = base.SetdecimalAsString(ColumnNames.Totalpacketsdupeiv, value);
			}
		}

		public virtual string s_Totalpacketsdata
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Totalpacketsdata) ? string.Empty : base.GetdecimalAsString(ColumnNames.Totalpacketsdata);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Totalpacketsdata);
				else
					this.Totalpacketsdata = base.SetdecimalAsString(ColumnNames.Totalpacketsdata, value);
			}
		}

		public virtual string s_Totalpacketscrypt
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Totalpacketscrypt) ? string.Empty : base.GetdecimalAsString(ColumnNames.Totalpacketscrypt);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Totalpacketscrypt);
				else
					this.Totalpacketscrypt = base.SetdecimalAsString(ColumnNames.Totalpacketscrypt, value);
			}
		}

		public virtual string s_Network
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Network) ? string.Empty : base.GetstringAsString(ColumnNames.Network);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Network);
				else
					this.Network = base.SetstringAsString(ColumnNames.Network, value);
			}
		}

		public virtual string s_NetType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NetType) ? string.Empty : base.GetstringAsString(ColumnNames.NetType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NetType);
				else
					this.NetType = base.SetstringAsString(ColumnNames.NetType, value);
			}
		}

		public virtual string s_ESSID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ESSID) ? string.Empty : base.GetstringAsString(ColumnNames.ESSID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ESSID);
				else
					this.ESSID = base.SetstringAsString(ColumnNames.ESSID, value);
			}
		}

		public virtual string s_BSSID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BSSID) ? string.Empty : base.GetstringAsString(ColumnNames.BSSID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BSSID);
				else
					this.BSSID = base.SetstringAsString(ColumnNames.BSSID, value);
			}
		}

		public virtual string s_Info
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Info) ? string.Empty : base.GetstringAsString(ColumnNames.Info);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Info);
				else
					this.Info = base.SetstringAsString(ColumnNames.Info, value);
			}
		}

		public virtual string s_Channel
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Channel) ? string.Empty : base.GetdecimalAsString(ColumnNames.Channel);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Channel);
				else
					this.Channel = base.SetdecimalAsString(ColumnNames.Channel, value);
			}
		}

		public virtual string s_Cloaked
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Cloaked) ? string.Empty : base.GetstringAsString(ColumnNames.Cloaked);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Cloaked);
				else
					this.Cloaked = base.SetstringAsString(ColumnNames.Cloaked, value);
			}
		}

		public virtual string s_Encryption
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Encryption) ? string.Empty : base.GetstringAsString(ColumnNames.Encryption);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Encryption);
				else
					this.Encryption = base.SetstringAsString(ColumnNames.Encryption, value);
			}
		}

		public virtual string s_Decrypted
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Decrypted) ? string.Empty : base.GetstringAsString(ColumnNames.Decrypted);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Decrypted);
				else
					this.Decrypted = base.SetstringAsString(ColumnNames.Decrypted, value);
			}
		}

		public virtual string s_MaxRate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MaxRate) ? string.Empty : base.GetdecimalAsString(ColumnNames.MaxRate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MaxRate);
				else
					this.MaxRate = base.SetdecimalAsString(ColumnNames.MaxRate, value);
			}
		}

		public virtual string s_MaxSeenRate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MaxSeenRate) ? string.Empty : base.GetdecimalAsString(ColumnNames.MaxSeenRate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MaxSeenRate);
				else
					this.MaxSeenRate = base.SetdecimalAsString(ColumnNames.MaxSeenRate, value);
			}
		}

		public virtual string s_Beacon
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Beacon) ? string.Empty : base.GetstringAsString(ColumnNames.Beacon);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Beacon);
				else
					this.Beacon = base.SetstringAsString(ColumnNames.Beacon, value);
			}
		}

		public virtual string s_LLC
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LLC) ? string.Empty : base.GetstringAsString(ColumnNames.LLC);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LLC);
				else
					this.LLC = base.SetstringAsString(ColumnNames.LLC, value);
			}
		}

		public virtual string s_Data
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Data) ? string.Empty : base.GetstringAsString(ColumnNames.Data);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Data);
				else
					this.Data = base.SetstringAsString(ColumnNames.Data, value);
			}
		}

		public virtual string s_Crypt
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Crypt) ? string.Empty : base.GetstringAsString(ColumnNames.Crypt);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Crypt);
				else
					this.Crypt = base.SetstringAsString(ColumnNames.Crypt, value);
			}
		}

		public virtual string s_Weak
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Weak) ? string.Empty : base.GetdecimalAsString(ColumnNames.Weak);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Weak);
				else
					this.Weak = base.SetdecimalAsString(ColumnNames.Weak, value);
			}
		}

		public virtual string s_Total
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Total) ? string.Empty : base.GetdecimalAsString(ColumnNames.Total);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Total);
				else
					this.Total = base.SetdecimalAsString(ColumnNames.Total, value);
			}
		}

		public virtual string s_Carrier
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Carrier) ? string.Empty : base.GetdecimalAsString(ColumnNames.Carrier);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Carrier);
				else
					this.Carrier = base.SetdecimalAsString(ColumnNames.Carrier, value);
			}
		}

		public virtual string s_Encoding
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Encoding) ? string.Empty : base.GetstringAsString(ColumnNames.Encoding);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Encoding);
				else
					this.Encoding = base.SetstringAsString(ColumnNames.Encoding, value);
			}
		}

		public virtual string s_FirstTime
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstTime) ? string.Empty : base.GetstringAsString(ColumnNames.FirstTime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstTime);
				else
					this.FirstTime = base.SetstringAsString(ColumnNames.FirstTime, value);
			}
		}

		public virtual string s_LastTime
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastTime) ? string.Empty : base.GetstringAsString(ColumnNames.LastTime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastTime);
				else
					this.LastTime = base.SetstringAsString(ColumnNames.LastTime, value);
			}
		}

		public virtual string s_BestQuality
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BestQuality) ? string.Empty : base.GetstringAsString(ColumnNames.BestQuality);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BestQuality);
				else
					this.BestQuality = base.SetstringAsString(ColumnNames.BestQuality, value);
			}
		}

		public virtual string s_BestSignal
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BestSignal) ? string.Empty : base.GetdecimalAsString(ColumnNames.BestSignal);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BestSignal);
				else
					this.BestSignal = base.SetdecimalAsString(ColumnNames.BestSignal, value);
			}
		}

		public virtual string s_BestNoise
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BestNoise) ? string.Empty : base.GetdecimalAsString(ColumnNames.BestNoise);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BestNoise);
				else
					this.BestNoise = base.SetdecimalAsString(ColumnNames.BestNoise, value);
			}
		}

		public virtual string s_GPSMinLat
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GPSMinLat) ? string.Empty : base.GetdecimalAsString(ColumnNames.GPSMinLat);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GPSMinLat);
				else
					this.GPSMinLat = base.SetdecimalAsString(ColumnNames.GPSMinLat, value);
			}
		}

		public virtual string s_GPSMinLon
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GPSMinLon) ? string.Empty : base.GetdecimalAsString(ColumnNames.GPSMinLon);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GPSMinLon);
				else
					this.GPSMinLon = base.SetdecimalAsString(ColumnNames.GPSMinLon, value);
			}
		}

		public virtual string s_GPSMinAlt
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GPSMinAlt) ? string.Empty : base.GetdecimalAsString(ColumnNames.GPSMinAlt);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GPSMinAlt);
				else
					this.GPSMinAlt = base.SetdecimalAsString(ColumnNames.GPSMinAlt, value);
			}
		}

		public virtual string s_GPSMinSpd
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GPSMinSpd) ? string.Empty : base.GetdecimalAsString(ColumnNames.GPSMinSpd);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GPSMinSpd);
				else
					this.GPSMinSpd = base.SetdecimalAsString(ColumnNames.GPSMinSpd, value);
			}
		}

		public virtual string s_GPSMaxLat
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GPSMaxLat) ? string.Empty : base.GetdecimalAsString(ColumnNames.GPSMaxLat);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GPSMaxLat);
				else
					this.GPSMaxLat = base.SetdecimalAsString(ColumnNames.GPSMaxLat, value);
			}
		}

		public virtual string s_GPSMaxLon
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GPSMaxLon) ? string.Empty : base.GetdecimalAsString(ColumnNames.GPSMaxLon);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GPSMaxLon);
				else
					this.GPSMaxLon = base.SetdecimalAsString(ColumnNames.GPSMaxLon, value);
			}
		}

		public virtual string s_GPSMaxAlt
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GPSMaxAlt) ? string.Empty : base.GetdecimalAsString(ColumnNames.GPSMaxAlt);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GPSMaxAlt);
				else
					this.GPSMaxAlt = base.SetdecimalAsString(ColumnNames.GPSMaxAlt, value);
			}
		}

		public virtual string s_GPSMaxSpd
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GPSMaxSpd) ? string.Empty : base.GetdecimalAsString(ColumnNames.GPSMaxSpd);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GPSMaxSpd);
				else
					this.GPSMaxSpd = base.SetdecimalAsString(ColumnNames.GPSMaxSpd, value);
			}
		}

		public virtual string s_GPSBestLat
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GPSBestLat) ? string.Empty : base.GetdecimalAsString(ColumnNames.GPSBestLat);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GPSBestLat);
				else
					this.GPSBestLat = base.SetdecimalAsString(ColumnNames.GPSBestLat, value);
			}
		}

		public virtual string s_GPSBestLon
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GPSBestLon) ? string.Empty : base.GetdecimalAsString(ColumnNames.GPSBestLon);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GPSBestLon);
				else
					this.GPSBestLon = base.SetdecimalAsString(ColumnNames.GPSBestLon, value);
			}
		}

		public virtual string s_GPSBestAlt
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GPSBestAlt) ? string.Empty : base.GetdecimalAsString(ColumnNames.GPSBestAlt);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GPSBestAlt);
				else
					this.GPSBestAlt = base.SetdecimalAsString(ColumnNames.GPSBestAlt, value);
			}
		}

		public virtual string s_Datasize
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Datasize) ? string.Empty : base.GetstringAsString(ColumnNames.Datasize);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Datasize);
				else
					this.Datasize = base.SetstringAsString(ColumnNames.Datasize, value);
			}
		}

		public virtual string s_IPType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IPType) ? string.Empty : base.GetstringAsString(ColumnNames.IPType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IPType);
				else
					this.IPType = base.SetstringAsString(ColumnNames.IPType, value);
			}
		}

		public virtual string s_IP
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IP) ? string.Empty : base.GetstringAsString(ColumnNames.IP);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IP);
				else
					this.IP = base.SetstringAsString(ColumnNames.IP, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Oui
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Oui, Parameters.Oui);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Totalpacketsweak
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Totalpacketsweak, Parameters.Totalpacketsweak);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Totalpacketstotal
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Totalpacketstotal, Parameters.Totalpacketstotal);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Totalpacketsllc
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Totalpacketsllc, Parameters.Totalpacketsllc);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Totalpacketsdupeiv
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Totalpacketsdupeiv, Parameters.Totalpacketsdupeiv);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Totalpacketsdata
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Totalpacketsdata, Parameters.Totalpacketsdata);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Totalpacketscrypt
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Totalpacketscrypt, Parameters.Totalpacketscrypt);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Network
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Network, Parameters.Network);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NetType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NetType, Parameters.NetType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ESSID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ESSID, Parameters.ESSID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BSSID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BSSID, Parameters.BSSID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Info
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Info, Parameters.Info);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Channel
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Channel, Parameters.Channel);
							_clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Cloaked
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Cloaked, Parameters.Cloaked);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Encryption
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Encryption, Parameters.Encryption);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Decrypted
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Decrypted, Parameters.Decrypted);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MaxRate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MaxRate, Parameters.MaxRate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MaxSeenRate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MaxSeenRate, Parameters.MaxSeenRate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Beacon
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Beacon, Parameters.Beacon);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LLC
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LLC, Parameters.LLC);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Data
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Data, Parameters.Data);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Crypt
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Crypt, Parameters.Crypt);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Weak
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Weak, Parameters.Weak);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Total
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Total, Parameters.Total);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Carrier
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Carrier, Parameters.Carrier);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Encoding
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Encoding, Parameters.Encoding);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstTime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstTime, Parameters.FirstTime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastTime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastTime, Parameters.LastTime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BestQuality
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BestQuality, Parameters.BestQuality);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BestSignal
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BestSignal, Parameters.BestSignal);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BestNoise
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BestNoise, Parameters.BestNoise);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GPSMinLat
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GPSMinLat, Parameters.GPSMinLat);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GPSMinLon
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GPSMinLon, Parameters.GPSMinLon);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GPSMinAlt
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GPSMinAlt, Parameters.GPSMinAlt);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GPSMinSpd
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GPSMinSpd, Parameters.GPSMinSpd);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GPSMaxLat
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GPSMaxLat, Parameters.GPSMaxLat);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GPSMaxLon
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GPSMaxLon, Parameters.GPSMaxLon);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GPSMaxAlt
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GPSMaxAlt, Parameters.GPSMaxAlt);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GPSMaxSpd
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GPSMaxSpd, Parameters.GPSMaxSpd);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GPSBestLat
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GPSBestLat, Parameters.GPSBestLat);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GPSBestLon
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GPSBestLon, Parameters.GPSBestLon);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GPSBestAlt
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GPSBestAlt, Parameters.GPSBestAlt);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Datasize
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Datasize, Parameters.Datasize);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IPType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IPType, Parameters.IPType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IP
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IP, Parameters.IP);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Oui
		    {
				get
		        {
					if(_Oui_W == null)
	        	    {
						_Oui_W = TearOff.Oui;
					}
					return _Oui_W;
				}
			}

			public WhereParameter Totalpacketsweak
		    {
				get
		        {
					if(_Totalpacketsweak_W == null)
	        	    {
						_Totalpacketsweak_W = TearOff.Totalpacketsweak;
					}
					return _Totalpacketsweak_W;
				}
			}

			public WhereParameter Totalpacketstotal
		    {
				get
		        {
					if(_Totalpacketstotal_W == null)
	        	    {
						_Totalpacketstotal_W = TearOff.Totalpacketstotal;
					}
					return _Totalpacketstotal_W;
				}
			}

			public WhereParameter Totalpacketsllc
		    {
				get
		        {
					if(_Totalpacketsllc_W == null)
	        	    {
						_Totalpacketsllc_W = TearOff.Totalpacketsllc;
					}
					return _Totalpacketsllc_W;
				}
			}

			public WhereParameter Totalpacketsdupeiv
		    {
				get
		        {
					if(_Totalpacketsdupeiv_W == null)
	        	    {
						_Totalpacketsdupeiv_W = TearOff.Totalpacketsdupeiv;
					}
					return _Totalpacketsdupeiv_W;
				}
			}

			public WhereParameter Totalpacketsdata
		    {
				get
		        {
					if(_Totalpacketsdata_W == null)
	        	    {
						_Totalpacketsdata_W = TearOff.Totalpacketsdata;
					}
					return _Totalpacketsdata_W;
				}
			}

			public WhereParameter Totalpacketscrypt
		    {
				get
		        {
					if(_Totalpacketscrypt_W == null)
	        	    {
						_Totalpacketscrypt_W = TearOff.Totalpacketscrypt;
					}
					return _Totalpacketscrypt_W;
				}
			}

			public WhereParameter Network
		    {
				get
		        {
					if(_Network_W == null)
	        	    {
						_Network_W = TearOff.Network;
					}
					return _Network_W;
				}
			}

			public WhereParameter NetType
		    {
				get
		        {
					if(_NetType_W == null)
	        	    {
						_NetType_W = TearOff.NetType;
					}
					return _NetType_W;
				}
			}

			public WhereParameter ESSID
		    {
				get
		        {
					if(_ESSID_W == null)
	        	    {
						_ESSID_W = TearOff.ESSID;
					}
					return _ESSID_W;
				}
			}

			public WhereParameter BSSID
		    {
				get
		        {
					if(_BSSID_W == null)
	        	    {
						_BSSID_W = TearOff.BSSID;
					}
					return _BSSID_W;
				}
			}

			public WhereParameter Info
		    {
				get
		        {
					if(_Info_W == null)
	        	    {
						_Info_W = TearOff.Info;
					}
					return _Info_W;
				}
			}

			public WhereParameter Channel
		    {
				get
		        {
					if(_Channel_W == null)
	        	    {
						_Channel_W = TearOff.Channel;
					}
					return _Channel_W;
				}
			}

			public WhereParameter Cloaked
		    {
				get
		        {
					if(_Cloaked_W == null)
	        	    {
						_Cloaked_W = TearOff.Cloaked;
					}
					return _Cloaked_W;
				}
			}

			public WhereParameter Encryption
		    {
				get
		        {
					if(_Encryption_W == null)
	        	    {
						_Encryption_W = TearOff.Encryption;
					}
					return _Encryption_W;
				}
			}

			public WhereParameter Decrypted
		    {
				get
		        {
					if(_Decrypted_W == null)
	        	    {
						_Decrypted_W = TearOff.Decrypted;
					}
					return _Decrypted_W;
				}
			}

			public WhereParameter MaxRate
		    {
				get
		        {
					if(_MaxRate_W == null)
	        	    {
						_MaxRate_W = TearOff.MaxRate;
					}
					return _MaxRate_W;
				}
			}

			public WhereParameter MaxSeenRate
		    {
				get
		        {
					if(_MaxSeenRate_W == null)
	        	    {
						_MaxSeenRate_W = TearOff.MaxSeenRate;
					}
					return _MaxSeenRate_W;
				}
			}

			public WhereParameter Beacon
		    {
				get
		        {
					if(_Beacon_W == null)
	        	    {
						_Beacon_W = TearOff.Beacon;
					}
					return _Beacon_W;
				}
			}

			public WhereParameter LLC
		    {
				get
		        {
					if(_LLC_W == null)
	        	    {
						_LLC_W = TearOff.LLC;
					}
					return _LLC_W;
				}
			}

			public WhereParameter Data
		    {
				get
		        {
					if(_Data_W == null)
	        	    {
						_Data_W = TearOff.Data;
					}
					return _Data_W;
				}
			}

			public WhereParameter Crypt
		    {
				get
		        {
					if(_Crypt_W == null)
	        	    {
						_Crypt_W = TearOff.Crypt;
					}
					return _Crypt_W;
				}
			}

			public WhereParameter Weak
		    {
				get
		        {
					if(_Weak_W == null)
	        	    {
						_Weak_W = TearOff.Weak;
					}
					return _Weak_W;
				}
			}

			public WhereParameter Total
		    {
				get
		        {
					if(_Total_W == null)
	        	    {
						_Total_W = TearOff.Total;
					}
					return _Total_W;
				}
			}

			public WhereParameter Carrier
		    {
				get
		        {
					if(_Carrier_W == null)
	        	    {
						_Carrier_W = TearOff.Carrier;
					}
					return _Carrier_W;
				}
			}

			public WhereParameter Encoding
		    {
				get
		        {
					if(_Encoding_W == null)
	        	    {
						_Encoding_W = TearOff.Encoding;
					}
					return _Encoding_W;
				}
			}

			public WhereParameter FirstTime
		    {
				get
		        {
					if(_FirstTime_W == null)
	        	    {
						_FirstTime_W = TearOff.FirstTime;
					}
					return _FirstTime_W;
				}
			}

			public WhereParameter LastTime
		    {
				get
		        {
					if(_LastTime_W == null)
	        	    {
						_LastTime_W = TearOff.LastTime;
					}
					return _LastTime_W;
				}
			}

			public WhereParameter BestQuality
		    {
				get
		        {
					if(_BestQuality_W == null)
	        	    {
						_BestQuality_W = TearOff.BestQuality;
					}
					return _BestQuality_W;
				}
			}

			public WhereParameter BestSignal
		    {
				get
		        {
					if(_BestSignal_W == null)
	        	    {
						_BestSignal_W = TearOff.BestSignal;
					}
					return _BestSignal_W;
				}
			}

			public WhereParameter BestNoise
		    {
				get
		        {
					if(_BestNoise_W == null)
	        	    {
						_BestNoise_W = TearOff.BestNoise;
					}
					return _BestNoise_W;
				}
			}

			public WhereParameter GPSMinLat
		    {
				get
		        {
					if(_GPSMinLat_W == null)
	        	    {
						_GPSMinLat_W = TearOff.GPSMinLat;
					}
					return _GPSMinLat_W;
				}
			}

			public WhereParameter GPSMinLon
		    {
				get
		        {
					if(_GPSMinLon_W == null)
	        	    {
						_GPSMinLon_W = TearOff.GPSMinLon;
					}
					return _GPSMinLon_W;
				}
			}

			public WhereParameter GPSMinAlt
		    {
				get
		        {
					if(_GPSMinAlt_W == null)
	        	    {
						_GPSMinAlt_W = TearOff.GPSMinAlt;
					}
					return _GPSMinAlt_W;
				}
			}

			public WhereParameter GPSMinSpd
		    {
				get
		        {
					if(_GPSMinSpd_W == null)
	        	    {
						_GPSMinSpd_W = TearOff.GPSMinSpd;
					}
					return _GPSMinSpd_W;
				}
			}

			public WhereParameter GPSMaxLat
		    {
				get
		        {
					if(_GPSMaxLat_W == null)
	        	    {
						_GPSMaxLat_W = TearOff.GPSMaxLat;
					}
					return _GPSMaxLat_W;
				}
			}

			public WhereParameter GPSMaxLon
		    {
				get
		        {
					if(_GPSMaxLon_W == null)
	        	    {
						_GPSMaxLon_W = TearOff.GPSMaxLon;
					}
					return _GPSMaxLon_W;
				}
			}

			public WhereParameter GPSMaxAlt
		    {
				get
		        {
					if(_GPSMaxAlt_W == null)
	        	    {
						_GPSMaxAlt_W = TearOff.GPSMaxAlt;
					}
					return _GPSMaxAlt_W;
				}
			}

			public WhereParameter GPSMaxSpd
		    {
				get
		        {
					if(_GPSMaxSpd_W == null)
	        	    {
						_GPSMaxSpd_W = TearOff.GPSMaxSpd;
					}
					return _GPSMaxSpd_W;
				}
			}

			public WhereParameter GPSBestLat
		    {
				get
		        {
					if(_GPSBestLat_W == null)
	        	    {
						_GPSBestLat_W = TearOff.GPSBestLat;
					}
					return _GPSBestLat_W;
				}
			}

			public WhereParameter GPSBestLon
		    {
				get
		        {
					if(_GPSBestLon_W == null)
	        	    {
						_GPSBestLon_W = TearOff.GPSBestLon;
					}
					return _GPSBestLon_W;
				}
			}

			public WhereParameter GPSBestAlt
		    {
				get
		        {
					if(_GPSBestAlt_W == null)
	        	    {
						_GPSBestAlt_W = TearOff.GPSBestAlt;
					}
					return _GPSBestAlt_W;
				}
			}

			public WhereParameter Datasize
		    {
				get
		        {
					if(_Datasize_W == null)
	        	    {
						_Datasize_W = TearOff.Datasize;
					}
					return _Datasize_W;
				}
			}

			public WhereParameter IPType
		    {
				get
		        {
					if(_IPType_W == null)
	        	    {
						_IPType_W = TearOff.IPType;
					}
					return _IPType_W;
				}
			}

			public WhereParameter IP
		    {
				get
		        {
					if(_IP_W == null)
	        	    {
						_IP_W = TearOff.IP;
					}
					return _IP_W;
				}
			}

			private WhereParameter _Oui_W = null;
			private WhereParameter _Totalpacketsweak_W = null;
			private WhereParameter _Totalpacketstotal_W = null;
			private WhereParameter _Totalpacketsllc_W = null;
			private WhereParameter _Totalpacketsdupeiv_W = null;
			private WhereParameter _Totalpacketsdata_W = null;
			private WhereParameter _Totalpacketscrypt_W = null;
			private WhereParameter _Network_W = null;
			private WhereParameter _NetType_W = null;
			private WhereParameter _ESSID_W = null;
			private WhereParameter _BSSID_W = null;
			private WhereParameter _Info_W = null;
			private WhereParameter _Channel_W = null;
			private WhereParameter _Cloaked_W = null;
			private WhereParameter _Encryption_W = null;
			private WhereParameter _Decrypted_W = null;
			private WhereParameter _MaxRate_W = null;
			private WhereParameter _MaxSeenRate_W = null;
			private WhereParameter _Beacon_W = null;
			private WhereParameter _LLC_W = null;
			private WhereParameter _Data_W = null;
			private WhereParameter _Crypt_W = null;
			private WhereParameter _Weak_W = null;
			private WhereParameter _Total_W = null;
			private WhereParameter _Carrier_W = null;
			private WhereParameter _Encoding_W = null;
			private WhereParameter _FirstTime_W = null;
			private WhereParameter _LastTime_W = null;
			private WhereParameter _BestQuality_W = null;
			private WhereParameter _BestSignal_W = null;
			private WhereParameter _BestNoise_W = null;
			private WhereParameter _GPSMinLat_W = null;
			private WhereParameter _GPSMinLon_W = null;
			private WhereParameter _GPSMinAlt_W = null;
			private WhereParameter _GPSMinSpd_W = null;
			private WhereParameter _GPSMaxLat_W = null;
			private WhereParameter _GPSMaxLon_W = null;
			private WhereParameter _GPSMaxAlt_W = null;
			private WhereParameter _GPSMaxSpd_W = null;
			private WhereParameter _GPSBestLat_W = null;
			private WhereParameter _GPSBestLon_W = null;
			private WhereParameter _GPSBestAlt_W = null;
			private WhereParameter _Datasize_W = null;
			private WhereParameter _IPType_W = null;
			private WhereParameter _IP_W = null;

			public void WhereClauseReset()
			{
				_Oui_W = null;
				_Totalpacketsweak_W = null;
				_Totalpacketstotal_W = null;
				_Totalpacketsllc_W = null;
				_Totalpacketsdupeiv_W = null;
				_Totalpacketsdata_W = null;
				_Totalpacketscrypt_W = null;
				_Network_W = null;
				_NetType_W = null;
				_ESSID_W = null;
				_BSSID_W = null;
				_Info_W = null;
				_Channel_W = null;
				_Cloaked_W = null;
				_Encryption_W = null;
				_Decrypted_W = null;
				_MaxRate_W = null;
				_MaxSeenRate_W = null;
				_Beacon_W = null;
				_LLC_W = null;
				_Data_W = null;
				_Crypt_W = null;
				_Weak_W = null;
				_Total_W = null;
				_Carrier_W = null;
				_Encoding_W = null;
				_FirstTime_W = null;
				_LastTime_W = null;
				_BestQuality_W = null;
				_BestSignal_W = null;
				_BestNoise_W = null;
				_GPSMinLat_W = null;
				_GPSMinLon_W = null;
				_GPSMinAlt_W = null;
				_GPSMinSpd_W = null;
				_GPSMaxLat_W = null;
				_GPSMaxLon_W = null;
				_GPSMaxAlt_W = null;
				_GPSMaxSpd_W = null;
				_GPSBestLat_W = null;
				_GPSBestLon_W = null;
				_GPSBestAlt_W = null;
				_Datasize_W = null;
				_IPType_W = null;
				_IP_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Oui
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Oui, Parameters.Oui);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Totalpacketsweak
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Totalpacketsweak, Parameters.Totalpacketsweak);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Totalpacketstotal
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Totalpacketstotal, Parameters.Totalpacketstotal);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Totalpacketsllc
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Totalpacketsllc, Parameters.Totalpacketsllc);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Totalpacketsdupeiv
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Totalpacketsdupeiv, Parameters.Totalpacketsdupeiv);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Totalpacketsdata
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Totalpacketsdata, Parameters.Totalpacketsdata);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Totalpacketscrypt
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Totalpacketscrypt, Parameters.Totalpacketscrypt);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Network
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Network, Parameters.Network);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NetType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NetType, Parameters.NetType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ESSID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ESSID, Parameters.ESSID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BSSID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BSSID, Parameters.BSSID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Info
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Info, Parameters.Info);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Channel
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Channel, Parameters.Channel);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Cloaked
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Cloaked, Parameters.Cloaked);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Encryption
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Encryption, Parameters.Encryption);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Decrypted
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Decrypted, Parameters.Decrypted);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MaxRate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MaxRate, Parameters.MaxRate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MaxSeenRate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MaxSeenRate, Parameters.MaxSeenRate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Beacon
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Beacon, Parameters.Beacon);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LLC
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LLC, Parameters.LLC);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Data
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Data, Parameters.Data);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Crypt
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Crypt, Parameters.Crypt);
							_clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Weak
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Weak, Parameters.Weak);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Total
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Total, Parameters.Total);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Carrier
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Carrier, Parameters.Carrier);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Encoding
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Encoding, Parameters.Encoding);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstTime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstTime, Parameters.FirstTime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastTime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastTime, Parameters.LastTime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BestQuality
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BestQuality, Parameters.BestQuality);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BestSignal
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BestSignal, Parameters.BestSignal);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BestNoise
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BestNoise, Parameters.BestNoise);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GPSMinLat
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GPSMinLat, Parameters.GPSMinLat);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GPSMinLon
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GPSMinLon, Parameters.GPSMinLon);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GPSMinAlt
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GPSMinAlt, Parameters.GPSMinAlt);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GPSMinSpd
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GPSMinSpd, Parameters.GPSMinSpd);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GPSMaxLat
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GPSMaxLat, Parameters.GPSMaxLat);
							_clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GPSMaxLon
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GPSMaxLon, Parameters.GPSMaxLon);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GPSMaxAlt
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GPSMaxAlt, Parameters.GPSMaxAlt);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GPSMaxSpd
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GPSMaxSpd, Parameters.GPSMaxSpd);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GPSBestLat
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GPSBestLat, Parameters.GPSBestLat);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GPSBestLon
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GPSBestLon, Parameters.GPSBestLon);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GPSBestAlt
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GPSBestAlt, Parameters.GPSBestAlt);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Datasize
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Datasize, Parameters.Datasize);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IPType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IPType, Parameters.IPType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IP
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IP, Parameters.IP);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Oui
		    {
				get
		        {
					if(_Oui_W == null)
	        	    {
						_Oui_W = TearOff.Oui;
					}
					return _Oui_W;
				}
			}

			public AggregateParameter Totalpacketsweak
		    {
				get
		        {
					if(_Totalpacketsweak_W == null)
	        	    {
						_Totalpacketsweak_W = TearOff.Totalpacketsweak;
					}
					return _Totalpacketsweak_W;
				}
			}

			public AggregateParameter Totalpacketstotal
		    {
				get
		        {
					if(_Totalpacketstotal_W == null)
	        	    {
						_Totalpacketstotal_W = TearOff.Totalpacketstotal;
					}
					return _Totalpacketstotal_W;
				}
			}

			public AggregateParameter Totalpacketsllc
		    {
				get
		        {
					if(_Totalpacketsllc_W == null)
	        	    {
						_Totalpacketsllc_W = TearOff.Totalpacketsllc;
					}
					return _Totalpacketsllc_W;
				}
			}

			public AggregateParameter Totalpacketsdupeiv
		    {
				get
		        {
					if(_Totalpacketsdupeiv_W == null)
	        	    {
						_Totalpacketsdupeiv_W = TearOff.Totalpacketsdupeiv;
					}
					return _Totalpacketsdupeiv_W;
				}
			}

			public AggregateParameter Totalpacketsdata
		    {
				get
		        {
					if(_Totalpacketsdata_W == null)
	        	    {
						_Totalpacketsdata_W = TearOff.Totalpacketsdata;
					}
					return _Totalpacketsdata_W;
				}
			}

			public AggregateParameter Totalpacketscrypt
		    {
				get
		        {
					if(_Totalpacketscrypt_W == null)
	        	    {
						_Totalpacketscrypt_W = TearOff.Totalpacketscrypt;
					}
					return _Totalpacketscrypt_W;
				}
			}

			public AggregateParameter Network
		    {
				get
		        {
					if(_Network_W == null)
	        	    {
						_Network_W = TearOff.Network;
					}
					return _Network_W;
				}
			}

			public AggregateParameter NetType
		    {
				get
		        {
					if(_NetType_W == null)
	        	    {
						_NetType_W = TearOff.NetType;
					}
					return _NetType_W;
				}
			}

			public AggregateParameter ESSID
		    {
				get
		        {
					if(_ESSID_W == null)
	        	    {
						_ESSID_W = TearOff.ESSID;
					}
					return _ESSID_W;
				}
			}

			public AggregateParameter BSSID
		    {
				get
		        {
					if(_BSSID_W == null)
	        	    {
						_BSSID_W = TearOff.BSSID;
					}
					return _BSSID_W;
				}
			}

			public AggregateParameter Info
		    {
				get
		        {
					if(_Info_W == null)
	        	    {
						_Info_W = TearOff.Info;
					}
					return _Info_W;
				}
			}

			public AggregateParameter Channel
		    {
				get
		        {
					if(_Channel_W == null)
	        	    {
						_Channel_W = TearOff.Channel;
					}
					return _Channel_W;
				}
			}

			public AggregateParameter Cloaked
		    {
				get
		        {
					if(_Cloaked_W == null)
	        	    {
						_Cloaked_W = TearOff.Cloaked;
					}
					return _Cloaked_W;
				}
			}

			public AggregateParameter Encryption
		    {
				get
		        {
					if(_Encryption_W == null)
	        	    {
						_Encryption_W = TearOff.Encryption;
					}
					return _Encryption_W;
				}
			}

			public AggregateParameter Decrypted
		    {
				get
		        {
					if(_Decrypted_W == null)
	        	    {
						_Decrypted_W = TearOff.Decrypted;
					}
					return _Decrypted_W;
				}
			}

			public AggregateParameter MaxRate
		    {
				get
		        {
					if(_MaxRate_W == null)
	        	    {
						_MaxRate_W = TearOff.MaxRate;
					}
					return _MaxRate_W;
				}
			}

			public AggregateParameter MaxSeenRate
		    {
				get
		        {
					if(_MaxSeenRate_W == null)
	        	    {
						_MaxSeenRate_W = TearOff.MaxSeenRate;
					}
					return _MaxSeenRate_W;
				}
			}

			public AggregateParameter Beacon
		    {
				get
		        {
					if(_Beacon_W == null)
	        	    {
						_Beacon_W = TearOff.Beacon;
					}
					return _Beacon_W;
				}
			}

			public AggregateParameter LLC
		    {
				get
		        {
					if(_LLC_W == null)
	        	    {
						_LLC_W = TearOff.LLC;
					}
					return _LLC_W;
				}
			}

			public AggregateParameter Data
		    {
				get
		        {
					if(_Data_W == null)
	        	    {
						_Data_W = TearOff.Data;
					}
					return _Data_W;
				}
			}

			public AggregateParameter Crypt
		    {
				get
		        {
					if(_Crypt_W == null)
	        	    {
						_Crypt_W = TearOff.Crypt;
					}
					return _Crypt_W;
				}
			}

			public AggregateParameter Weak
		    {
				get
		        {
					if(_Weak_W == null)
	        	    {
						_Weak_W = TearOff.Weak;
					}
					return _Weak_W;
				}
			}

			public AggregateParameter Total
		    {
				get
		        {
					if(_Total_W == null)
	        	    {
						_Total_W = TearOff.Total;
					}
					return _Total_W;
				}
			}

			public AggregateParameter Carrier
		    {
				get
		        {
					if(_Carrier_W == null)
	        	    {
						_Carrier_W = TearOff.Carrier;
					}
					return _Carrier_W;
				}
			}

			public AggregateParameter Encoding
		    {
				get
		        {
					if(_Encoding_W == null)
	        	    {
						_Encoding_W = TearOff.Encoding;
					}
					return _Encoding_W;
				}
			}

			public AggregateParameter FirstTime
		    {
				get
		        {
					if(_FirstTime_W == null)
	        	    {
						_FirstTime_W = TearOff.FirstTime;
					}
					return _FirstTime_W;
				}
			}

			public AggregateParameter LastTime
		    {
				get
		        {
					if(_LastTime_W == null)
	        	    {
						_LastTime_W = TearOff.LastTime;
					}
					return _LastTime_W;
				}
			}

			public AggregateParameter BestQuality
		    {
				get
		        {
					if(_BestQuality_W == null)
	        	    {
						_BestQuality_W = TearOff.BestQuality;
					}
					return _BestQuality_W;
				}
			}

			public AggregateParameter BestSignal
		    {
				get
		        {
					if(_BestSignal_W == null)
	        	    {
						_BestSignal_W = TearOff.BestSignal;
					}
					return _BestSignal_W;
				}
			}

			public AggregateParameter BestNoise
		    {
				get
		        {
					if(_BestNoise_W == null)
	        	    {
						_BestNoise_W = TearOff.BestNoise;
					}
					return _BestNoise_W;
				}
			}

			public AggregateParameter GPSMinLat
		    {
				get
		        {
					if(_GPSMinLat_W == null)
	        	    {
						_GPSMinLat_W = TearOff.GPSMinLat;
					}
					return _GPSMinLat_W;
				}
			}

			public AggregateParameter GPSMinLon
		    {
				get
		        {
					if(_GPSMinLon_W == null)
	        	    {
						_GPSMinLon_W = TearOff.GPSMinLon;
					}
					return _GPSMinLon_W;
				}
			}

			public AggregateParameter GPSMinAlt
		    {
				get
		        {
					if(_GPSMinAlt_W == null)
	        	    {
						_GPSMinAlt_W = TearOff.GPSMinAlt;
					}
					return _GPSMinAlt_W;
				}
			}

			public AggregateParameter GPSMinSpd
		    {
				get
		        {
					if(_GPSMinSpd_W == null)
	        	    {
						_GPSMinSpd_W = TearOff.GPSMinSpd;
					}
					return _GPSMinSpd_W;
				}
			}

			public AggregateParameter GPSMaxLat
		    {
				get
		        {
					if(_GPSMaxLat_W == null)
	        	    {
						_GPSMaxLat_W = TearOff.GPSMaxLat;
					}
					return _GPSMaxLat_W;
				}
			}

			public AggregateParameter GPSMaxLon
		    {
				get
		        {
					if(_GPSMaxLon_W == null)
	        	    {
						_GPSMaxLon_W = TearOff.GPSMaxLon;
					}
					return _GPSMaxLon_W;
				}
			}

			public AggregateParameter GPSMaxAlt
		    {
				get
		        {
					if(_GPSMaxAlt_W == null)
	        	    {
						_GPSMaxAlt_W = TearOff.GPSMaxAlt;
					}
					return _GPSMaxAlt_W;
				}
			}

			public AggregateParameter GPSMaxSpd
		    {
				get
		        {
					if(_GPSMaxSpd_W == null)
	        	    {
						_GPSMaxSpd_W = TearOff.GPSMaxSpd;
					}
					return _GPSMaxSpd_W;
				}
			}

			public AggregateParameter GPSBestLat
		    {
				get
		        {
					if(_GPSBestLat_W == null)
	        	    {
						_GPSBestLat_W = TearOff.GPSBestLat;
					}
					return _GPSBestLat_W;
				}
			}

			public AggregateParameter GPSBestLon
		    {
				get
		        {
					if(_GPSBestLon_W == null)
	        	    {
						_GPSBestLon_W = TearOff.GPSBestLon;
					}
					return _GPSBestLon_W;
				}
			}

			public AggregateParameter GPSBestAlt
		    {
				get
		        {
					if(_GPSBestAlt_W == null)
	        	    {
						_GPSBestAlt_W = TearOff.GPSBestAlt;
					}
					return _GPSBestAlt_W;
				}
			}

			public AggregateParameter Datasize
		    {
				get
		        {
					if(_Datasize_W == null)
	        	    {
						_Datasize_W = TearOff.Datasize;
					}
					return _Datasize_W;
				}
			}

			public AggregateParameter IPType
		    {
				get
		        {
					if(_IPType_W == null)
	        	    {
						_IPType_W = TearOff.IPType;
					}
					return _IPType_W;
				}
			}

			public AggregateParameter IP
		    {
				get
		        {
					if(_IP_W == null)
	        	    {
						_IP_W = TearOff.IP;
					}
					return _IP_W;
				}
			}

			private AggregateParameter _Oui_W = null;
			private AggregateParameter _Totalpacketsweak_W = null;
			private AggregateParameter _Totalpacketstotal_W = null;
			private AggregateParameter _Totalpacketsllc_W = null;
			private AggregateParameter _Totalpacketsdupeiv_W = null;
			private AggregateParameter _Totalpacketsdata_W = null;
			private AggregateParameter _Totalpacketscrypt_W = null;
			private AggregateParameter _Network_W = null;
			private AggregateParameter _NetType_W = null;
			private AggregateParameter _ESSID_W = null;
			private AggregateParameter _BSSID_W = null;
			private AggregateParameter _Info_W = null;
			private AggregateParameter _Channel_W = null;
			private AggregateParameter _Cloaked_W = null;
			private AggregateParameter _Encryption_W = null;
			private AggregateParameter _Decrypted_W = null;
			private AggregateParameter _MaxRate_W = null;
			private AggregateParameter _MaxSeenRate_W = null;
			private AggregateParameter _Beacon_W = null;
			private AggregateParameter _LLC_W = null;
			private AggregateParameter _Data_W = null;
			private AggregateParameter _Crypt_W = null;
			private AggregateParameter _Weak_W = null;
			private AggregateParameter _Total_W = null;
			private AggregateParameter _Carrier_W = null;
			private AggregateParameter _Encoding_W = null;
			private AggregateParameter _FirstTime_W = null;
			private AggregateParameter _LastTime_W = null;
			private AggregateParameter _BestQuality_W = null;
			private AggregateParameter _BestSignal_W = null;
			private AggregateParameter _BestNoise_W = null;
			private AggregateParameter _GPSMinLat_W = null;
			private AggregateParameter _GPSMinLon_W = null;
			private AggregateParameter _GPSMinAlt_W = null;
			private AggregateParameter _GPSMinSpd_W = null;
			private AggregateParameter _GPSMaxLat_W = null;
			private AggregateParameter _GPSMaxLon_W = null;
			private AggregateParameter _GPSMaxAlt_W = null;
			private AggregateParameter _GPSMaxSpd_W = null;
			private AggregateParameter _GPSBestLat_W = null;
			private AggregateParameter _GPSBestLon_W = null;
			private AggregateParameter _GPSBestAlt_W = null;
			private AggregateParameter _Datasize_W = null;
			private AggregateParameter _IPType_W = null;
			private AggregateParameter _IP_W = null;

			public void AggregateClauseReset()
			{
				_Oui_W = null;
				_Totalpacketsweak_W = null;
				_Totalpacketstotal_W = null;
				_Totalpacketsllc_W = null;
				_Totalpacketsdupeiv_W = null;
				_Totalpacketsdata_W = null;
				_Totalpacketscrypt_W = null;
				_Network_W = null;
				_NetType_W = null;
				_ESSID_W = null;
				_BSSID_W = null;
				_Info_W = null;
				_Channel_W = null;
				_Cloaked_W = null;
				_Encryption_W = null;
				_Decrypted_W = null;
				_MaxRate_W = null;
				_MaxSeenRate_W = null;
				_Beacon_W = null;
				_LLC_W = null;
				_Data_W = null;
				_Crypt_W = null;
				_Weak_W = null;
				_Total_W = null;
				_Carrier_W = null;
				_Encoding_W = null;
				_FirstTime_W = null;
				_LastTime_W = null;
				_BestQuality_W = null;
				_BestSignal_W = null;
				_BestNoise_W = null;
				_GPSMinLat_W = null;
				_GPSMinLon_W = null;
				_GPSMinAlt_W = null;
				_GPSMinSpd_W = null;
				_GPSMaxLat_W = null;
				_GPSMaxLon_W = null;
				_GPSMaxAlt_W = null;
				_GPSMaxSpd_W = null;
				_GPSBestLat_W = null;
				_GPSBestLon_W = null;
				_GPSBestAlt_W = null;
				_Datasize_W = null;
				_IPType_W = null;
				_IP_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
			
		
		protected override IDbCommand GetInsertCommand()
		{
			SQLiteCommand cmd = new SQLiteCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
			@"INSERT INTO [Data]
			(
				[oui],
				[totalpacketsweak],
				[totalpacketstotal],
				[totalpacketsllc],
				[totalpacketsdupeiv],
				[totalpacketsdata],
				[totalpacketscrypt],
				[Network],
				[NetType],
				[ESSID],
				[BSSID],
				[Info],
				[Channel],
				[Cloaked],
				[Encryption],
				[Decrypted],
				[MaxRate],
				[MaxSeenRate],
				[Beacon],
				[LLC],
				[Data],
				[Crypt],
				[Weak],
				[Total],
				[Carrier],
				[Encoding],
				[FirstTime],
				[LastTime],
				[BestQuality],
				[BestSignal],
				[BestNoise],
				[GPSMinLat],
				[GPSMinLon],
				[GPSMinAlt],
				[GPSMinSpd],
				[GPSMaxLat],
				[GPSMaxLon],
				[GPSMaxAlt],
				[GPSMaxSpd],
				[GPSBestLat],
				[GPSBestLon],
				[GPSBestAlt],
				[Datasize],
				[IPType],
				[IP]
			)
			VALUES
			(
				@oui,
				@totalpacketsweak,
				@totalpacketstotal,
				@totalpacketsllc,
				@totalpacketsdupeiv,
				@totalpacketsdata,
				@totalpacketscrypt,
				@Network,
				@NetType,
				@ESSID,
				@BSSID,
				@Info,
				@Channel,
				@Cloaked,
				@Encryption,
				@Decrypted,
				@MaxRate,
				@MaxSeenRate,
				@Beacon,
				@LLC,
				@Data,
				@Crypt,
				@Weak,
				@Total,
				@Carrier,
				@Encoding,
				@FirstTime,
				@LastTime,
				@BestQuality,
				@BestSignal,
				@BestNoise,
				@GPSMinLat,
				@GPSMinLon,
				@GPSMinAlt,
				@GPSMinSpd,
				@GPSMaxLat,
				@GPSMaxLon,
				@GPSMaxAlt,
				@GPSMaxSpd,
				@GPSBestLat,
				@GPSBestLon,
				@GPSBestAlt,
				@Datasize,
				@IPType,
				@IP
			)";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			SQLiteCommand cmd = new SQLiteCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText = 
			@"UPDATE [Data] SET 
				[oui]=@oui,
				[totalpacketsweak]=@totalpacketsweak,
				[totalpacketstotal]=@totalpacketstotal,
				[totalpacketsllc]=@totalpacketsllc,
				[totalpacketsdupeiv]=@totalpacketsdupeiv,
				[totalpacketsdata]=@totalpacketsdata,
				[totalpacketscrypt]=@totalpacketscrypt,
				[Network]=@Network,
				[NetType]=@NetType,
				[ESSID]=@ESSID,
				[Info]=@Info,
				[Channel]=@Channel,
				[Cloaked]=@Cloaked,
				[Encryption]=@Encryption,
				[Decrypted]=@Decrypted,
				[MaxRate]=@MaxRate,
				[MaxSeenRate]=@MaxSeenRate,
				[Beacon]=@Beacon,
				[LLC]=@LLC,
				[Data]=@Data,
				[Crypt]=@Crypt,
				[Weak]=@Weak,
				[Total]=@Total,
				[Carrier]=@Carrier,
				[Encoding]=@Encoding,
				[FirstTime]=@FirstTime,
				[LastTime]=@LastTime,
				[BestQuality]=@BestQuality,
				[BestSignal]=@BestSignal,
				[BestNoise]=@BestNoise,
				[GPSMinLat]=@GPSMinLat,
				[GPSMinLon]=@GPSMinLon,
				[GPSMinAlt]=@GPSMinAlt,
				[GPSMinSpd]=@GPSMinSpd,
				[GPSMaxLat]=@GPSMaxLat,
				[GPSMaxLon]=@GPSMaxLon,
				[GPSMaxAlt]=@GPSMaxAlt,
				[GPSMaxSpd]=@GPSMaxSpd,
				[GPSBestLat]=@GPSBestLat,
				[GPSBestLon]=@GPSBestLon,
				[GPSBestAlt]=@GPSBestAlt,
				[Datasize]=@Datasize,
				[IPType]=@IPType,
				[IP]=@IP
			WHERE
				[BSSID]=@BSSID";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			SQLiteCommand cmd = new SQLiteCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
			@"DELETE FROM [Data] 
			WHERE
				[BSSID]=@BSSID";

	
			SQLiteParameter p;
			p = cmd.Parameters.Add(Parameters.BSSID);
			p.SourceColumn = ColumnNames.BSSID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SQLiteCommand cmd)
		{
			SQLiteParameter p;
		
			p = cmd.Parameters.Add(Parameters.Oui);
			p.SourceColumn = ColumnNames.Oui;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Totalpacketsweak);
			p.SourceColumn = ColumnNames.Totalpacketsweak;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Totalpacketstotal);
			p.SourceColumn = ColumnNames.Totalpacketstotal;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Totalpacketsllc);
			p.SourceColumn = ColumnNames.Totalpacketsllc;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Totalpacketsdupeiv);
			p.SourceColumn = ColumnNames.Totalpacketsdupeiv;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Totalpacketsdata);
			p.SourceColumn = ColumnNames.Totalpacketsdata;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Totalpacketscrypt);
			p.SourceColumn = ColumnNames.Totalpacketscrypt;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Network);
			p.SourceColumn = ColumnNames.Network;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NetType);
			p.SourceColumn = ColumnNames.NetType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ESSID);
			p.SourceColumn = ColumnNames.ESSID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BSSID);
			p.SourceColumn = ColumnNames.BSSID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Info);
			p.SourceColumn = ColumnNames.Info;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Channel);
			p.SourceColumn = ColumnNames.Channel;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Cloaked);
			p.SourceColumn = ColumnNames.Cloaked;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Encryption);
			p.SourceColumn = ColumnNames.Encryption;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Decrypted);
			p.SourceColumn = ColumnNames.Decrypted;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MaxRate);
			p.SourceColumn = ColumnNames.MaxRate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MaxSeenRate);
			p.SourceColumn = ColumnNames.MaxSeenRate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Beacon);
			p.SourceColumn = ColumnNames.Beacon;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LLC);
			p.SourceColumn = ColumnNames.LLC;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Data);
			p.SourceColumn = ColumnNames.Data;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Crypt);
			p.SourceColumn = ColumnNames.Crypt;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Weak);
			p.SourceColumn = ColumnNames.Weak;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Total);
			p.SourceColumn = ColumnNames.Total;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Carrier);
			p.SourceColumn = ColumnNames.Carrier;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Encoding);
			p.SourceColumn = ColumnNames.Encoding;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstTime);
			p.SourceColumn = ColumnNames.FirstTime;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastTime);
			p.SourceColumn = ColumnNames.LastTime;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BestQuality);
			p.SourceColumn = ColumnNames.BestQuality;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BestSignal);
			p.SourceColumn = ColumnNames.BestSignal;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BestNoise);
			p.SourceColumn = ColumnNames.BestNoise;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GPSMinLat);
			p.SourceColumn = ColumnNames.GPSMinLat;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GPSMinLon);
			p.SourceColumn = ColumnNames.GPSMinLon;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GPSMinAlt);
			p.SourceColumn = ColumnNames.GPSMinAlt;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GPSMinSpd);
			p.SourceColumn = ColumnNames.GPSMinSpd;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GPSMaxLat);
			p.SourceColumn = ColumnNames.GPSMaxLat;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GPSMaxLon);
			p.SourceColumn = ColumnNames.GPSMaxLon;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GPSMaxAlt);
			p.SourceColumn = ColumnNames.GPSMaxAlt;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GPSMaxSpd);
			p.SourceColumn = ColumnNames.GPSMaxSpd;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GPSBestLat);
			p.SourceColumn = ColumnNames.GPSBestLat;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GPSBestLon);
			p.SourceColumn = ColumnNames.GPSBestLon;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GPSBestAlt);
			p.SourceColumn = ColumnNames.GPSBestAlt;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Datasize);
			p.SourceColumn = ColumnNames.Datasize;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IPType);
			p.SourceColumn = ColumnNames.IPType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IP);
			p.SourceColumn = ColumnNames.IP;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}		
		
	
	}
}
