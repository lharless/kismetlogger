//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace KismetLogger {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : System.Data.DataSet {
        
        private DataDataTable tableData;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Data"] != null)) {
                    base.Tables.Add(new DataDataTable(ds.Tables["Data"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataDataTable Data {
            get {
                return this.tableData;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Data"] != null)) {
                    base.Tables.Add(new DataDataTable(ds.Tables["Data"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableData = ((DataDataTable)(base.Tables["Data"]));
            if ((initTable == true)) {
                if ((this.tableData != null)) {
                    this.tableData.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableData = new DataDataTable();
            base.Tables.Add(this.tableData);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeData() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void DataRowChangeEventHandler(object sender, DataRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnoui;
            
            private System.Data.DataColumn columntotalpacketsweak;
            
            private System.Data.DataColumn columntotalpacketstotal;
            
            private System.Data.DataColumn columntotalpacketsllc;
            
            private System.Data.DataColumn columntotalpacketsdupeiv;
            
            private System.Data.DataColumn columntotalpacketsdata;
            
            private System.Data.DataColumn columntotalpacketscrypt;
            
            private System.Data.DataColumn columnNetwork;
            
            private System.Data.DataColumn columnNetType;
            
            private System.Data.DataColumn columnESSID;
            
            private System.Data.DataColumn columnBSSID;
            
            private System.Data.DataColumn columnInfo;
            
            private System.Data.DataColumn columnChannel;
            
            private System.Data.DataColumn columnCloaked;
            
            private System.Data.DataColumn columnEncryption;
            
            private System.Data.DataColumn columnDecrypted;
            
            private System.Data.DataColumn columnMaxRate;
            
            private System.Data.DataColumn columnMaxSeenRate;
            
            private System.Data.DataColumn columnBeacon;
            
            private System.Data.DataColumn columnLLC;
            
            private System.Data.DataColumn columnData;
            
            private System.Data.DataColumn columnCrypt;
            
            private System.Data.DataColumn columnWeak;
            
            private System.Data.DataColumn columnTotal;
            
            private System.Data.DataColumn columnCarrier;
            
            private System.Data.DataColumn columnEncoding;
            
            private System.Data.DataColumn columnFirstTime;
            
            private System.Data.DataColumn columnLastTime;
            
            private System.Data.DataColumn columnBestQuality;
            
            private System.Data.DataColumn columnBestSignal;
            
            private System.Data.DataColumn columnBestNoise;
            
            private System.Data.DataColumn columnGPSMinLat;
            
            private System.Data.DataColumn columnGPSMinLon;
            
            private System.Data.DataColumn columnGPSMinAlt;
            
            private System.Data.DataColumn columnGPSMinSpd;
            
            private System.Data.DataColumn columnGPSMaxLat;
            
            private System.Data.DataColumn columnGPSMaxLon;
            
            private System.Data.DataColumn columnGPSMaxAlt;
            
            private System.Data.DataColumn columnGPSMaxSpd;
            
            private System.Data.DataColumn columnGPSBestLat;
            
            private System.Data.DataColumn columnGPSBestLon;
            
            private System.Data.DataColumn columnGPSBestAlt;
            
            private System.Data.DataColumn columnDatasize;
            
            private System.Data.DataColumn columnIPType;
            
            private System.Data.DataColumn columnIP;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataDataTable() {
                this.TableName = "Data";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ouiColumn {
                get {
                    return this.columnoui;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalpacketsweakColumn {
                get {
                    return this.columntotalpacketsweak;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalpacketstotalColumn {
                get {
                    return this.columntotalpacketstotal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalpacketsllcColumn {
                get {
                    return this.columntotalpacketsllc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalpacketsdupeivColumn {
                get {
                    return this.columntotalpacketsdupeiv;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalpacketsdataColumn {
                get {
                    return this.columntotalpacketsdata;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalpacketscryptColumn {
                get {
                    return this.columntotalpacketscrypt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NetworkColumn {
                get {
                    return this.columnNetwork;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NetTypeColumn {
                get {
                    return this.columnNetType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ESSIDColumn {
                get {
                    return this.columnESSID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BSSIDColumn {
                get {
                    return this.columnBSSID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InfoColumn {
                get {
                    return this.columnInfo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ChannelColumn {
                get {
                    return this.columnChannel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CloakedColumn {
                get {
                    return this.columnCloaked;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncryptionColumn {
                get {
                    return this.columnEncryption;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DecryptedColumn {
                get {
                    return this.columnDecrypted;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaxRateColumn {
                get {
                    return this.columnMaxRate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaxSeenRateColumn {
                get {
                    return this.columnMaxSeenRate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BeaconColumn {
                get {
                    return this.columnBeacon;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LLCColumn {
                get {
                    return this.columnLLC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CryptColumn {
                get {
                    return this.columnCrypt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WeakColumn {
                get {
                    return this.columnWeak;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CarrierColumn {
                get {
                    return this.columnCarrier;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodingColumn {
                get {
                    return this.columnEncoding;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FirstTimeColumn {
                get {
                    return this.columnFirstTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LastTimeColumn {
                get {
                    return this.columnLastTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BestQualityColumn {
                get {
                    return this.columnBestQuality;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BestSignalColumn {
                get {
                    return this.columnBestSignal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BestNoiseColumn {
                get {
                    return this.columnBestNoise;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GPSMinLatColumn {
                get {
                    return this.columnGPSMinLat;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GPSMinLonColumn {
                get {
                    return this.columnGPSMinLon;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GPSMinAltColumn {
                get {
                    return this.columnGPSMinAlt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GPSMinSpdColumn {
                get {
                    return this.columnGPSMinSpd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GPSMaxLatColumn {
                get {
                    return this.columnGPSMaxLat;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GPSMaxLonColumn {
                get {
                    return this.columnGPSMaxLon;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GPSMaxAltColumn {
                get {
                    return this.columnGPSMaxAlt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GPSMaxSpdColumn {
                get {
                    return this.columnGPSMaxSpd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GPSBestLatColumn {
                get {
                    return this.columnGPSBestLat;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GPSBestLonColumn {
                get {
                    return this.columnGPSBestLon;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GPSBestAltColumn {
                get {
                    return this.columnGPSBestAlt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DatasizeColumn {
                get {
                    return this.columnDatasize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IPTypeColumn {
                get {
                    return this.columnIPType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IPColumn {
                get {
                    return this.columnIP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRow this[int index] {
                get {
                    return ((DataRow)(this.Rows[index]));
                }
            }
            
            public event DataRowChangeEventHandler DataRowChanging;
            
            public event DataRowChangeEventHandler DataRowChanged;
            
            public event DataRowChangeEventHandler DataRowDeleting;
            
            public event DataRowChangeEventHandler DataRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataRow(DataRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRow AddDataRow(
                        string oui, 
                        decimal totalpacketsweak, 
                        decimal totalpacketstotal, 
                        decimal totalpacketsllc, 
                        decimal totalpacketsdupeiv, 
                        decimal totalpacketsdata, 
                        decimal totalpacketscrypt, 
                        string Network, 
                        string NetType, 
                        string ESSID, 
                        string BSSID, 
                        string Info, 
                        decimal Channel, 
                        string Cloaked, 
                        string Encryption, 
                        string Decrypted, 
                        decimal MaxRate, 
                        decimal MaxSeenRate, 
                        string Beacon, 
                        string LLC, 
                        string Data, 
                        string Crypt, 
                        decimal Weak, 
                        decimal Total, 
                        decimal Carrier, 
                        string Encoding, 
                        string FirstTime, 
                        string LastTime, 
                        string BestQuality, 
                        decimal BestSignal, 
                        decimal BestNoise, 
                        decimal GPSMinLat, 
                        decimal GPSMinLon, 
                        decimal GPSMinAlt, 
                        decimal GPSMinSpd, 
                        decimal GPSMaxLat, 
                        decimal GPSMaxLon, 
                        decimal GPSMaxAlt, 
                        decimal GPSMaxSpd, 
                        decimal GPSBestLat, 
                        decimal GPSBestLon, 
                        decimal GPSBestAlt, 
                        string Datasize, 
                        string IPType, 
                        string IP) {
                DataRow rowDataRow = ((DataRow)(this.NewRow()));
                rowDataRow.ItemArray = new object[] {
                        oui,
                        totalpacketsweak,
                        totalpacketstotal,
                        totalpacketsllc,
                        totalpacketsdupeiv,
                        totalpacketsdata,
                        totalpacketscrypt,
                        Network,
                        NetType,
                        ESSID,
                        BSSID,
                        Info,
                        Channel,
                        Cloaked,
                        Encryption,
                        Decrypted,
                        MaxRate,
                        MaxSeenRate,
                        Beacon,
                        LLC,
                        Data,
                        Crypt,
                        Weak,
                        Total,
                        Carrier,
                        Encoding,
                        FirstTime,
                        LastTime,
                        BestQuality,
                        BestSignal,
                        BestNoise,
                        GPSMinLat,
                        GPSMinLon,
                        GPSMinAlt,
                        GPSMinSpd,
                        GPSMaxLat,
                        GPSMaxLon,
                        GPSMaxAlt,
                        GPSMaxSpd,
                        GPSBestLat,
                        GPSBestLon,
                        GPSBestAlt,
                        Datasize,
                        IPType,
                        IP};
                this.Rows.Add(rowDataRow);
                return rowDataRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRow FindByBSSID(string BSSID) {
                return ((DataRow)(this.Rows.Find(new object[] {
                            BSSID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataDataTable cln = ((DataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnoui = base.Columns["oui"];
                this.columntotalpacketsweak = base.Columns["totalpacketsweak"];
                this.columntotalpacketstotal = base.Columns["totalpacketstotal"];
                this.columntotalpacketsllc = base.Columns["totalpacketsllc"];
                this.columntotalpacketsdupeiv = base.Columns["totalpacketsdupeiv"];
                this.columntotalpacketsdata = base.Columns["totalpacketsdata"];
                this.columntotalpacketscrypt = base.Columns["totalpacketscrypt"];
                this.columnNetwork = base.Columns["Network"];
                this.columnNetType = base.Columns["NetType"];
                this.columnESSID = base.Columns["ESSID"];
                this.columnBSSID = base.Columns["BSSID"];
                this.columnInfo = base.Columns["Info"];
                this.columnChannel = base.Columns["Channel"];
                this.columnCloaked = base.Columns["Cloaked"];
                this.columnEncryption = base.Columns["Encryption"];
                this.columnDecrypted = base.Columns["Decrypted"];
                this.columnMaxRate = base.Columns["MaxRate"];
                this.columnMaxSeenRate = base.Columns["MaxSeenRate"];
                this.columnBeacon = base.Columns["Beacon"];
                this.columnLLC = base.Columns["LLC"];
                this.columnData = base.Columns["Data"];
                this.columnCrypt = base.Columns["Crypt"];
                this.columnWeak = base.Columns["Weak"];
                this.columnTotal = base.Columns["Total"];
                this.columnCarrier = base.Columns["Carrier"];
                this.columnEncoding = base.Columns["Encoding"];
                this.columnFirstTime = base.Columns["FirstTime"];
                this.columnLastTime = base.Columns["LastTime"];
                this.columnBestQuality = base.Columns["BestQuality"];
                this.columnBestSignal = base.Columns["BestSignal"];
                this.columnBestNoise = base.Columns["BestNoise"];
                this.columnGPSMinLat = base.Columns["GPSMinLat"];
                this.columnGPSMinLon = base.Columns["GPSMinLon"];
                this.columnGPSMinAlt = base.Columns["GPSMinAlt"];
                this.columnGPSMinSpd = base.Columns["GPSMinSpd"];
                this.columnGPSMaxLat = base.Columns["GPSMaxLat"];
                this.columnGPSMaxLon = base.Columns["GPSMaxLon"];
                this.columnGPSMaxAlt = base.Columns["GPSMaxAlt"];
                this.columnGPSMaxSpd = base.Columns["GPSMaxSpd"];
                this.columnGPSBestLat = base.Columns["GPSBestLat"];
                this.columnGPSBestLon = base.Columns["GPSBestLon"];
                this.columnGPSBestAlt = base.Columns["GPSBestAlt"];
                this.columnDatasize = base.Columns["Datasize"];
                this.columnIPType = base.Columns["IPType"];
                this.columnIP = base.Columns["IP"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnoui = new System.Data.DataColumn("oui", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnoui);
                this.columntotalpacketsweak = new System.Data.DataColumn("totalpacketsweak", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalpacketsweak);
                this.columntotalpacketstotal = new System.Data.DataColumn("totalpacketstotal", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalpacketstotal);
                this.columntotalpacketsllc = new System.Data.DataColumn("totalpacketsllc", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalpacketsllc);
                this.columntotalpacketsdupeiv = new System.Data.DataColumn("totalpacketsdupeiv", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalpacketsdupeiv);
                this.columntotalpacketsdata = new System.Data.DataColumn("totalpacketsdata", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalpacketsdata);
                this.columntotalpacketscrypt = new System.Data.DataColumn("totalpacketscrypt", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalpacketscrypt);
                this.columnNetwork = new System.Data.DataColumn("Network", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetwork);
                this.columnNetType = new System.Data.DataColumn("NetType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetType);
                this.columnESSID = new System.Data.DataColumn("ESSID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnESSID);
                this.columnBSSID = new System.Data.DataColumn("BSSID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBSSID);
                this.columnInfo = new System.Data.DataColumn("Info", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfo);
                this.columnChannel = new System.Data.DataColumn("Channel", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnChannel);
                this.columnCloaked = new System.Data.DataColumn("Cloaked", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCloaked);
                this.columnEncryption = new System.Data.DataColumn("Encryption", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEncryption);
                this.columnDecrypted = new System.Data.DataColumn("Decrypted", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDecrypted);
                this.columnMaxRate = new System.Data.DataColumn("MaxRate", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxRate);
                this.columnMaxSeenRate = new System.Data.DataColumn("MaxSeenRate", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxSeenRate);
                this.columnBeacon = new System.Data.DataColumn("Beacon", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBeacon);
                this.columnLLC = new System.Data.DataColumn("LLC", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLLC);
                this.columnData = new System.Data.DataColumn("Data", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnData);
                this.columnCrypt = new System.Data.DataColumn("Crypt", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrypt);
                this.columnWeak = new System.Data.DataColumn("Weak", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeak);
                this.columnTotal = new System.Data.DataColumn("Total", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnCarrier = new System.Data.DataColumn("Carrier", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarrier);
                this.columnEncoding = new System.Data.DataColumn("Encoding", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEncoding);
                this.columnFirstTime = new System.Data.DataColumn("FirstTime", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstTime);
                this.columnLastTime = new System.Data.DataColumn("LastTime", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastTime);
                this.columnBestQuality = new System.Data.DataColumn("BestQuality", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBestQuality);
                this.columnBestSignal = new System.Data.DataColumn("BestSignal", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBestSignal);
                this.columnBestNoise = new System.Data.DataColumn("BestNoise", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBestNoise);
                this.columnGPSMinLat = new System.Data.DataColumn("GPSMinLat", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSMinLat);
                this.columnGPSMinLon = new System.Data.DataColumn("GPSMinLon", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSMinLon);
                this.columnGPSMinAlt = new System.Data.DataColumn("GPSMinAlt", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSMinAlt);
                this.columnGPSMinSpd = new System.Data.DataColumn("GPSMinSpd", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSMinSpd);
                this.columnGPSMaxLat = new System.Data.DataColumn("GPSMaxLat", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSMaxLat);
                this.columnGPSMaxLon = new System.Data.DataColumn("GPSMaxLon", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSMaxLon);
                this.columnGPSMaxAlt = new System.Data.DataColumn("GPSMaxAlt", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSMaxAlt);
                this.columnGPSMaxSpd = new System.Data.DataColumn("GPSMaxSpd", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSMaxSpd);
                this.columnGPSBestLat = new System.Data.DataColumn("GPSBestLat", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSBestLat);
                this.columnGPSBestLon = new System.Data.DataColumn("GPSBestLon", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSBestLon);
                this.columnGPSBestAlt = new System.Data.DataColumn("GPSBestAlt", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSBestAlt);
                this.columnDatasize = new System.Data.DataColumn("Datasize", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatasize);
                this.columnIPType = new System.Data.DataColumn("IPType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPType);
                this.columnIP = new System.Data.DataColumn("IP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIP);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnBSSID}, true));
                this.columnoui.MaxLength = 2147483647;
                this.columnNetwork.MaxLength = 2147483647;
                this.columnNetType.MaxLength = 2147483647;
                this.columnESSID.MaxLength = 2147483647;
                this.columnBSSID.AllowDBNull = false;
                this.columnBSSID.Unique = true;
                this.columnBSSID.MaxLength = 2147483647;
                this.columnInfo.MaxLength = 2147483647;
                this.columnCloaked.MaxLength = 2147483647;
                this.columnEncryption.MaxLength = 2147483647;
                this.columnDecrypted.MaxLength = 2147483647;
                this.columnBeacon.MaxLength = 2147483647;
                this.columnLLC.MaxLength = 2147483647;
                this.columnData.MaxLength = 2147483647;
                this.columnCrypt.MaxLength = 2147483647;
                this.columnEncoding.MaxLength = 2147483647;
                this.columnFirstTime.MaxLength = 2147483647;
                this.columnLastTime.MaxLength = 2147483647;
                this.columnBestQuality.MaxLength = 2147483647;
                this.columnDatasize.MaxLength = 2147483647;
                this.columnIPType.MaxLength = 2147483647;
                this.columnIP.MaxLength = 2147483647;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRow NewDataRow() {
                return ((DataRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataRowChanged != null)) {
                    this.DataRowChanged(this, new DataRowChangeEvent(((DataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataRowChanging != null)) {
                    this.DataRowChanging(this, new DataRowChangeEvent(((DataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataRowDeleted != null)) {
                    this.DataRowDeleted(this, new DataRowChangeEvent(((DataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataRowDeleting != null)) {
                    this.DataRowDeleting(this, new DataRowChangeEvent(((DataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataRow(DataRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataRow : System.Data.DataRow {
            
            private DataDataTable tableData;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableData = ((DataDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string oui {
                get {
                    try {
                        return ((string)(this[this.tableData.ouiColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'oui\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.ouiColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalpacketsweak {
                get {
                    try {
                        return ((decimal)(this[this.tableData.totalpacketsweakColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalpacketsweak\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.totalpacketsweakColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalpacketstotal {
                get {
                    try {
                        return ((decimal)(this[this.tableData.totalpacketstotalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalpacketstotal\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.totalpacketstotalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalpacketsllc {
                get {
                    try {
                        return ((decimal)(this[this.tableData.totalpacketsllcColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalpacketsllc\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.totalpacketsllcColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalpacketsdupeiv {
                get {
                    try {
                        return ((decimal)(this[this.tableData.totalpacketsdupeivColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalpacketsdupeiv\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.totalpacketsdupeivColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalpacketsdata {
                get {
                    try {
                        return ((decimal)(this[this.tableData.totalpacketsdataColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalpacketsdata\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.totalpacketsdataColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalpacketscrypt {
                get {
                    try {
                        return ((decimal)(this[this.tableData.totalpacketscryptColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalpacketscrypt\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.totalpacketscryptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Network {
                get {
                    try {
                        return ((string)(this[this.tableData.NetworkColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Network\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.NetworkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NetType {
                get {
                    try {
                        return ((string)(this[this.tableData.NetTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NetType\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.NetTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ESSID {
                get {
                    try {
                        return ((string)(this[this.tableData.ESSIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ESSID\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.ESSIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BSSID {
                get {
                    return ((string)(this[this.tableData.BSSIDColumn]));
                }
                set {
                    this[this.tableData.BSSIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Info {
                get {
                    try {
                        return ((string)(this[this.tableData.InfoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Info\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.InfoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Channel {
                get {
                    try {
                        return ((decimal)(this[this.tableData.ChannelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Channel\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.ChannelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cloaked {
                get {
                    try {
                        return ((string)(this[this.tableData.CloakedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Cloaked\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.CloakedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Encryption {
                get {
                    try {
                        return ((string)(this[this.tableData.EncryptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Encryption\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.EncryptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Decrypted {
                get {
                    try {
                        return ((string)(this[this.tableData.DecryptedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Decrypted\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.DecryptedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaxRate {
                get {
                    try {
                        return ((decimal)(this[this.tableData.MaxRateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MaxRate\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.MaxRateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaxSeenRate {
                get {
                    try {
                        return ((decimal)(this[this.tableData.MaxSeenRateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MaxSeenRate\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.MaxSeenRateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Beacon {
                get {
                    try {
                        return ((string)(this[this.tableData.BeaconColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Beacon\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.BeaconColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LLC {
                get {
                    try {
                        return ((string)(this[this.tableData.LLCColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LLC\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.LLCColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Data {
                get {
                    try {
                        return ((string)(this[this.tableData.DataColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Data\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.DataColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Crypt {
                get {
                    try {
                        return ((string)(this[this.tableData.CryptColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Crypt\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.CryptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Weak {
                get {
                    try {
                        return ((decimal)(this[this.tableData.WeakColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Weak\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.WeakColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total {
                get {
                    try {
                        return ((decimal)(this[this.tableData.TotalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Total\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.TotalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Carrier {
                get {
                    try {
                        return ((decimal)(this[this.tableData.CarrierColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Carrier\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.CarrierColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Encoding {
                get {
                    try {
                        return ((string)(this[this.tableData.EncodingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Encoding\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.EncodingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstTime {
                get {
                    try {
                        return ((string)(this[this.tableData.FirstTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FirstTime\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.FirstTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastTime {
                get {
                    try {
                        return ((string)(this[this.tableData.LastTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LastTime\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.LastTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BestQuality {
                get {
                    try {
                        return ((string)(this[this.tableData.BestQualityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BestQuality\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.BestQualityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BestSignal {
                get {
                    try {
                        return ((decimal)(this[this.tableData.BestSignalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BestSignal\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.BestSignalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BestNoise {
                get {
                    try {
                        return ((decimal)(this[this.tableData.BestNoiseColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BestNoise\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.BestNoiseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSMinLat {
                get {
                    try {
                        return ((decimal)(this[this.tableData.GPSMinLatColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GPSMinLat\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.GPSMinLatColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSMinLon {
                get {
                    try {
                        return ((decimal)(this[this.tableData.GPSMinLonColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GPSMinLon\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.GPSMinLonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSMinAlt {
                get {
                    try {
                        return ((decimal)(this[this.tableData.GPSMinAltColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GPSMinAlt\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.GPSMinAltColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSMinSpd {
                get {
                    try {
                        return ((decimal)(this[this.tableData.GPSMinSpdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GPSMinSpd\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.GPSMinSpdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSMaxLat {
                get {
                    try {
                        return ((decimal)(this[this.tableData.GPSMaxLatColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GPSMaxLat\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.GPSMaxLatColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSMaxLon {
                get {
                    try {
                        return ((decimal)(this[this.tableData.GPSMaxLonColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GPSMaxLon\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.GPSMaxLonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSMaxAlt {
                get {
                    try {
                        return ((decimal)(this[this.tableData.GPSMaxAltColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GPSMaxAlt\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.GPSMaxAltColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSMaxSpd {
                get {
                    try {
                        return ((decimal)(this[this.tableData.GPSMaxSpdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GPSMaxSpd\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.GPSMaxSpdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSBestLat {
                get {
                    try {
                        return ((decimal)(this[this.tableData.GPSBestLatColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GPSBestLat\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.GPSBestLatColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSBestLon {
                get {
                    try {
                        return ((decimal)(this[this.tableData.GPSBestLonColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GPSBestLon\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.GPSBestLonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSBestAlt {
                get {
                    try {
                        return ((decimal)(this[this.tableData.GPSBestAltColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GPSBestAlt\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.GPSBestAltColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Datasize {
                get {
                    try {
                        return ((string)(this[this.tableData.DatasizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Datasize\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.DatasizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IPType {
                get {
                    try {
                        return ((string)(this[this.tableData.IPTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IPType\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.IPTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IP {
                get {
                    try {
                        return ((string)(this[this.tableData.IPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IP\' in table \'Data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableData.IPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsouiNull() {
                return this.IsNull(this.tableData.ouiColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetouiNull() {
                this[this.tableData.ouiColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalpacketsweakNull() {
                return this.IsNull(this.tableData.totalpacketsweakColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalpacketsweakNull() {
                this[this.tableData.totalpacketsweakColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalpacketstotalNull() {
                return this.IsNull(this.tableData.totalpacketstotalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalpacketstotalNull() {
                this[this.tableData.totalpacketstotalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalpacketsllcNull() {
                return this.IsNull(this.tableData.totalpacketsllcColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalpacketsllcNull() {
                this[this.tableData.totalpacketsllcColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalpacketsdupeivNull() {
                return this.IsNull(this.tableData.totalpacketsdupeivColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalpacketsdupeivNull() {
                this[this.tableData.totalpacketsdupeivColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalpacketsdataNull() {
                return this.IsNull(this.tableData.totalpacketsdataColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalpacketsdataNull() {
                this[this.tableData.totalpacketsdataColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalpacketscryptNull() {
                return this.IsNull(this.tableData.totalpacketscryptColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalpacketscryptNull() {
                this[this.tableData.totalpacketscryptColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetworkNull() {
                return this.IsNull(this.tableData.NetworkColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetworkNull() {
                this[this.tableData.NetworkColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetTypeNull() {
                return this.IsNull(this.tableData.NetTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetTypeNull() {
                this[this.tableData.NetTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsESSIDNull() {
                return this.IsNull(this.tableData.ESSIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetESSIDNull() {
                this[this.tableData.ESSIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfoNull() {
                return this.IsNull(this.tableData.InfoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfoNull() {
                this[this.tableData.InfoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChannelNull() {
                return this.IsNull(this.tableData.ChannelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChannelNull() {
                this[this.tableData.ChannelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCloakedNull() {
                return this.IsNull(this.tableData.CloakedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCloakedNull() {
                this[this.tableData.CloakedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEncryptionNull() {
                return this.IsNull(this.tableData.EncryptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEncryptionNull() {
                this[this.tableData.EncryptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDecryptedNull() {
                return this.IsNull(this.tableData.DecryptedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDecryptedNull() {
                this[this.tableData.DecryptedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxRateNull() {
                return this.IsNull(this.tableData.MaxRateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxRateNull() {
                this[this.tableData.MaxRateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxSeenRateNull() {
                return this.IsNull(this.tableData.MaxSeenRateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxSeenRateNull() {
                this[this.tableData.MaxSeenRateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBeaconNull() {
                return this.IsNull(this.tableData.BeaconColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBeaconNull() {
                this[this.tableData.BeaconColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLLCNull() {
                return this.IsNull(this.tableData.LLCColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLLCNull() {
                this[this.tableData.LLCColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataNull() {
                return this.IsNull(this.tableData.DataColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataNull() {
                this[this.tableData.DataColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCryptNull() {
                return this.IsNull(this.tableData.CryptColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCryptNull() {
                this[this.tableData.CryptColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeakNull() {
                return this.IsNull(this.tableData.WeakColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeakNull() {
                this[this.tableData.WeakColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.tableData.TotalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.tableData.TotalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCarrierNull() {
                return this.IsNull(this.tableData.CarrierColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCarrierNull() {
                this[this.tableData.CarrierColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEncodingNull() {
                return this.IsNull(this.tableData.EncodingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEncodingNull() {
                this[this.tableData.EncodingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstTimeNull() {
                return this.IsNull(this.tableData.FirstTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstTimeNull() {
                this[this.tableData.FirstTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastTimeNull() {
                return this.IsNull(this.tableData.LastTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastTimeNull() {
                this[this.tableData.LastTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBestQualityNull() {
                return this.IsNull(this.tableData.BestQualityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBestQualityNull() {
                this[this.tableData.BestQualityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBestSignalNull() {
                return this.IsNull(this.tableData.BestSignalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBestSignalNull() {
                this[this.tableData.BestSignalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBestNoiseNull() {
                return this.IsNull(this.tableData.BestNoiseColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBestNoiseNull() {
                this[this.tableData.BestNoiseColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSMinLatNull() {
                return this.IsNull(this.tableData.GPSMinLatColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSMinLatNull() {
                this[this.tableData.GPSMinLatColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSMinLonNull() {
                return this.IsNull(this.tableData.GPSMinLonColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSMinLonNull() {
                this[this.tableData.GPSMinLonColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSMinAltNull() {
                return this.IsNull(this.tableData.GPSMinAltColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSMinAltNull() {
                this[this.tableData.GPSMinAltColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSMinSpdNull() {
                return this.IsNull(this.tableData.GPSMinSpdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSMinSpdNull() {
                this[this.tableData.GPSMinSpdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSMaxLatNull() {
                return this.IsNull(this.tableData.GPSMaxLatColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSMaxLatNull() {
                this[this.tableData.GPSMaxLatColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSMaxLonNull() {
                return this.IsNull(this.tableData.GPSMaxLonColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSMaxLonNull() {
                this[this.tableData.GPSMaxLonColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSMaxAltNull() {
                return this.IsNull(this.tableData.GPSMaxAltColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSMaxAltNull() {
                this[this.tableData.GPSMaxAltColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSMaxSpdNull() {
                return this.IsNull(this.tableData.GPSMaxSpdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSMaxSpdNull() {
                this[this.tableData.GPSMaxSpdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSBestLatNull() {
                return this.IsNull(this.tableData.GPSBestLatColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSBestLatNull() {
                this[this.tableData.GPSBestLatColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSBestLonNull() {
                return this.IsNull(this.tableData.GPSBestLonColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSBestLonNull() {
                this[this.tableData.GPSBestLonColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSBestAltNull() {
                return this.IsNull(this.tableData.GPSBestAltColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSBestAltNull() {
                this[this.tableData.GPSBestAltColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDatasizeNull() {
                return this.IsNull(this.tableData.DatasizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDatasizeNull() {
                this[this.tableData.DatasizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIPTypeNull() {
                return this.IsNull(this.tableData.IPTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIPTypeNull() {
                this[this.tableData.IPTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIPNull() {
                return this.IsNull(this.tableData.IPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIPNull() {
                this[this.tableData.IPColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataRowChangeEvent : System.EventArgs {
            
            private DataRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRowChangeEvent(DataRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace KismetLogger.DataSet1TableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DataTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private System.Data.SQLite.SQLiteConnection _connection;
        
        private System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SQLite.SQLiteDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Data";
            tableMapping.ColumnMappings.Add("oui", "oui");
            tableMapping.ColumnMappings.Add("totalpacketsweak", "totalpacketsweak");
            tableMapping.ColumnMappings.Add("totalpacketstotal", "totalpacketstotal");
            tableMapping.ColumnMappings.Add("totalpacketsllc", "totalpacketsllc");
            tableMapping.ColumnMappings.Add("totalpacketsdupeiv", "totalpacketsdupeiv");
            tableMapping.ColumnMappings.Add("totalpacketsdata", "totalpacketsdata");
            tableMapping.ColumnMappings.Add("totalpacketscrypt", "totalpacketscrypt");
            tableMapping.ColumnMappings.Add("Network", "Network");
            tableMapping.ColumnMappings.Add("NetType", "NetType");
            tableMapping.ColumnMappings.Add("ESSID", "ESSID");
            tableMapping.ColumnMappings.Add("BSSID", "BSSID");
            tableMapping.ColumnMappings.Add("Info", "Info");
            tableMapping.ColumnMappings.Add("Channel", "Channel");
            tableMapping.ColumnMappings.Add("Cloaked", "Cloaked");
            tableMapping.ColumnMappings.Add("Encryption", "Encryption");
            tableMapping.ColumnMappings.Add("Decrypted", "Decrypted");
            tableMapping.ColumnMappings.Add("MaxRate", "MaxRate");
            tableMapping.ColumnMappings.Add("MaxSeenRate", "MaxSeenRate");
            tableMapping.ColumnMappings.Add("Beacon", "Beacon");
            tableMapping.ColumnMappings.Add("LLC", "LLC");
            tableMapping.ColumnMappings.Add("Data", "Data");
            tableMapping.ColumnMappings.Add("Crypt", "Crypt");
            tableMapping.ColumnMappings.Add("Weak", "Weak");
            tableMapping.ColumnMappings.Add("Total", "Total");
            tableMapping.ColumnMappings.Add("Carrier", "Carrier");
            tableMapping.ColumnMappings.Add("Encoding", "Encoding");
            tableMapping.ColumnMappings.Add("FirstTime", "FirstTime");
            tableMapping.ColumnMappings.Add("LastTime", "LastTime");
            tableMapping.ColumnMappings.Add("BestQuality", "BestQuality");
            tableMapping.ColumnMappings.Add("BestSignal", "BestSignal");
            tableMapping.ColumnMappings.Add("BestNoise", "BestNoise");
            tableMapping.ColumnMappings.Add("GPSMinLat", "GPSMinLat");
            tableMapping.ColumnMappings.Add("GPSMinLon", "GPSMinLon");
            tableMapping.ColumnMappings.Add("GPSMinAlt", "GPSMinAlt");
            tableMapping.ColumnMappings.Add("GPSMinSpd", "GPSMinSpd");
            tableMapping.ColumnMappings.Add("GPSMaxLat", "GPSMaxLat");
            tableMapping.ColumnMappings.Add("GPSMaxLon", "GPSMaxLon");
            tableMapping.ColumnMappings.Add("GPSMaxAlt", "GPSMaxAlt");
            tableMapping.ColumnMappings.Add("GPSMaxSpd", "GPSMaxSpd");
            tableMapping.ColumnMappings.Add("GPSBestLat", "GPSBestLat");
            tableMapping.ColumnMappings.Add("GPSBestLon", "GPSBestLon");
            tableMapping.ColumnMappings.Add("GPSBestAlt", "GPSBestAlt");
            tableMapping.ColumnMappings.Add("Datasize", "Datasize");
            tableMapping.ColumnMappings.Add("IPType", "IPType");
            tableMapping.ColumnMappings.Add("IP", "IP");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Data] WHERE (((@IsNull_oui = 1 AND [oui] IS NULL) OR ([oui] = @Origi" +
                "nal_oui)) AND ((@IsNull_totalpacketsweak = 1 AND [totalpacketsweak] IS NULL) OR " +
                "([totalpacketsweak] = @Original_totalpacketsweak)) AND ((@IsNull_totalpacketstot" +
                "al = 1 AND [totalpacketstotal] IS NULL) OR ([totalpacketstotal] = @Original_tota" +
                "lpacketstotal)) AND ((@IsNull_totalpacketsllc = 1 AND [totalpacketsllc] IS NULL)" +
                " OR ([totalpacketsllc] = @Original_totalpacketsllc)) AND ((@IsNull_totalpacketsd" +
                "upeiv = 1 AND [totalpacketsdupeiv] IS NULL) OR ([totalpacketsdupeiv] = @Original" +
                "_totalpacketsdupeiv)) AND ((@IsNull_totalpacketsdata = 1 AND [totalpacketsdata] " +
                "IS NULL) OR ([totalpacketsdata] = @Original_totalpacketsdata)) AND ((@IsNull_tot" +
                "alpacketscrypt = 1 AND [totalpacketscrypt] IS NULL) OR ([totalpacketscrypt] = @O" +
                "riginal_totalpacketscrypt)) AND ((@IsNull_Network = 1 AND [Network] IS NULL) OR " +
                "([Network] = @Original_Network)) AND ((@IsNull_NetType = 1 AND [NetType] IS NULL" +
                ") OR ([NetType] = @Original_NetType)) AND ((@IsNull_ESSID = 1 AND [ESSID] IS NUL" +
                "L) OR ([ESSID] = @Original_ESSID)) AND ([BSSID] = @Original_BSSID) AND ((@IsNull" +
                "_Info = 1 AND [Info] IS NULL) OR ([Info] = @Original_Info)) AND ((@IsNull_Channe" +
                "l = 1 AND [Channel] IS NULL) OR ([Channel] = @Original_Channel)) AND ((@IsNull_C" +
                "loaked = 1 AND [Cloaked] IS NULL) OR ([Cloaked] = @Original_Cloaked)) AND ((@IsN" +
                "ull_Encryption = 1 AND [Encryption] IS NULL) OR ([Encryption] = @Original_Encryp" +
                "tion)) AND ((@IsNull_Decrypted = 1 AND [Decrypted] IS NULL) OR ([Decrypted] = @O" +
                "riginal_Decrypted)) AND ((@IsNull_MaxRate = 1 AND [MaxRate] IS NULL) OR ([MaxRat" +
                "e] = @Original_MaxRate)) AND ((@IsNull_MaxSeenRate = 1 AND [MaxSeenRate] IS NULL" +
                ") OR ([MaxSeenRate] = @Original_MaxSeenRate)) AND ((@IsNull_Beacon = 1 AND [Beac" +
                "on] IS NULL) OR ([Beacon] = @Original_Beacon)) AND ((@IsNull_LLC = 1 AND [LLC] I" +
                "S NULL) OR ([LLC] = @Original_LLC)) AND ((@IsNull_Data = 1 AND [Data] IS NULL) O" +
                "R ([Data] = @Original_Data)) AND ((@IsNull_Crypt = 1 AND [Crypt] IS NULL) OR ([C" +
                "rypt] = @Original_Crypt)) AND ((@IsNull_Weak = 1 AND [Weak] IS NULL) OR ([Weak] " +
                "= @Original_Weak)) AND ((@IsNull_Total = 1 AND [Total] IS NULL) OR ([Total] = @O" +
                "riginal_Total)) AND ((@IsNull_Carrier = 1 AND [Carrier] IS NULL) OR ([Carrier] =" +
                " @Original_Carrier)) AND ((@IsNull_Encoding = 1 AND [Encoding] IS NULL) OR ([Enc" +
                "oding] = @Original_Encoding)) AND ((@IsNull_FirstTime = 1 AND [FirstTime] IS NUL" +
                "L) OR ([FirstTime] = @Original_FirstTime)) AND ((@IsNull_LastTime = 1 AND [LastT" +
                "ime] IS NULL) OR ([LastTime] = @Original_LastTime)) AND ((@IsNull_BestQuality = " +
                "1 AND [BestQuality] IS NULL) OR ([BestQuality] = @Original_BestQuality)) AND ((@" +
                "IsNull_BestSignal = 1 AND [BestSignal] IS NULL) OR ([BestSignal] = @Original_Bes" +
                "tSignal)) AND ((@IsNull_BestNoise = 1 AND [BestNoise] IS NULL) OR ([BestNoise] =" +
                " @Original_BestNoise)) AND ((@IsNull_GPSMinLat = 1 AND [GPSMinLat] IS NULL) OR (" +
                "[GPSMinLat] = @Original_GPSMinLat)) AND ((@IsNull_GPSMinLon = 1 AND [GPSMinLon] " +
                "IS NULL) OR ([GPSMinLon] = @Original_GPSMinLon)) AND ((@IsNull_GPSMinAlt = 1 AND" +
                " [GPSMinAlt] IS NULL) OR ([GPSMinAlt] = @Original_GPSMinAlt)) AND ((@IsNull_GPSM" +
                "inSpd = 1 AND [GPSMinSpd] IS NULL) OR ([GPSMinSpd] = @Original_GPSMinSpd)) AND (" +
                "(@IsNull_GPSMaxLat = 1 AND [GPSMaxLat] IS NULL) OR ([GPSMaxLat] = @Original_GPSM" +
                "axLat)) AND ((@IsNull_GPSMaxLon = 1 AND [GPSMaxLon] IS NULL) OR ([GPSMaxLon] = @" +
                "Original_GPSMaxLon)) AND ((@IsNull_GPSMaxAlt = 1 AND [GPSMaxAlt] IS NULL) OR ([G" +
                "PSMaxAlt] = @Original_GPSMaxAlt)) AND ((@IsNull_GPSMaxSpd = 1 AND [GPSMaxSpd] IS" +
                " NULL) OR ([GPSMaxSpd] = @Original_GPSMaxSpd)) AND ((@IsNull_GPSBestLat = 1 AND " +
                "[GPSBestLat] IS NULL) OR ([GPSBestLat] = @Original_GPSBestLat)) AND ((@IsNull_GP" +
                "SBestLon = 1 AND [GPSBestLon] IS NULL) OR ([GPSBestLon] = @Original_GPSBestLon))" +
                " AND ((@IsNull_GPSBestAlt = 1 AND [GPSBestAlt] IS NULL) OR ([GPSBestAlt] = @Orig" +
                "inal_GPSBestAlt)) AND ((@IsNull_Datasize = 1 AND [Datasize] IS NULL) OR ([Datasi" +
                "ze] = @Original_Datasize)) AND ((@IsNull_IPType = 1 AND [IPType] IS NULL) OR ([I" +
                "PType] = @Original_IPType)) AND ((@IsNull_IP = 1 AND [IP] IS NULL) OR ([IP] = @O" +
                "riginal_IP)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            System.Data.SQLite.SQLiteParameter param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_oui";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "oui";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_oui";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "oui";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketsweak";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketsweak";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketsweak";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsweak";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketstotal";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketstotal";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketstotal";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketstotal";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketsllc";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketsllc";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketsllc";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsllc";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketsdupeiv";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketsdupeiv";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketsdupeiv";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsdupeiv";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketsdata";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketsdata";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketsdata";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsdata";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketscrypt";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketscrypt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketscrypt";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketscrypt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Network";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Network";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Network";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Network";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NetType";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "NetType";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NetType";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "NetType";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ESSID";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "ESSID";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ESSID";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "ESSID";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BSSID";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "BSSID";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Info";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Info";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Info";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Info";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Channel";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Channel";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Channel";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "Channel";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Cloaked";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Cloaked";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Cloaked";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Cloaked";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Encryption";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Encryption";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Encryption";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Encryption";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Decrypted";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Decrypted";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Decrypted";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Decrypted";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MaxRate";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "MaxRate";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MaxRate";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "MaxRate";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MaxSeenRate";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "MaxSeenRate";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MaxSeenRate";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "MaxSeenRate";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Beacon";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Beacon";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Beacon";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Beacon";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_LLC";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "LLC";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LLC";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "LLC";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Data";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Data";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Data";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Data";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Crypt";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Crypt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Crypt";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Crypt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Weak";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Weak";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Weak";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "Weak";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Total";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Total";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Total";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "Total";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Carrier";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Carrier";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Carrier";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "Carrier";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Encoding";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Encoding";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Encoding";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Encoding";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FirstTime";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "FirstTime";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FirstTime";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "FirstTime";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_LastTime";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "LastTime";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LastTime";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "LastTime";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BestQuality";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "BestQuality";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BestQuality";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "BestQuality";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BestSignal";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "BestSignal";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BestSignal";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "BestSignal";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BestNoise";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "BestNoise";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BestNoise";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "BestNoise";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMinLat";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSMinLat";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMinLat";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinLat";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMinLon";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSMinLon";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMinLon";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinLon";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMinAlt";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSMinAlt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMinAlt";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinAlt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMinSpd";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSMinSpd";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMinSpd";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinSpd";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMaxLat";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSMaxLat";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMaxLat";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxLat";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMaxLon";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSMaxLon";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMaxLon";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxLon";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMaxAlt";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSMaxAlt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMaxAlt";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxAlt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMaxSpd";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSMaxSpd";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMaxSpd";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxSpd";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSBestLat";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSBestLat";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSBestLat";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestLat";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSBestLon";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSBestLon";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSBestLon";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestLon";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSBestAlt";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSBestAlt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSBestAlt";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestAlt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Datasize";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Datasize";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Datasize";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Datasize";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IPType";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "IPType";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IPType";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "IPType";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IP";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "IP";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IP";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "IP";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Data] ([oui], [totalpacketsweak], [totalpacketstotal], [totalpacketsllc], [totalpacketsdupeiv], [totalpacketsdata], [totalpacketscrypt], [Network], [NetType], [ESSID], [BSSID], [Info], [Channel], [Cloaked], [Encryption], [Decrypted], [MaxRate], [MaxSeenRate], [Beacon], [LLC], [Data], [Crypt], [Weak], [Total], [Carrier], [Encoding], [FirstTime], [LastTime], [BestQuality], [BestSignal], [BestNoise], [GPSMinLat], [GPSMinLon], [GPSMinAlt], [GPSMinSpd], [GPSMaxLat], [GPSMaxLon], [GPSMaxAlt], [GPSMaxSpd], [GPSBestLat], [GPSBestLon], [GPSBestAlt], [Datasize], [IPType], [IP]) VALUES (@oui, @totalpacketsweak, @totalpacketstotal, @totalpacketsllc, @totalpacketsdupeiv, @totalpacketsdata, @totalpacketscrypt, @Network, @NetType, @ESSID, @BSSID, @Info, @Channel, @Cloaked, @Encryption, @Decrypted, @MaxRate, @MaxSeenRate, @Beacon, @LLC, @Data, @Crypt, @Weak, @Total, @Carrier, @Encoding, @FirstTime, @LastTime, @BestQuality, @BestSignal, @BestNoise, @GPSMinLat, @GPSMinLon, @GPSMinAlt, @GPSMinSpd, @GPSMaxLat, @GPSMaxLon, @GPSMaxAlt, @GPSMaxSpd, @GPSBestLat, @GPSBestLon, @GPSBestAlt, @Datasize, @IPType, @IP)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@oui";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "oui";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketsweak";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsweak";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketstotal";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketstotal";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketsllc";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsllc";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketsdupeiv";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsdupeiv";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketsdata";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsdata";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketscrypt";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketscrypt";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Network";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Network";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NetType";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "NetType";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ESSID";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "ESSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BSSID";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "BSSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Info";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Info";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Channel";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "Channel";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Cloaked";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Cloaked";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Encryption";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Encryption";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Decrypted";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Decrypted";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MaxRate";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "MaxRate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MaxSeenRate";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "MaxSeenRate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Beacon";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Beacon";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LLC";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "LLC";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Data";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Data";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Crypt";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Crypt";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Weak";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "Weak";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Total";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "Total";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Carrier";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "Carrier";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Encoding";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Encoding";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FirstTime";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "FirstTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LastTime";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "LastTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BestQuality";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "BestQuality";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BestSignal";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "BestSignal";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BestNoise";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "BestNoise";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMinLat";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinLat";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMinLon";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinLon";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMinAlt";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinAlt";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMinSpd";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinSpd";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMaxLat";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxLat";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMaxLon";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxLon";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMaxAlt";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxAlt";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMaxSpd";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxSpd";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSBestLat";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestLat";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSBestLon";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestLon";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSBestAlt";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestAlt";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Datasize";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Datasize";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IPType";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "IPType";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IP";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "IP";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Data] SET [oui] = @oui, [totalpacketsweak] = @totalpacketsweak, [totalpac" +
                "ketstotal] = @totalpacketstotal, [totalpacketsllc] = @totalpacketsllc, [totalpac" +
                "ketsdupeiv] = @totalpacketsdupeiv, [totalpacketsdata] = @totalpacketsdata, [tota" +
                "lpacketscrypt] = @totalpacketscrypt, [Network] = @Network, [NetType] = @NetType," +
                " [ESSID] = @ESSID, [BSSID] = @BSSID, [Info] = @Info, [Channel] = @Channel, [Cloa" +
                "ked] = @Cloaked, [Encryption] = @Encryption, [Decrypted] = @Decrypted, [MaxRate]" +
                " = @MaxRate, [MaxSeenRate] = @MaxSeenRate, [Beacon] = @Beacon, [LLC] = @LLC, [Da" +
                "ta] = @Data, [Crypt] = @Crypt, [Weak] = @Weak, [Total] = @Total, [Carrier] = @Ca" +
                "rrier, [Encoding] = @Encoding, [FirstTime] = @FirstTime, [LastTime] = @LastTime," +
                " [BestQuality] = @BestQuality, [BestSignal] = @BestSignal, [BestNoise] = @BestNo" +
                "ise, [GPSMinLat] = @GPSMinLat, [GPSMinLon] = @GPSMinLon, [GPSMinAlt] = @GPSMinAl" +
                "t, [GPSMinSpd] = @GPSMinSpd, [GPSMaxLat] = @GPSMaxLat, [GPSMaxLon] = @GPSMaxLon," +
                " [GPSMaxAlt] = @GPSMaxAlt, [GPSMaxSpd] = @GPSMaxSpd, [GPSBestLat] = @GPSBestLat," +
                " [GPSBestLon] = @GPSBestLon, [GPSBestAlt] = @GPSBestAlt, [Datasize] = @Datasize," +
                " [IPType] = @IPType, [IP] = @IP WHERE (((@IsNull_oui = 1 AND [oui] IS NULL) OR (" +
                "[oui] = @Original_oui)) AND ((@IsNull_totalpacketsweak = 1 AND [totalpacketsweak" +
                "] IS NULL) OR ([totalpacketsweak] = @Original_totalpacketsweak)) AND ((@IsNull_t" +
                "otalpacketstotal = 1 AND [totalpacketstotal] IS NULL) OR ([totalpacketstotal] = " +
                "@Original_totalpacketstotal)) AND ((@IsNull_totalpacketsllc = 1 AND [totalpacket" +
                "sllc] IS NULL) OR ([totalpacketsllc] = @Original_totalpacketsllc)) AND ((@IsNull" +
                "_totalpacketsdupeiv = 1 AND [totalpacketsdupeiv] IS NULL) OR ([totalpacketsdupei" +
                "v] = @Original_totalpacketsdupeiv)) AND ((@IsNull_totalpacketsdata = 1 AND [tota" +
                "lpacketsdata] IS NULL) OR ([totalpacketsdata] = @Original_totalpacketsdata)) AND" +
                " ((@IsNull_totalpacketscrypt = 1 AND [totalpacketscrypt] IS NULL) OR ([totalpack" +
                "etscrypt] = @Original_totalpacketscrypt)) AND ((@IsNull_Network = 1 AND [Network" +
                "] IS NULL) OR ([Network] = @Original_Network)) AND ((@IsNull_NetType = 1 AND [Ne" +
                "tType] IS NULL) OR ([NetType] = @Original_NetType)) AND ((@IsNull_ESSID = 1 AND " +
                "[ESSID] IS NULL) OR ([ESSID] = @Original_ESSID)) AND ([BSSID] = @Original_BSSID)" +
                " AND ((@IsNull_Info = 1 AND [Info] IS NULL) OR ([Info] = @Original_Info)) AND ((" +
                "@IsNull_Channel = 1 AND [Channel] IS NULL) OR ([Channel] = @Original_Channel)) A" +
                "ND ((@IsNull_Cloaked = 1 AND [Cloaked] IS NULL) OR ([Cloaked] = @Original_Cloake" +
                "d)) AND ((@IsNull_Encryption = 1 AND [Encryption] IS NULL) OR ([Encryption] = @O" +
                "riginal_Encryption)) AND ((@IsNull_Decrypted = 1 AND [Decrypted] IS NULL) OR ([D" +
                "ecrypted] = @Original_Decrypted)) AND ((@IsNull_MaxRate = 1 AND [MaxRate] IS NUL" +
                "L) OR ([MaxRate] = @Original_MaxRate)) AND ((@IsNull_MaxSeenRate = 1 AND [MaxSee" +
                "nRate] IS NULL) OR ([MaxSeenRate] = @Original_MaxSeenRate)) AND ((@IsNull_Beacon" +
                " = 1 AND [Beacon] IS NULL) OR ([Beacon] = @Original_Beacon)) AND ((@IsNull_LLC =" +
                " 1 AND [LLC] IS NULL) OR ([LLC] = @Original_LLC)) AND ((@IsNull_Data = 1 AND [Da" +
                "ta] IS NULL) OR ([Data] = @Original_Data)) AND ((@IsNull_Crypt = 1 AND [Crypt] I" +
                "S NULL) OR ([Crypt] = @Original_Crypt)) AND ((@IsNull_Weak = 1 AND [Weak] IS NUL" +
                "L) OR ([Weak] = @Original_Weak)) AND ((@IsNull_Total = 1 AND [Total] IS NULL) OR" +
                " ([Total] = @Original_Total)) AND ((@IsNull_Carrier = 1 AND [Carrier] IS NULL) O" +
                "R ([Carrier] = @Original_Carrier)) AND ((@IsNull_Encoding = 1 AND [Encoding] IS " +
                "NULL) OR ([Encoding] = @Original_Encoding)) AND ((@IsNull_FirstTime = 1 AND [Fir" +
                "stTime] IS NULL) OR ([FirstTime] = @Original_FirstTime)) AND ((@IsNull_LastTime " +
                "= 1 AND [LastTime] IS NULL) OR ([LastTime] = @Original_LastTime)) AND ((@IsNull_" +
                "BestQuality = 1 AND [BestQuality] IS NULL) OR ([BestQuality] = @Original_BestQua" +
                "lity)) AND ((@IsNull_BestSignal = 1 AND [BestSignal] IS NULL) OR ([BestSignal] =" +
                " @Original_BestSignal)) AND ((@IsNull_BestNoise = 1 AND [BestNoise] IS NULL) OR " +
                "([BestNoise] = @Original_BestNoise)) AND ((@IsNull_GPSMinLat = 1 AND [GPSMinLat]" +
                " IS NULL) OR ([GPSMinLat] = @Original_GPSMinLat)) AND ((@IsNull_GPSMinLon = 1 AN" +
                "D [GPSMinLon] IS NULL) OR ([GPSMinLon] = @Original_GPSMinLon)) AND ((@IsNull_GPS" +
                "MinAlt = 1 AND [GPSMinAlt] IS NULL) OR ([GPSMinAlt] = @Original_GPSMinAlt)) AND " +
                "((@IsNull_GPSMinSpd = 1 AND [GPSMinSpd] IS NULL) OR ([GPSMinSpd] = @Original_GPS" +
                "MinSpd)) AND ((@IsNull_GPSMaxLat = 1 AND [GPSMaxLat] IS NULL) OR ([GPSMaxLat] = " +
                "@Original_GPSMaxLat)) AND ((@IsNull_GPSMaxLon = 1 AND [GPSMaxLon] IS NULL) OR ([" +
                "GPSMaxLon] = @Original_GPSMaxLon)) AND ((@IsNull_GPSMaxAlt = 1 AND [GPSMaxAlt] I" +
                "S NULL) OR ([GPSMaxAlt] = @Original_GPSMaxAlt)) AND ((@IsNull_GPSMaxSpd = 1 AND " +
                "[GPSMaxSpd] IS NULL) OR ([GPSMaxSpd] = @Original_GPSMaxSpd)) AND ((@IsNull_GPSBe" +
                "stLat = 1 AND [GPSBestLat] IS NULL) OR ([GPSBestLat] = @Original_GPSBestLat)) AN" +
                "D ((@IsNull_GPSBestLon = 1 AND [GPSBestLon] IS NULL) OR ([GPSBestLon] = @Origina" +
                "l_GPSBestLon)) AND ((@IsNull_GPSBestAlt = 1 AND [GPSBestAlt] IS NULL) OR ([GPSBe" +
                "stAlt] = @Original_GPSBestAlt)) AND ((@IsNull_Datasize = 1 AND [Datasize] IS NUL" +
                "L) OR ([Datasize] = @Original_Datasize)) AND ((@IsNull_IPType = 1 AND [IPType] I" +
                "S NULL) OR ([IPType] = @Original_IPType)) AND ((@IsNull_IP = 1 AND [IP] IS NULL)" +
                " OR ([IP] = @Original_IP)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@oui";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "oui";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketsweak";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsweak";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketstotal";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketstotal";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketsllc";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsllc";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketsdupeiv";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsdupeiv";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketsdata";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsdata";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketscrypt";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketscrypt";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Network";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Network";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NetType";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "NetType";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ESSID";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "ESSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BSSID";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "BSSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Info";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Info";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Channel";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "Channel";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Cloaked";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Cloaked";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Encryption";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Encryption";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Decrypted";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Decrypted";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MaxRate";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "MaxRate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MaxSeenRate";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "MaxSeenRate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Beacon";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Beacon";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LLC";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "LLC";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Data";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Data";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Crypt";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Crypt";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Weak";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "Weak";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Total";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "Total";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Carrier";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "Carrier";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Encoding";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Encoding";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FirstTime";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "FirstTime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LastTime";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "LastTime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BestQuality";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "BestQuality";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BestSignal";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "BestSignal";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BestNoise";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "BestNoise";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMinLat";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinLat";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMinLon";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinLon";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMinAlt";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinAlt";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMinSpd";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinSpd";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMaxLat";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxLat";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMaxLon";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxLon";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMaxAlt";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxAlt";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMaxSpd";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxSpd";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSBestLat";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestLat";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSBestLon";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestLon";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSBestAlt";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestAlt";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Datasize";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Datasize";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IPType";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "IPType";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IP";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "IP";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_oui";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "oui";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_oui";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "oui";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketsweak";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketsweak";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketsweak";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsweak";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketstotal";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketstotal";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketstotal";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketstotal";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketsllc";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketsllc";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketsllc";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsllc";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketsdupeiv";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketsdupeiv";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketsdupeiv";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsdupeiv";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketsdata";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketsdata";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketsdata";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsdata";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketscrypt";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketscrypt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketscrypt";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketscrypt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Network";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Network";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Network";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Network";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NetType";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "NetType";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NetType";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "NetType";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ESSID";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "ESSID";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ESSID";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "ESSID";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BSSID";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "BSSID";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Info";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Info";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Info";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Info";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Channel";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Channel";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Channel";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "Channel";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Cloaked";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Cloaked";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Cloaked";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Cloaked";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Encryption";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Encryption";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Encryption";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Encryption";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Decrypted";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Decrypted";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Decrypted";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Decrypted";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MaxRate";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "MaxRate";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MaxRate";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "MaxRate";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MaxSeenRate";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "MaxSeenRate";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MaxSeenRate";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "MaxSeenRate";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Beacon";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Beacon";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Beacon";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Beacon";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_LLC";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "LLC";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LLC";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "LLC";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Data";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Data";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Data";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Data";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Crypt";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Crypt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Crypt";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Crypt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Weak";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Weak";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Weak";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "Weak";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Total";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Total";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Total";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "Total";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Carrier";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Carrier";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Carrier";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "Carrier";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Encoding";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Encoding";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Encoding";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Encoding";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FirstTime";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "FirstTime";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FirstTime";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "FirstTime";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_LastTime";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "LastTime";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LastTime";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "LastTime";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BestQuality";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "BestQuality";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BestQuality";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "BestQuality";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BestSignal";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "BestSignal";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BestSignal";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "BestSignal";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BestNoise";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "BestNoise";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BestNoise";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "BestNoise";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMinLat";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSMinLat";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMinLat";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinLat";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMinLon";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSMinLon";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMinLon";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinLon";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMinAlt";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSMinAlt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMinAlt";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinAlt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMinSpd";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSMinSpd";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMinSpd";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinSpd";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMaxLat";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSMaxLat";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMaxLat";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxLat";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMaxLon";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSMaxLon";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMaxLon";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxLon";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMaxAlt";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSMaxAlt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMaxAlt";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxAlt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMaxSpd";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSMaxSpd";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMaxSpd";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxSpd";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSBestLat";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSBestLat";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSBestLat";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestLat";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSBestLon";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSBestLon";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSBestLon";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestLon";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSBestAlt";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "GPSBestAlt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSBestAlt";
            param.DbType = System.Data.DbType.Decimal;
            param.DbType = System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestAlt";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Datasize";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "Datasize";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Datasize";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "Datasize";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IPType";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "IPType";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IPType";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "IPType";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IP";
            param.DbType = System.Data.DbType.Int32;
            param.DbType = System.Data.DbType.Int32;
            param.SourceColumn = "IP";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IP";
            param.DbType = System.Data.DbType.String;
            param.SourceColumn = "IP";
            param.SourceVersion = System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::KismetLogger.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [oui], [totalpacketsweak], [totalpacketstotal], [totalpacketsllc], [totalpacketsdupeiv], [totalpacketsdata], [totalpacketscrypt], [Network], [NetType], [ESSID], [BSSID], [Info], [Channel], [Cloaked], [Encryption], [Decrypted], [MaxRate], [MaxSeenRate], [Beacon], [LLC], [Data], [Crypt], [Weak], [Total], [Carrier], [Encoding], [FirstTime], [LastTime], [BestQuality], [BestSignal], [BestNoise], [GPSMinLat], [GPSMinLon], [GPSMinAlt], [GPSMinSpd], [GPSMaxLat], [GPSMaxLon], [GPSMaxAlt], [GPSMaxSpd], [GPSBestLat], [GPSBestLon], [GPSBestAlt], [Datasize], [IPType], [IP] FROM [Data]";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.DataDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.DataDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.DataDataTable dataTable = new DataSet1.DataDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.DataDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Data");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_oui, 
                    System.Nullable<decimal> Original_totalpacketsweak, 
                    System.Nullable<decimal> Original_totalpacketstotal, 
                    System.Nullable<decimal> Original_totalpacketsllc, 
                    System.Nullable<decimal> Original_totalpacketsdupeiv, 
                    System.Nullable<decimal> Original_totalpacketsdata, 
                    System.Nullable<decimal> Original_totalpacketscrypt, 
                    string Original_Network, 
                    string Original_NetType, 
                    string Original_ESSID, 
                    string Original_BSSID, 
                    string Original_Info, 
                    System.Nullable<decimal> Original_Channel, 
                    string Original_Cloaked, 
                    string Original_Encryption, 
                    string Original_Decrypted, 
                    System.Nullable<decimal> Original_MaxRate, 
                    System.Nullable<decimal> Original_MaxSeenRate, 
                    string Original_Beacon, 
                    string Original_LLC, 
                    string Original_Data, 
                    string Original_Crypt, 
                    System.Nullable<decimal> Original_Weak, 
                    System.Nullable<decimal> Original_Total, 
                    System.Nullable<decimal> Original_Carrier, 
                    string Original_Encoding, 
                    string Original_FirstTime, 
                    string Original_LastTime, 
                    string Original_BestQuality, 
                    System.Nullable<decimal> Original_BestSignal, 
                    System.Nullable<decimal> Original_BestNoise, 
                    System.Nullable<decimal> Original_GPSMinLat, 
                    System.Nullable<decimal> Original_GPSMinLon, 
                    System.Nullable<decimal> Original_GPSMinAlt, 
                    System.Nullable<decimal> Original_GPSMinSpd, 
                    System.Nullable<decimal> Original_GPSMaxLat, 
                    System.Nullable<decimal> Original_GPSMaxLon, 
                    System.Nullable<decimal> Original_GPSMaxAlt, 
                    System.Nullable<decimal> Original_GPSMaxSpd, 
                    System.Nullable<decimal> Original_GPSBestLat, 
                    System.Nullable<decimal> Original_GPSBestLon, 
                    System.Nullable<decimal> Original_GPSBestAlt, 
                    string Original_Datasize, 
                    string Original_IPType, 
                    string Original_IP) {
            if ((Original_oui == null)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_oui));
            }
            if ((Original_totalpacketsweak.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_totalpacketsweak.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Original_totalpacketstotal.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_totalpacketstotal.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Original_totalpacketsllc.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_totalpacketsllc.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Original_totalpacketsdupeiv.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_totalpacketsdupeiv.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Original_totalpacketsdata.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((decimal)(Original_totalpacketsdata.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((Original_totalpacketscrypt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((decimal)(Original_totalpacketscrypt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((Original_Network == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_Network));
            }
            if ((Original_NetType == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_NetType));
            }
            if ((Original_ESSID == null)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_ESSID));
            }
            if ((Original_BSSID == null)) {
                throw new System.ArgumentNullException("Original_BSSID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_BSSID));
            }
            if ((Original_Info == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_Info));
            }
            if ((Original_Channel.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((decimal)(Original_Channel.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = System.DBNull.Value;
            }
            if ((Original_Cloaked == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_Cloaked));
            }
            if ((Original_Encryption == null)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_Encryption));
            }
            if ((Original_Decrypted == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_Decrypted));
            }
            if ((Original_MaxRate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((decimal)(Original_MaxRate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = System.DBNull.Value;
            }
            if ((Original_MaxSeenRate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((decimal)(Original_MaxSeenRate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = System.DBNull.Value;
            }
            if ((Original_Beacon == null)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((string)(Original_Beacon));
            }
            if ((Original_LLC == null)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((string)(Original_LLC));
            }
            if ((Original_Data == null)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((string)(Original_Data));
            }
            if ((Original_Crypt == null)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((string)(Original_Crypt));
            }
            if ((Original_Weak.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((decimal)(Original_Weak.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = System.DBNull.Value;
            }
            if ((Original_Total.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((decimal)(Original_Total.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = System.DBNull.Value;
            }
            if ((Original_Carrier.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((decimal)(Original_Carrier.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = System.DBNull.Value;
            }
            if ((Original_Encoding == null)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((string)(Original_Encoding));
            }
            if ((Original_FirstTime == null)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((string)(Original_FirstTime));
            }
            if ((Original_LastTime == null)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((string)(Original_LastTime));
            }
            if ((Original_BestQuality == null)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((string)(Original_BestQuality));
            }
            if ((Original_BestSignal.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((decimal)(Original_BestSignal.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = System.DBNull.Value;
            }
            if ((Original_BestNoise.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((decimal)(Original_BestNoise.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = System.DBNull.Value;
            }
            if ((Original_GPSMinLat.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((decimal)(Original_GPSMinLat.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = System.DBNull.Value;
            }
            if ((Original_GPSMinLon.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((decimal)(Original_GPSMinLon.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = System.DBNull.Value;
            }
            if ((Original_GPSMinAlt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[66].Value = ((decimal)(Original_GPSMinAlt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[66].Value = System.DBNull.Value;
            }
            if ((Original_GPSMinSpd.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[68].Value = ((decimal)(Original_GPSMinSpd.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[68].Value = System.DBNull.Value;
            }
            if ((Original_GPSMaxLat.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[70].Value = ((decimal)(Original_GPSMaxLat.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[70].Value = System.DBNull.Value;
            }
            if ((Original_GPSMaxLon.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[72].Value = ((decimal)(Original_GPSMaxLon.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[72].Value = System.DBNull.Value;
            }
            if ((Original_GPSMaxAlt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[74].Value = ((decimal)(Original_GPSMaxAlt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[74].Value = System.DBNull.Value;
            }
            if ((Original_GPSMaxSpd.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[76].Value = ((decimal)(Original_GPSMaxSpd.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[76].Value = System.DBNull.Value;
            }
            if ((Original_GPSBestLat.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[78].Value = ((decimal)(Original_GPSBestLat.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[78].Value = System.DBNull.Value;
            }
            if ((Original_GPSBestLon.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[80].Value = ((decimal)(Original_GPSBestLon.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[80].Value = System.DBNull.Value;
            }
            if ((Original_GPSBestAlt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[82].Value = ((decimal)(Original_GPSBestAlt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[82].Value = System.DBNull.Value;
            }
            if ((Original_Datasize == null)) {
                this.Adapter.DeleteCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[84].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[84].Value = ((string)(Original_Datasize));
            }
            if ((Original_IPType == null)) {
                this.Adapter.DeleteCommand.Parameters[85].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[86].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[85].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[86].Value = ((string)(Original_IPType));
            }
            if ((Original_IP == null)) {
                this.Adapter.DeleteCommand.Parameters[87].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[88].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[87].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[88].Value = ((string)(Original_IP));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string oui, 
                    System.Nullable<decimal> totalpacketsweak, 
                    System.Nullable<decimal> totalpacketstotal, 
                    System.Nullable<decimal> totalpacketsllc, 
                    System.Nullable<decimal> totalpacketsdupeiv, 
                    System.Nullable<decimal> totalpacketsdata, 
                    System.Nullable<decimal> totalpacketscrypt, 
                    string Network, 
                    string NetType, 
                    string ESSID, 
                    string BSSID, 
                    string Info, 
                    System.Nullable<decimal> Channel, 
                    string Cloaked, 
                    string Encryption, 
                    string Decrypted, 
                    System.Nullable<decimal> MaxRate, 
                    System.Nullable<decimal> MaxSeenRate, 
                    string Beacon, 
                    string LLC, 
                    string Data, 
                    string Crypt, 
                    System.Nullable<decimal> Weak, 
                    System.Nullable<decimal> Total, 
                    System.Nullable<decimal> Carrier, 
                    string Encoding, 
                    string FirstTime, 
                    string LastTime, 
                    string BestQuality, 
                    System.Nullable<decimal> BestSignal, 
                    System.Nullable<decimal> BestNoise, 
                    System.Nullable<decimal> GPSMinLat, 
                    System.Nullable<decimal> GPSMinLon, 
                    System.Nullable<decimal> GPSMinAlt, 
                    System.Nullable<decimal> GPSMinSpd, 
                    System.Nullable<decimal> GPSMaxLat, 
                    System.Nullable<decimal> GPSMaxLon, 
                    System.Nullable<decimal> GPSMaxAlt, 
                    System.Nullable<decimal> GPSMaxSpd, 
                    System.Nullable<decimal> GPSBestLat, 
                    System.Nullable<decimal> GPSBestLon, 
                    System.Nullable<decimal> GPSBestAlt, 
                    string Datasize, 
                    string IPType, 
                    string IP) {
            if ((oui == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(oui));
            }
            if ((totalpacketsweak.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(totalpacketsweak.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((totalpacketstotal.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(totalpacketstotal.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((totalpacketsllc.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(totalpacketsllc.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((totalpacketsdupeiv.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(totalpacketsdupeiv.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((totalpacketsdata.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(totalpacketsdata.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((totalpacketscrypt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(totalpacketscrypt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Network == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Network));
            }
            if ((NetType == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(NetType));
            }
            if ((ESSID == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ESSID));
            }
            if ((BSSID == null)) {
                throw new System.ArgumentNullException("BSSID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(BSSID));
            }
            if ((Info == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Info));
            }
            if ((Channel.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(Channel.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Cloaked == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Cloaked));
            }
            if ((Encryption == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(Encryption));
            }
            if ((Decrypted == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(Decrypted));
            }
            if ((MaxRate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((decimal)(MaxRate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((MaxSeenRate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((decimal)(MaxSeenRate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = System.DBNull.Value;
            }
            if ((Beacon == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(Beacon));
            }
            if ((LLC == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(LLC));
            }
            if ((Data == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(Data));
            }
            if ((Crypt == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(Crypt));
            }
            if ((Weak.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((decimal)(Weak.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((Total.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((decimal)(Total.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = System.DBNull.Value;
            }
            if ((Carrier.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((decimal)(Carrier.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = System.DBNull.Value;
            }
            if ((Encoding == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(Encoding));
            }
            if ((FirstTime == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(FirstTime));
            }
            if ((LastTime == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(LastTime));
            }
            if ((BestQuality == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(BestQuality));
            }
            if ((BestSignal.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((decimal)(BestSignal.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = System.DBNull.Value;
            }
            if ((BestNoise.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((decimal)(BestNoise.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = System.DBNull.Value;
            }
            if ((GPSMinLat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((decimal)(GPSMinLat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = System.DBNull.Value;
            }
            if ((GPSMinLon.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((decimal)(GPSMinLon.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = System.DBNull.Value;
            }
            if ((GPSMinAlt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((decimal)(GPSMinAlt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = System.DBNull.Value;
            }
            if ((GPSMinSpd.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[34].Value = ((decimal)(GPSMinSpd.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = System.DBNull.Value;
            }
            if ((GPSMaxLat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((decimal)(GPSMaxLat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = System.DBNull.Value;
            }
            if ((GPSMaxLon.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((decimal)(GPSMaxLon.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = System.DBNull.Value;
            }
            if ((GPSMaxAlt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[37].Value = ((decimal)(GPSMaxAlt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = System.DBNull.Value;
            }
            if ((GPSMaxSpd.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[38].Value = ((decimal)(GPSMaxSpd.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = System.DBNull.Value;
            }
            if ((GPSBestLat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[39].Value = ((decimal)(GPSBestLat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = System.DBNull.Value;
            }
            if ((GPSBestLon.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[40].Value = ((decimal)(GPSBestLon.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = System.DBNull.Value;
            }
            if ((GPSBestAlt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[41].Value = ((decimal)(GPSBestAlt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = System.DBNull.Value;
            }
            if ((Datasize == null)) {
                this.Adapter.InsertCommand.Parameters[42].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = ((string)(Datasize));
            }
            if ((IPType == null)) {
                this.Adapter.InsertCommand.Parameters[43].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = ((string)(IPType));
            }
            if ((IP == null)) {
                this.Adapter.InsertCommand.Parameters[44].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = ((string)(IP));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string oui, 
                    System.Nullable<decimal> totalpacketsweak, 
                    System.Nullable<decimal> totalpacketstotal, 
                    System.Nullable<decimal> totalpacketsllc, 
                    System.Nullable<decimal> totalpacketsdupeiv, 
                    System.Nullable<decimal> totalpacketsdata, 
                    System.Nullable<decimal> totalpacketscrypt, 
                    string Network, 
                    string NetType, 
                    string ESSID, 
                    string BSSID, 
                    string Info, 
                    System.Nullable<decimal> Channel, 
                    string Cloaked, 
                    string Encryption, 
                    string Decrypted, 
                    System.Nullable<decimal> MaxRate, 
                    System.Nullable<decimal> MaxSeenRate, 
                    string Beacon, 
                    string LLC, 
                    string Data, 
                    string Crypt, 
                    System.Nullable<decimal> Weak, 
                    System.Nullable<decimal> Total, 
                    System.Nullable<decimal> Carrier, 
                    string Encoding, 
                    string FirstTime, 
                    string LastTime, 
                    string BestQuality, 
                    System.Nullable<decimal> BestSignal, 
                    System.Nullable<decimal> BestNoise, 
                    System.Nullable<decimal> GPSMinLat, 
                    System.Nullable<decimal> GPSMinLon, 
                    System.Nullable<decimal> GPSMinAlt, 
                    System.Nullable<decimal> GPSMinSpd, 
                    System.Nullable<decimal> GPSMaxLat, 
                    System.Nullable<decimal> GPSMaxLon, 
                    System.Nullable<decimal> GPSMaxAlt, 
                    System.Nullable<decimal> GPSMaxSpd, 
                    System.Nullable<decimal> GPSBestLat, 
                    System.Nullable<decimal> GPSBestLon, 
                    System.Nullable<decimal> GPSBestAlt, 
                    string Datasize, 
                    string IPType, 
                    string IP, 
                    string Original_oui, 
                    System.Nullable<decimal> Original_totalpacketsweak, 
                    System.Nullable<decimal> Original_totalpacketstotal, 
                    System.Nullable<decimal> Original_totalpacketsllc, 
                    System.Nullable<decimal> Original_totalpacketsdupeiv, 
                    System.Nullable<decimal> Original_totalpacketsdata, 
                    System.Nullable<decimal> Original_totalpacketscrypt, 
                    string Original_Network, 
                    string Original_NetType, 
                    string Original_ESSID, 
                    string Original_BSSID, 
                    string Original_Info, 
                    System.Nullable<decimal> Original_Channel, 
                    string Original_Cloaked, 
                    string Original_Encryption, 
                    string Original_Decrypted, 
                    System.Nullable<decimal> Original_MaxRate, 
                    System.Nullable<decimal> Original_MaxSeenRate, 
                    string Original_Beacon, 
                    string Original_LLC, 
                    string Original_Data, 
                    string Original_Crypt, 
                    System.Nullable<decimal> Original_Weak, 
                    System.Nullable<decimal> Original_Total, 
                    System.Nullable<decimal> Original_Carrier, 
                    string Original_Encoding, 
                    string Original_FirstTime, 
                    string Original_LastTime, 
                    string Original_BestQuality, 
                    System.Nullable<decimal> Original_BestSignal, 
                    System.Nullable<decimal> Original_BestNoise, 
                    System.Nullable<decimal> Original_GPSMinLat, 
                    System.Nullable<decimal> Original_GPSMinLon, 
                    System.Nullable<decimal> Original_GPSMinAlt, 
                    System.Nullable<decimal> Original_GPSMinSpd, 
                    System.Nullable<decimal> Original_GPSMaxLat, 
                    System.Nullable<decimal> Original_GPSMaxLon, 
                    System.Nullable<decimal> Original_GPSMaxAlt, 
                    System.Nullable<decimal> Original_GPSMaxSpd, 
                    System.Nullable<decimal> Original_GPSBestLat, 
                    System.Nullable<decimal> Original_GPSBestLon, 
                    System.Nullable<decimal> Original_GPSBestAlt, 
                    string Original_Datasize, 
                    string Original_IPType, 
                    string Original_IP) {
            if ((oui == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(oui));
            }
            if ((totalpacketsweak.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(totalpacketsweak.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((totalpacketstotal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(totalpacketstotal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((totalpacketsllc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(totalpacketsllc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((totalpacketsdupeiv.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(totalpacketsdupeiv.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((totalpacketsdata.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(totalpacketsdata.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((totalpacketscrypt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(totalpacketscrypt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Network == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Network));
            }
            if ((NetType == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(NetType));
            }
            if ((ESSID == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ESSID));
            }
            if ((BSSID == null)) {
                throw new System.ArgumentNullException("BSSID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(BSSID));
            }
            if ((Info == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Info));
            }
            if ((Channel.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Channel.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Cloaked == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Cloaked));
            }
            if ((Encryption == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Encryption));
            }
            if ((Decrypted == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Decrypted));
            }
            if ((MaxRate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(MaxRate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((MaxSeenRate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(MaxSeenRate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            if ((Beacon == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Beacon));
            }
            if ((LLC == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(LLC));
            }
            if ((Data == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Data));
            }
            if ((Crypt == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Crypt));
            }
            if ((Weak.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(Weak.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((Total.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(Total.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = System.DBNull.Value;
            }
            if ((Carrier.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((decimal)(Carrier.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = System.DBNull.Value;
            }
            if ((Encoding == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Encoding));
            }
            if ((FirstTime == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(FirstTime));
            }
            if ((LastTime == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(LastTime));
            }
            if ((BestQuality == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(BestQuality));
            }
            if ((BestSignal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((decimal)(BestSignal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = System.DBNull.Value;
            }
            if ((BestNoise.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((decimal)(BestNoise.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = System.DBNull.Value;
            }
            if ((GPSMinLat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((decimal)(GPSMinLat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = System.DBNull.Value;
            }
            if ((GPSMinLon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((decimal)(GPSMinLon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = System.DBNull.Value;
            }
            if ((GPSMinAlt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((decimal)(GPSMinAlt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = System.DBNull.Value;
            }
            if ((GPSMinSpd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((decimal)(GPSMinSpd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = System.DBNull.Value;
            }
            if ((GPSMaxLat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((decimal)(GPSMaxLat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = System.DBNull.Value;
            }
            if ((GPSMaxLon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((decimal)(GPSMaxLon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = System.DBNull.Value;
            }
            if ((GPSMaxAlt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((decimal)(GPSMaxAlt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = System.DBNull.Value;
            }
            if ((GPSMaxSpd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((decimal)(GPSMaxSpd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = System.DBNull.Value;
            }
            if ((GPSBestLat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((decimal)(GPSBestLat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = System.DBNull.Value;
            }
            if ((GPSBestLon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((decimal)(GPSBestLon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = System.DBNull.Value;
            }
            if ((GPSBestAlt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((decimal)(GPSBestAlt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = System.DBNull.Value;
            }
            if ((Datasize == null)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Datasize));
            }
            if ((IPType == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(IPType));
            }
            if ((IP == null)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(IP));
            }
            if ((Original_oui == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_oui));
            }
            if ((Original_totalpacketsweak.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((decimal)(Original_totalpacketsweak.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = System.DBNull.Value;
            }
            if ((Original_totalpacketstotal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((decimal)(Original_totalpacketstotal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = System.DBNull.Value;
            }
            if ((Original_totalpacketsllc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((decimal)(Original_totalpacketsllc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = System.DBNull.Value;
            }
            if ((Original_totalpacketsdupeiv.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((decimal)(Original_totalpacketsdupeiv.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = System.DBNull.Value;
            }
            if ((Original_totalpacketsdata.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((decimal)(Original_totalpacketsdata.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = System.DBNull.Value;
            }
            if ((Original_totalpacketscrypt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((decimal)(Original_totalpacketscrypt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = System.DBNull.Value;
            }
            if ((Original_Network == null)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((string)(Original_Network));
            }
            if ((Original_NetType == null)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[62].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[62].Value = ((string)(Original_NetType));
            }
            if ((Original_ESSID == null)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[64].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[64].Value = ((string)(Original_ESSID));
            }
            if ((Original_BSSID == null)) {
                throw new System.ArgumentNullException("Original_BSSID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((string)(Original_BSSID));
            }
            if ((Original_Info == null)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((string)(Original_Info));
            }
            if ((Original_Channel.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((decimal)(Original_Channel.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = System.DBNull.Value;
            }
            if ((Original_Cloaked == null)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[71].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[71].Value = ((string)(Original_Cloaked));
            }
            if ((Original_Encryption == null)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((string)(Original_Encryption));
            }
            if ((Original_Decrypted == null)) {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[75].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[75].Value = ((string)(Original_Decrypted));
            }
            if ((Original_MaxRate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[77].Value = ((decimal)(Original_MaxRate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[77].Value = System.DBNull.Value;
            }
            if ((Original_MaxSeenRate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[79].Value = ((decimal)(Original_MaxSeenRate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[79].Value = System.DBNull.Value;
            }
            if ((Original_Beacon == null)) {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[81].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[81].Value = ((string)(Original_Beacon));
            }
            if ((Original_LLC == null)) {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[83].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[83].Value = ((string)(Original_LLC));
            }
            if ((Original_Data == null)) {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[85].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[85].Value = ((string)(Original_Data));
            }
            if ((Original_Crypt == null)) {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[87].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[87].Value = ((string)(Original_Crypt));
            }
            if ((Original_Weak.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[89].Value = ((decimal)(Original_Weak.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[89].Value = System.DBNull.Value;
            }
            if ((Original_Total.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[91].Value = ((decimal)(Original_Total.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[91].Value = System.DBNull.Value;
            }
            if ((Original_Carrier.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[93].Value = ((decimal)(Original_Carrier.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[93].Value = System.DBNull.Value;
            }
            if ((Original_Encoding == null)) {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[95].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[95].Value = ((string)(Original_Encoding));
            }
            if ((Original_FirstTime == null)) {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[97].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[97].Value = ((string)(Original_FirstTime));
            }
            if ((Original_LastTime == null)) {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[99].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[99].Value = ((string)(Original_LastTime));
            }
            if ((Original_BestQuality == null)) {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[101].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[101].Value = ((string)(Original_BestQuality));
            }
            if ((Original_BestSignal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[103].Value = ((decimal)(Original_BestSignal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[103].Value = System.DBNull.Value;
            }
            if ((Original_BestNoise.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[104].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[105].Value = ((decimal)(Original_BestNoise.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[104].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[105].Value = System.DBNull.Value;
            }
            if ((Original_GPSMinLat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[106].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[107].Value = ((decimal)(Original_GPSMinLat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[106].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[107].Value = System.DBNull.Value;
            }
            if ((Original_GPSMinLon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[108].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[109].Value = ((decimal)(Original_GPSMinLon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[108].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[109].Value = System.DBNull.Value;
            }
            if ((Original_GPSMinAlt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[110].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[111].Value = ((decimal)(Original_GPSMinAlt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[110].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[111].Value = System.DBNull.Value;
            }
            if ((Original_GPSMinSpd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[112].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[113].Value = ((decimal)(Original_GPSMinSpd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[112].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[113].Value = System.DBNull.Value;
            }
            if ((Original_GPSMaxLat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[114].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[115].Value = ((decimal)(Original_GPSMaxLat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[114].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[115].Value = System.DBNull.Value;
            }
            if ((Original_GPSMaxLon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[116].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[117].Value = ((decimal)(Original_GPSMaxLon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[116].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[117].Value = System.DBNull.Value;
            }
            if ((Original_GPSMaxAlt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[118].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[119].Value = ((decimal)(Original_GPSMaxAlt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[118].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[119].Value = System.DBNull.Value;
            }
            if ((Original_GPSMaxSpd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[120].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[121].Value = ((decimal)(Original_GPSMaxSpd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[120].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[121].Value = System.DBNull.Value;
            }
            if ((Original_GPSBestLat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[122].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[123].Value = ((decimal)(Original_GPSBestLat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[122].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[123].Value = System.DBNull.Value;
            }
            if ((Original_GPSBestLon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[124].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[125].Value = ((decimal)(Original_GPSBestLon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[124].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[125].Value = System.DBNull.Value;
            }
            if ((Original_GPSBestAlt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[126].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[127].Value = ((decimal)(Original_GPSBestAlt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[126].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[127].Value = System.DBNull.Value;
            }
            if ((Original_Datasize == null)) {
                this.Adapter.UpdateCommand.Parameters[128].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[129].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[128].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[129].Value = ((string)(Original_Datasize));
            }
            if ((Original_IPType == null)) {
                this.Adapter.UpdateCommand.Parameters[130].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[131].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[130].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[131].Value = ((string)(Original_IPType));
            }
            if ((Original_IP == null)) {
                this.Adapter.UpdateCommand.Parameters[132].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[133].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[132].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[133].Value = ((string)(Original_IP));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591