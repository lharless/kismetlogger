
/*
//===============================================================================
//  Generated From - SQLite_CSharp_BusinessEntity.vbgen
//
//  The supporting base class SQLiteEntity is in the Architecture directory in "dOOdads".
//  
//  This object is 'abstract' which means you need to inherit from it to be able
//  to instantiate it.  This is very easilly done. You can override properties and
//  methods in your derived class, this allows you to regenerate this class at any
//  time and not worry about overwriting custom code. 
//
//  NEVER EDIT THIS FILE.
//
//  public class YourObject :  _YourObject
//  {
//
//  }
//
//===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.2)

using System;
using System.Data;
using Finisar.SQLite;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace KismetLogger
{
	public abstract class _Clients : SQLiteEntity
	{
		public _Clients()
		{
			this.QuerySource = "Clients";
			this.MappingName = "Clients";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		public override string GetAutoKeyColumns()
		{
			return "";
		}
		

		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return this.Query.Load();
		}
	
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(string Clientmac)
		{
			this.Where.Clientmac.Value = Clientmac;
			
			return this.Query.Load();
		}
		
		
		#region Parameters
		protected class Parameters
		{
			
			public static SQLiteParameter Clientipaddress
			{
				get
				{
					return new SQLiteParameter("@Clientipaddress", DbType.String);

				}
			}
			
			public static SQLiteParameter Oui
			{
				get
				{
					return new SQLiteParameter("@Oui", DbType.String);

				}
			}
			
			public static SQLiteParameter Bssid
			{
				get
				{
					return new SQLiteParameter("@Bssid", DbType.String);

				}
			}
			
			public static SQLiteParameter Clientmac
			{
				get
				{
					return new SQLiteParameter("@Clientmac", DbType.String);

				}
			}
			
			public static SQLiteParameter Clientencryption
			{
				get
				{
					return new SQLiteParameter("@Clientencryption", DbType.String);

				}
			}
			
			public static SQLiteParameter Clientfirsttime
			{
				get
				{
					return new SQLiteParameter("@Clientfirsttime", DbType.String);

				}
			}
			
			public static SQLiteParameter Clientgpsminlat
			{
				get
				{
					return new SQLiteParameter("@Clientgpsminlat", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Clientgpsmaxlat
			{
				get
				{
					return new SQLiteParameter("@Clientgpsmaxlat", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Clientgpsminlon
			{
				get
				{
					return new SQLiteParameter("@Clientgpsminlon", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Clientgpsmaxlon
			{
				get
				{
					return new SQLiteParameter("@Clientgpsmaxlon", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Clientgpsminalt
			{
				get
				{
					return new SQLiteParameter("@Clientgpsminalt", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Clientgpsmaxalt
			{
				get
				{
					return new SQLiteParameter("@Clientgpsmaxalt", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Clientgpsminspeed
			{
				get
				{
					return new SQLiteParameter("@Clientgpsminspeed", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Clientgpsmaxspeed
			{
				get
				{
					return new SQLiteParameter("@Clientgpsmaxspeed", DbType.Decimal);

				}
			}
			
			public static SQLiteParameter Clientdatasize
			{
				get
				{
					return new SQLiteParameter("@Clientdatasize", DbType.String);

				}
			}
			
			public static SQLiteParameter Clientmaxrate
			{
				get
				{
					return new SQLiteParameter("@Clientmaxrate", DbType.String);

				}
			}
			
			public static SQLiteParameter Clientmaxseenrate
			{
				get
				{
					return new SQLiteParameter("@Clientmaxseenrate", DbType.String);

				}
			}
			
			public static SQLiteParameter Clientlasttime
			{
				get
				{
					return new SQLiteParameter("@Clientlasttime", DbType.String);

				}
			}
			
			public static SQLiteParameter Clientpacketscrypt
			{
				get
				{
					return new SQLiteParameter("@Clientpacketscrypt", DbType.String);

				}
			}
			
			public static SQLiteParameter Clientpacketsdata
			{
				get
				{
					return new SQLiteParameter("@Clientpacketsdata", DbType.String);

				}
			}
			
			public static SQLiteParameter Clientpacketsweak
			{
				get
				{
					return new SQLiteParameter("@Clientpacketsweak", DbType.String);

				}
			}
			
			public static SQLiteParameter Number
			{
				get
				{
					return new SQLiteParameter("@Number", DbType.String);

				}
			}
			
			public static SQLiteParameter Type
			{
				get
				{
					return new SQLiteParameter("@Type", DbType.String);

				}
			}
			
			public static SQLiteParameter Wep
			{
				get
				{
					return new SQLiteParameter("@Wep", DbType.String);

				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Clientipaddress = "Clientipaddress";
            public const string Oui = "oui";
            public const string Bssid = "bssid";
            public const string Clientmac = "clientmac";
            public const string Clientencryption = "clientencryption";
            public const string Clientfirsttime = "clientfirsttime";
            public const string Clientgpsminlat = "clientgpsminlat";
            public const string Clientgpsmaxlat = "clientgpsmaxlat";
            public const string Clientgpsminlon = "clientgpsminlon";
            public const string Clientgpsmaxlon = "clientgpsmaxlon";
            public const string Clientgpsminalt = "clientgpsminalt";
            public const string Clientgpsmaxalt = "clientgpsmaxalt";
            public const string Clientgpsminspeed = "clientgpsminspeed";
            public const string Clientgpsmaxspeed = "clientgpsmaxspeed";
            public const string Clientdatasize = "clientdatasize";
            public const string Clientmaxrate = "clientmaxrate";
            public const string Clientmaxseenrate = "clientmaxseenrate";
            public const string Clientlasttime = "clientlasttime";
            public const string Clientpacketscrypt = "clientpacketscrypt";
            public const string Clientpacketsdata = "clientpacketsdata";
            public const string Clientpacketsweak = "clientpacketsweak";
            public const string Number = "Number";
            public const string Type = "Type";
            public const string Wep = "wep";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Clientipaddress] = _Clients.PropertyNames.Clientipaddress;
					ht[Oui] = _Clients.PropertyNames.Oui;
					ht[Bssid] = _Clients.PropertyNames.Bssid;
					ht[Clientmac] = _Clients.PropertyNames.Clientmac;
					ht[Clientencryption] = _Clients.PropertyNames.Clientencryption;
					ht[Clientfirsttime] = _Clients.PropertyNames.Clientfirsttime;
					ht[Clientgpsminlat] = _Clients.PropertyNames.Clientgpsminlat;
					ht[Clientgpsmaxlat] = _Clients.PropertyNames.Clientgpsmaxlat;
					ht[Clientgpsminlon] = _Clients.PropertyNames.Clientgpsminlon;
					ht[Clientgpsmaxlon] = _Clients.PropertyNames.Clientgpsmaxlon;
					ht[Clientgpsminalt] = _Clients.PropertyNames.Clientgpsminalt;
					ht[Clientgpsmaxalt] = _Clients.PropertyNames.Clientgpsmaxalt;
					ht[Clientgpsminspeed] = _Clients.PropertyNames.Clientgpsminspeed;
					ht[Clientgpsmaxspeed] = _Clients.PropertyNames.Clientgpsmaxspeed;
					ht[Clientdatasize] = _Clients.PropertyNames.Clientdatasize;
					ht[Clientmaxrate] = _Clients.PropertyNames.Clientmaxrate;
					ht[Clientmaxseenrate] = _Clients.PropertyNames.Clientmaxseenrate;
					ht[Clientlasttime] = _Clients.PropertyNames.Clientlasttime;
					ht[Clientpacketscrypt] = _Clients.PropertyNames.Clientpacketscrypt;
					ht[Clientpacketsdata] = _Clients.PropertyNames.Clientpacketsdata;
					ht[Clientpacketsweak] = _Clients.PropertyNames.Clientpacketsweak;
					ht[Number] = _Clients.PropertyNames.Number;
					ht[Type] = _Clients.PropertyNames.Type;
					ht[Wep] = _Clients.PropertyNames.Wep;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Clientipaddress = "Clientipaddress";
            public const string Oui = "Oui";
            public const string Bssid = "Bssid";
            public const string Clientmac = "Clientmac";
            public const string Clientencryption = "Clientencryption";
            public const string Clientfirsttime = "Clientfirsttime";
            public const string Clientgpsminlat = "Clientgpsminlat";
            public const string Clientgpsmaxlat = "Clientgpsmaxlat";
            public const string Clientgpsminlon = "Clientgpsminlon";
            public const string Clientgpsmaxlon = "Clientgpsmaxlon";
            public const string Clientgpsminalt = "Clientgpsminalt";
            public const string Clientgpsmaxalt = "Clientgpsmaxalt";
            public const string Clientgpsminspeed = "Clientgpsminspeed";
            public const string Clientgpsmaxspeed = "Clientgpsmaxspeed";
            public const string Clientdatasize = "Clientdatasize";
            public const string Clientmaxrate = "Clientmaxrate";
            public const string Clientmaxseenrate = "Clientmaxseenrate";
            public const string Clientlasttime = "Clientlasttime";
            public const string Clientpacketscrypt = "Clientpacketscrypt";
            public const string Clientpacketsdata = "Clientpacketsdata";
            public const string Clientpacketsweak = "Clientpacketsweak";
            public const string Number = "Number";
            public const string Type = "Type";
            public const string Wep = "Wep";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Clientipaddress] = _Clients.ColumnNames.Clientipaddress;
					ht[Oui] = _Clients.ColumnNames.Oui;
					ht[Bssid] = _Clients.ColumnNames.Bssid;
					ht[Clientmac] = _Clients.ColumnNames.Clientmac;
					ht[Clientencryption] = _Clients.ColumnNames.Clientencryption;
					ht[Clientfirsttime] = _Clients.ColumnNames.Clientfirsttime;
					ht[Clientgpsminlat] = _Clients.ColumnNames.Clientgpsminlat;
					ht[Clientgpsmaxlat] = _Clients.ColumnNames.Clientgpsmaxlat;
					ht[Clientgpsminlon] = _Clients.ColumnNames.Clientgpsminlon;
					ht[Clientgpsmaxlon] = _Clients.ColumnNames.Clientgpsmaxlon;
					ht[Clientgpsminalt] = _Clients.ColumnNames.Clientgpsminalt;
					ht[Clientgpsmaxalt] = _Clients.ColumnNames.Clientgpsmaxalt;
					ht[Clientgpsminspeed] = _Clients.ColumnNames.Clientgpsminspeed;
					ht[Clientgpsmaxspeed] = _Clients.ColumnNames.Clientgpsmaxspeed;
					ht[Clientdatasize] = _Clients.ColumnNames.Clientdatasize;
					ht[Clientmaxrate] = _Clients.ColumnNames.Clientmaxrate;
					ht[Clientmaxseenrate] = _Clients.ColumnNames.Clientmaxseenrate;
					ht[Clientlasttime] = _Clients.ColumnNames.Clientlasttime;
					ht[Clientpacketscrypt] = _Clients.ColumnNames.Clientpacketscrypt;
					ht[Clientpacketsdata] = _Clients.ColumnNames.Clientpacketsdata;
					ht[Clientpacketsweak] = _Clients.ColumnNames.Clientpacketsweak;
					ht[Number] = _Clients.ColumnNames.Number;
					ht[Type] = _Clients.ColumnNames.Type;
					ht[Wep] = _Clients.ColumnNames.Wep;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Clientipaddress = "s_Clientipaddress";
            public const string Oui = "s_Oui";
            public const string Bssid = "s_Bssid";
            public const string Clientmac = "s_Clientmac";
            public const string Clientencryption = "s_Clientencryption";
            public const string Clientfirsttime = "s_Clientfirsttime";
            public const string Clientgpsminlat = "s_Clientgpsminlat";
            public const string Clientgpsmaxlat = "s_Clientgpsmaxlat";
            public const string Clientgpsminlon = "s_Clientgpsminlon";
            public const string Clientgpsmaxlon = "s_Clientgpsmaxlon";
            public const string Clientgpsminalt = "s_Clientgpsminalt";
            public const string Clientgpsmaxalt = "s_Clientgpsmaxalt";
            public const string Clientgpsminspeed = "s_Clientgpsminspeed";
            public const string Clientgpsmaxspeed = "s_Clientgpsmaxspeed";
            public const string Clientdatasize = "s_Clientdatasize";
            public const string Clientmaxrate = "s_Clientmaxrate";
            public const string Clientmaxseenrate = "s_Clientmaxseenrate";
            public const string Clientlasttime = "s_Clientlasttime";
            public const string Clientpacketscrypt = "s_Clientpacketscrypt";
            public const string Clientpacketsdata = "s_Clientpacketsdata";
            public const string Clientpacketsweak = "s_Clientpacketsweak";
            public const string Number = "s_Number";
            public const string Type = "s_Type";
            public const string Wep = "s_Wep";

		}
		#endregion		
		
		#region Properties
	
		public virtual string Clientipaddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.Clientipaddress);
			}
			set
	        {
				base.Setstring(ColumnNames.Clientipaddress, value);
			}
		}

		public virtual string Oui
	    {
			get
	        {
				return base.Getstring(ColumnNames.Oui);
			}
			set
	        {
				base.Setstring(ColumnNames.Oui, value);
			}
		}

		public virtual string Bssid
	    {
			get
	        {
				return base.Getstring(ColumnNames.Bssid);
			}
			set
	        {
				base.Setstring(ColumnNames.Bssid, value);
			}
		}

		public virtual string Clientmac
	    {
			get
	        {
				return base.Getstring(ColumnNames.Clientmac);
			}
			set
	        {
				base.Setstring(ColumnNames.Clientmac, value);
			}
		}

		public virtual string Clientencryption
	    {
			get
	        {
				return base.Getstring(ColumnNames.Clientencryption);
			}
			set
	        {
				base.Setstring(ColumnNames.Clientencryption, value);
			}
		}

		public virtual string Clientfirsttime
	    {
			get
	        {
				return base.Getstring(ColumnNames.Clientfirsttime);
			}
			set
	        {
				base.Setstring(ColumnNames.Clientfirsttime, value);
			}
		}

		public virtual decimal Clientgpsminlat
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Clientgpsminlat);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Clientgpsminlat, value);
			}
		}

		public virtual decimal Clientgpsmaxlat
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Clientgpsmaxlat);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Clientgpsmaxlat, value);
			}
		}

		public virtual decimal Clientgpsminlon
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Clientgpsminlon);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Clientgpsminlon, value);
			}
		}

		public virtual decimal Clientgpsmaxlon
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Clientgpsmaxlon);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Clientgpsmaxlon, value);
			}
		}

		public virtual decimal Clientgpsminalt
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Clientgpsminalt);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Clientgpsminalt, value);
			}
		}

		public virtual decimal Clientgpsmaxalt
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Clientgpsmaxalt);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Clientgpsmaxalt, value);
			}
		}

		public virtual decimal Clientgpsminspeed
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Clientgpsminspeed);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Clientgpsminspeed, value);
			}
		}

		public virtual decimal Clientgpsmaxspeed
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Clientgpsmaxspeed);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Clientgpsmaxspeed, value);
			}
		}

		public virtual string Clientdatasize
	    {
			get
	        {
				return base.Getstring(ColumnNames.Clientdatasize);
			}
			set
	        {
				base.Setstring(ColumnNames.Clientdatasize, value);
			}
		}

		public virtual string Clientmaxrate
	    {
			get
	        {
				return base.Getstring(ColumnNames.Clientmaxrate);
			}
			set
	        {
				base.Setstring(ColumnNames.Clientmaxrate, value);
			}
		}

		public virtual string Clientmaxseenrate
	    {
			get
	        {
				return base.Getstring(ColumnNames.Clientmaxseenrate);
			}
			set
	        {
				base.Setstring(ColumnNames.Clientmaxseenrate, value);
			}
		}

		public virtual string Clientlasttime
	    {
			get
	        {
				return base.Getstring(ColumnNames.Clientlasttime);
			}
			set
	        {
				base.Setstring(ColumnNames.Clientlasttime, value);
			}
		}

		public virtual string Clientpacketscrypt
	    {
			get
	        {
				return base.Getstring(ColumnNames.Clientpacketscrypt);
			}
			set
	        {
				base.Setstring(ColumnNames.Clientpacketscrypt, value);
			}
		}

		public virtual string Clientpacketsdata
	    {
			get
	        {
				return base.Getstring(ColumnNames.Clientpacketsdata);
			}
			set
	        {
				base.Setstring(ColumnNames.Clientpacketsdata, value);
			}
		}

		public virtual string Clientpacketsweak
	    {
			get
	        {
				return base.Getstring(ColumnNames.Clientpacketsweak);
			}
			set
	        {
				base.Setstring(ColumnNames.Clientpacketsweak, value);
			}
		}

		public virtual string Number
	    {
			get
	        {
				return base.Getstring(ColumnNames.Number);
			}
			set
	        {
				base.Setstring(ColumnNames.Number, value);
			}
		}

		public virtual string Type
	    {
			get
	        {
				return base.Getstring(ColumnNames.Type);
			}
			set
	        {
				base.Setstring(ColumnNames.Type, value);
			}
		}

		public virtual string Wep
	    {
			get
	        {
				return base.Getstring(ColumnNames.Wep);
			}
			set
	        {
				base.Setstring(ColumnNames.Wep, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Clientipaddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientipaddress) ? string.Empty : base.GetstringAsString(ColumnNames.Clientipaddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientipaddress);
				else
					this.Clientipaddress = base.SetstringAsString(ColumnNames.Clientipaddress, value);
			}
		}

		public virtual string s_Oui
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Oui) ? string.Empty : base.GetstringAsString(ColumnNames.Oui);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Oui);
				else
					this.Oui = base.SetstringAsString(ColumnNames.Oui, value);
			}
		}

		public virtual string s_Bssid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bssid) ? string.Empty : base.GetstringAsString(ColumnNames.Bssid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bssid);
				else
					this.Bssid = base.SetstringAsString(ColumnNames.Bssid, value);
			}
		}

		public virtual string s_Clientmac
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientmac) ? string.Empty : base.GetstringAsString(ColumnNames.Clientmac);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientmac);
				else
					this.Clientmac = base.SetstringAsString(ColumnNames.Clientmac, value);
			}
		}

		public virtual string s_Clientencryption
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientencryption) ? string.Empty : base.GetstringAsString(ColumnNames.Clientencryption);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientencryption);
				else
					this.Clientencryption = base.SetstringAsString(ColumnNames.Clientencryption, value);
			}
		}

		public virtual string s_Clientfirsttime
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientfirsttime) ? string.Empty : base.GetstringAsString(ColumnNames.Clientfirsttime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientfirsttime);
				else
					this.Clientfirsttime = base.SetstringAsString(ColumnNames.Clientfirsttime, value);
			}
		}

		public virtual string s_Clientgpsminlat
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientgpsminlat) ? string.Empty : base.GetdecimalAsString(ColumnNames.Clientgpsminlat);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientgpsminlat);
				else
					this.Clientgpsminlat = base.SetdecimalAsString(ColumnNames.Clientgpsminlat, value);
			}
		}

		public virtual string s_Clientgpsmaxlat
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientgpsmaxlat) ? string.Empty : base.GetdecimalAsString(ColumnNames.Clientgpsmaxlat);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientgpsmaxlat);
				else
					this.Clientgpsmaxlat = base.SetdecimalAsString(ColumnNames.Clientgpsmaxlat, value);
			}
		}

		public virtual string s_Clientgpsminlon
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientgpsminlon) ? string.Empty : base.GetdecimalAsString(ColumnNames.Clientgpsminlon);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientgpsminlon);
				else
					this.Clientgpsminlon = base.SetdecimalAsString(ColumnNames.Clientgpsminlon, value);
			}
		}

		public virtual string s_Clientgpsmaxlon
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientgpsmaxlon) ? string.Empty : base.GetdecimalAsString(ColumnNames.Clientgpsmaxlon);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientgpsmaxlon);
				else
					this.Clientgpsmaxlon = base.SetdecimalAsString(ColumnNames.Clientgpsmaxlon, value);
			}
		}

		public virtual string s_Clientgpsminalt
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientgpsminalt) ? string.Empty : base.GetdecimalAsString(ColumnNames.Clientgpsminalt);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientgpsminalt);
				else
					this.Clientgpsminalt = base.SetdecimalAsString(ColumnNames.Clientgpsminalt, value);
			}
		}

		public virtual string s_Clientgpsmaxalt
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientgpsmaxalt) ? string.Empty : base.GetdecimalAsString(ColumnNames.Clientgpsmaxalt);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientgpsmaxalt);
				else
					this.Clientgpsmaxalt = base.SetdecimalAsString(ColumnNames.Clientgpsmaxalt, value);
			}
		}

		public virtual string s_Clientgpsminspeed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientgpsminspeed) ? string.Empty : base.GetdecimalAsString(ColumnNames.Clientgpsminspeed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientgpsminspeed);
				else
					this.Clientgpsminspeed = base.SetdecimalAsString(ColumnNames.Clientgpsminspeed, value);
			}
		}

		public virtual string s_Clientgpsmaxspeed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientgpsmaxspeed) ? string.Empty : base.GetdecimalAsString(ColumnNames.Clientgpsmaxspeed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientgpsmaxspeed);
				else
					this.Clientgpsmaxspeed = base.SetdecimalAsString(ColumnNames.Clientgpsmaxspeed, value);
			}
		}

		public virtual string s_Clientdatasize
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientdatasize) ? string.Empty : base.GetstringAsString(ColumnNames.Clientdatasize);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientdatasize);
				else
					this.Clientdatasize = base.SetstringAsString(ColumnNames.Clientdatasize, value);
			}
		}

		public virtual string s_Clientmaxrate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientmaxrate) ? string.Empty : base.GetstringAsString(ColumnNames.Clientmaxrate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientmaxrate);
				else
					this.Clientmaxrate = base.SetstringAsString(ColumnNames.Clientmaxrate, value);
			}
		}

		public virtual string s_Clientmaxseenrate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientmaxseenrate) ? string.Empty : base.GetstringAsString(ColumnNames.Clientmaxseenrate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientmaxseenrate);
				else
					this.Clientmaxseenrate = base.SetstringAsString(ColumnNames.Clientmaxseenrate, value);
			}
		}

		public virtual string s_Clientlasttime
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientlasttime) ? string.Empty : base.GetstringAsString(ColumnNames.Clientlasttime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientlasttime);
				else
					this.Clientlasttime = base.SetstringAsString(ColumnNames.Clientlasttime, value);
			}
		}

		public virtual string s_Clientpacketscrypt
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientpacketscrypt) ? string.Empty : base.GetstringAsString(ColumnNames.Clientpacketscrypt);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientpacketscrypt);
				else
					this.Clientpacketscrypt = base.SetstringAsString(ColumnNames.Clientpacketscrypt, value);
			}
		}

		public virtual string s_Clientpacketsdata
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientpacketsdata) ? string.Empty : base.GetstringAsString(ColumnNames.Clientpacketsdata);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientpacketsdata);
				else
					this.Clientpacketsdata = base.SetstringAsString(ColumnNames.Clientpacketsdata, value);
			}
		}

		public virtual string s_Clientpacketsweak
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clientpacketsweak) ? string.Empty : base.GetstringAsString(ColumnNames.Clientpacketsweak);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clientpacketsweak);
				else
					this.Clientpacketsweak = base.SetstringAsString(ColumnNames.Clientpacketsweak, value);
			}
		}

		public virtual string s_Number
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Number) ? string.Empty : base.GetstringAsString(ColumnNames.Number);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Number);
				else
					this.Number = base.SetstringAsString(ColumnNames.Number, value);
			}
		}

		public virtual string s_Type
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Type) ? string.Empty : base.GetstringAsString(ColumnNames.Type);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Type);
				else
					this.Type = base.SetstringAsString(ColumnNames.Type, value);
			}
		}

		public virtual string s_Wep
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Wep) ? string.Empty : base.GetstringAsString(ColumnNames.Wep);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Wep);
				else
					this.Wep = base.SetstringAsString(ColumnNames.Wep, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Clientipaddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientipaddress, Parameters.Clientipaddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Oui
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Oui, Parameters.Oui);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bssid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bssid, Parameters.Bssid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientmac
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientmac, Parameters.Clientmac);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientencryption
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientencryption, Parameters.Clientencryption);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientfirsttime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientfirsttime, Parameters.Clientfirsttime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientgpsminlat
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientgpsminlat, Parameters.Clientgpsminlat);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientgpsmaxlat
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientgpsmaxlat, Parameters.Clientgpsmaxlat);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientgpsminlon
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientgpsminlon, Parameters.Clientgpsminlon);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientgpsmaxlon
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientgpsmaxlon, Parameters.Clientgpsmaxlon);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientgpsminalt
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientgpsminalt, Parameters.Clientgpsminalt);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientgpsmaxalt
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientgpsmaxalt, Parameters.Clientgpsmaxalt);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientgpsminspeed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientgpsminspeed, Parameters.Clientgpsminspeed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientgpsmaxspeed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientgpsmaxspeed, Parameters.Clientgpsmaxspeed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientdatasize
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientdatasize, Parameters.Clientdatasize);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientmaxrate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientmaxrate, Parameters.Clientmaxrate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientmaxseenrate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientmaxseenrate, Parameters.Clientmaxseenrate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientlasttime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientlasttime, Parameters.Clientlasttime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientpacketscrypt
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientpacketscrypt, Parameters.Clientpacketscrypt);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientpacketsdata
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientpacketsdata, Parameters.Clientpacketsdata);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clientpacketsweak
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clientpacketsweak, Parameters.Clientpacketsweak);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Number
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Number, Parameters.Number);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Type
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Type, Parameters.Type);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Wep
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Wep, Parameters.Wep);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Clientipaddress
		    {
				get
		        {
					if(_Clientipaddress_W == null)
	        	    {
						_Clientipaddress_W = TearOff.Clientipaddress;
					}
					return _Clientipaddress_W;
				}
			}

			public WhereParameter Oui
		    {
				get
		        {
					if(_Oui_W == null)
	        	    {
						_Oui_W = TearOff.Oui;
					}
					return _Oui_W;
				}
			}

			public WhereParameter Bssid
		    {
				get
		        {
					if(_Bssid_W == null)
	        	    {
						_Bssid_W = TearOff.Bssid;
					}
					return _Bssid_W;
				}
			}

			public WhereParameter Clientmac
		    {
				get
		        {
					if(_Clientmac_W == null)
	        	    {
						_Clientmac_W = TearOff.Clientmac;
					}
					return _Clientmac_W;
				}
			}

			public WhereParameter Clientencryption
		    {
				get
		        {
					if(_Clientencryption_W == null)
	        	    {
						_Clientencryption_W = TearOff.Clientencryption;
					}
					return _Clientencryption_W;
				}
			}

			public WhereParameter Clientfirsttime
		    {
				get
		        {
					if(_Clientfirsttime_W == null)
	        	    {
						_Clientfirsttime_W = TearOff.Clientfirsttime;
					}
					return _Clientfirsttime_W;
				}
			}

			public WhereParameter Clientgpsminlat
		    {
				get
		        {
					if(_Clientgpsminlat_W == null)
	        	    {
						_Clientgpsminlat_W = TearOff.Clientgpsminlat;
					}
					return _Clientgpsminlat_W;
				}
			}

			public WhereParameter Clientgpsmaxlat
		    {
				get
		        {
					if(_Clientgpsmaxlat_W == null)
	        	    {
						_Clientgpsmaxlat_W = TearOff.Clientgpsmaxlat;
					}
					return _Clientgpsmaxlat_W;
				}
			}

			public WhereParameter Clientgpsminlon
		    {
				get
		        {
					if(_Clientgpsminlon_W == null)
	        	    {
						_Clientgpsminlon_W = TearOff.Clientgpsminlon;
					}
					return _Clientgpsminlon_W;
				}
			}

			public WhereParameter Clientgpsmaxlon
		    {
				get
		        {
					if(_Clientgpsmaxlon_W == null)
	        	    {
						_Clientgpsmaxlon_W = TearOff.Clientgpsmaxlon;
					}
					return _Clientgpsmaxlon_W;
				}
			}

			public WhereParameter Clientgpsminalt
		    {
				get
		        {
					if(_Clientgpsminalt_W == null)
	        	    {
						_Clientgpsminalt_W = TearOff.Clientgpsminalt;
					}
					return _Clientgpsminalt_W;
				}
			}

			public WhereParameter Clientgpsmaxalt
		    {
				get
		        {
					if(_Clientgpsmaxalt_W == null)
	        	    {
						_Clientgpsmaxalt_W = TearOff.Clientgpsmaxalt;
					}
					return _Clientgpsmaxalt_W;
				}
			}

			public WhereParameter Clientgpsminspeed
		    {
				get
		        {
					if(_Clientgpsminspeed_W == null)
	        	    {
						_Clientgpsminspeed_W = TearOff.Clientgpsminspeed;
					}
					return _Clientgpsminspeed_W;
				}
			}

			public WhereParameter Clientgpsmaxspeed
		    {
				get
		        {
					if(_Clientgpsmaxspeed_W == null)
	        	    {
						_Clientgpsmaxspeed_W = TearOff.Clientgpsmaxspeed;
					}
					return _Clientgpsmaxspeed_W;
				}
			}

			public WhereParameter Clientdatasize
		    {
				get
		        {
					if(_Clientdatasize_W == null)
	        	    {
						_Clientdatasize_W = TearOff.Clientdatasize;
					}
					return _Clientdatasize_W;
				}
			}

			public WhereParameter Clientmaxrate
		    {
				get
		        {
					if(_Clientmaxrate_W == null)
	        	    {
						_Clientmaxrate_W = TearOff.Clientmaxrate;
					}
					return _Clientmaxrate_W;
				}
			}

			public WhereParameter Clientmaxseenrate
		    {
				get
		        {
					if(_Clientmaxseenrate_W == null)
	        	    {
						_Clientmaxseenrate_W = TearOff.Clientmaxseenrate;
					}
					return _Clientmaxseenrate_W;
				}
			}

			public WhereParameter Clientlasttime
		    {
				get
		        {
					if(_Clientlasttime_W == null)
	        	    {
						_Clientlasttime_W = TearOff.Clientlasttime;
					}
					return _Clientlasttime_W;
				}
			}

			public WhereParameter Clientpacketscrypt
		    {
				get
		        {
					if(_Clientpacketscrypt_W == null)
	        	    {
						_Clientpacketscrypt_W = TearOff.Clientpacketscrypt;
					}
					return _Clientpacketscrypt_W;
				}
			}

			public WhereParameter Clientpacketsdata
		    {
				get
		        {
					if(_Clientpacketsdata_W == null)
	        	    {
						_Clientpacketsdata_W = TearOff.Clientpacketsdata;
					}
					return _Clientpacketsdata_W;
				}
			}

			public WhereParameter Clientpacketsweak
		    {
				get
		        {
					if(_Clientpacketsweak_W == null)
	        	    {
						_Clientpacketsweak_W = TearOff.Clientpacketsweak;
					}
					return _Clientpacketsweak_W;
				}
			}

			public WhereParameter Number
		    {
				get
		        {
					if(_Number_W == null)
	        	    {
						_Number_W = TearOff.Number;
					}
					return _Number_W;
				}
			}

			public WhereParameter Type
		    {
				get
		        {
					if(_Type_W == null)
	        	    {
						_Type_W = TearOff.Type;
					}
					return _Type_W;
				}
			}

			public WhereParameter Wep
		    {
				get
		        {
					if(_Wep_W == null)
	        	    {
						_Wep_W = TearOff.Wep;
					}
					return _Wep_W;
				}
			}

			private WhereParameter _Clientipaddress_W = null;
			private WhereParameter _Oui_W = null;
			private WhereParameter _Bssid_W = null;
			private WhereParameter _Clientmac_W = null;
			private WhereParameter _Clientencryption_W = null;
			private WhereParameter _Clientfirsttime_W = null;
			private WhereParameter _Clientgpsminlat_W = null;
			private WhereParameter _Clientgpsmaxlat_W = null;
			private WhereParameter _Clientgpsminlon_W = null;
			private WhereParameter _Clientgpsmaxlon_W = null;
			private WhereParameter _Clientgpsminalt_W = null;
			private WhereParameter _Clientgpsmaxalt_W = null;
			private WhereParameter _Clientgpsminspeed_W = null;
			private WhereParameter _Clientgpsmaxspeed_W = null;
			private WhereParameter _Clientdatasize_W = null;
			private WhereParameter _Clientmaxrate_W = null;
			private WhereParameter _Clientmaxseenrate_W = null;
			private WhereParameter _Clientlasttime_W = null;
			private WhereParameter _Clientpacketscrypt_W = null;
			private WhereParameter _Clientpacketsdata_W = null;
			private WhereParameter _Clientpacketsweak_W = null;
			private WhereParameter _Number_W = null;
			private WhereParameter _Type_W = null;
			private WhereParameter _Wep_W = null;

			public void WhereClauseReset()
			{
				_Clientipaddress_W = null;
				_Oui_W = null;
				_Bssid_W = null;
				_Clientmac_W = null;
				_Clientencryption_W = null;
				_Clientfirsttime_W = null;
				_Clientgpsminlat_W = null;
				_Clientgpsmaxlat_W = null;
				_Clientgpsminlon_W = null;
				_Clientgpsmaxlon_W = null;
				_Clientgpsminalt_W = null;
				_Clientgpsmaxalt_W = null;
				_Clientgpsminspeed_W = null;
				_Clientgpsmaxspeed_W = null;
				_Clientdatasize_W = null;
				_Clientmaxrate_W = null;
				_Clientmaxseenrate_W = null;
				_Clientlasttime_W = null;
				_Clientpacketscrypt_W = null;
				_Clientpacketsdata_W = null;
				_Clientpacketsweak_W = null;
				_Number_W = null;
				_Type_W = null;
				_Wep_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Clientipaddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientipaddress, Parameters.Clientipaddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Oui
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Oui, Parameters.Oui);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bssid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bssid, Parameters.Bssid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientmac
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientmac, Parameters.Clientmac);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientencryption
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientencryption, Parameters.Clientencryption);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientfirsttime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientfirsttime, Parameters.Clientfirsttime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientgpsminlat
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientgpsminlat, Parameters.Clientgpsminlat);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientgpsmaxlat
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientgpsmaxlat, Parameters.Clientgpsmaxlat);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientgpsminlon
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientgpsminlon, Parameters.Clientgpsminlon);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientgpsmaxlon
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientgpsmaxlon, Parameters.Clientgpsmaxlon);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientgpsminalt
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientgpsminalt, Parameters.Clientgpsminalt);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientgpsmaxalt
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientgpsmaxalt, Parameters.Clientgpsmaxalt);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientgpsminspeed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientgpsminspeed, Parameters.Clientgpsminspeed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientgpsmaxspeed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientgpsmaxspeed, Parameters.Clientgpsmaxspeed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientdatasize
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientdatasize, Parameters.Clientdatasize);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientmaxrate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientmaxrate, Parameters.Clientmaxrate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientmaxseenrate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientmaxseenrate, Parameters.Clientmaxseenrate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientlasttime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientlasttime, Parameters.Clientlasttime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientpacketscrypt
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientpacketscrypt, Parameters.Clientpacketscrypt);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientpacketsdata
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientpacketsdata, Parameters.Clientpacketsdata);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clientpacketsweak
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clientpacketsweak, Parameters.Clientpacketsweak);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Number
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Number, Parameters.Number);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Type
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Type, Parameters.Type);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Wep
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Wep, Parameters.Wep);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Clientipaddress
		    {
				get
		        {
					if(_Clientipaddress_W == null)
	        	    {
						_Clientipaddress_W = TearOff.Clientipaddress;
					}
					return _Clientipaddress_W;
				}
			}

			public AggregateParameter Oui
		    {
				get
		        {
					if(_Oui_W == null)
	        	    {
						_Oui_W = TearOff.Oui;
					}
					return _Oui_W;
				}
			}

			public AggregateParameter Bssid
		    {
				get
		        {
					if(_Bssid_W == null)
	        	    {
						_Bssid_W = TearOff.Bssid;
					}
					return _Bssid_W;
				}
			}

			public AggregateParameter Clientmac
		    {
				get
		        {
					if(_Clientmac_W == null)
	        	    {
						_Clientmac_W = TearOff.Clientmac;
					}
					return _Clientmac_W;
				}
			}

			public AggregateParameter Clientencryption
		    {
				get
		        {
					if(_Clientencryption_W == null)
	        	    {
						_Clientencryption_W = TearOff.Clientencryption;
					}
					return _Clientencryption_W;
				}
			}

			public AggregateParameter Clientfirsttime
		    {
				get
		        {
					if(_Clientfirsttime_W == null)
	        	    {
						_Clientfirsttime_W = TearOff.Clientfirsttime;
					}
					return _Clientfirsttime_W;
				}
			}

			public AggregateParameter Clientgpsminlat
		    {
				get
		        {
					if(_Clientgpsminlat_W == null)
	        	    {
						_Clientgpsminlat_W = TearOff.Clientgpsminlat;
					}
					return _Clientgpsminlat_W;
				}
			}

			public AggregateParameter Clientgpsmaxlat
		    {
				get
		        {
					if(_Clientgpsmaxlat_W == null)
	        	    {
						_Clientgpsmaxlat_W = TearOff.Clientgpsmaxlat;
					}
					return _Clientgpsmaxlat_W;
				}
			}

			public AggregateParameter Clientgpsminlon
		    {
				get
		        {
					if(_Clientgpsminlon_W == null)
	        	    {
						_Clientgpsminlon_W = TearOff.Clientgpsminlon;
					}
					return _Clientgpsminlon_W;
				}
			}

			public AggregateParameter Clientgpsmaxlon
		    {
				get
		        {
					if(_Clientgpsmaxlon_W == null)
	        	    {
						_Clientgpsmaxlon_W = TearOff.Clientgpsmaxlon;
					}
					return _Clientgpsmaxlon_W;
				}
			}

			public AggregateParameter Clientgpsminalt
		    {
				get
		        {
					if(_Clientgpsminalt_W == null)
	        	    {
						_Clientgpsminalt_W = TearOff.Clientgpsminalt;
					}
					return _Clientgpsminalt_W;
				}
			}

			public AggregateParameter Clientgpsmaxalt
		    {
				get
		        {
					if(_Clientgpsmaxalt_W == null)
	        	    {
						_Clientgpsmaxalt_W = TearOff.Clientgpsmaxalt;
					}
					return _Clientgpsmaxalt_W;
				}
			}

			public AggregateParameter Clientgpsminspeed
		    {
				get
		        {
					if(_Clientgpsminspeed_W == null)
	        	    {
						_Clientgpsminspeed_W = TearOff.Clientgpsminspeed;
					}
					return _Clientgpsminspeed_W;
				}
			}

			public AggregateParameter Clientgpsmaxspeed
		    {
				get
		        {
					if(_Clientgpsmaxspeed_W == null)
	        	    {
						_Clientgpsmaxspeed_W = TearOff.Clientgpsmaxspeed;
					}
					return _Clientgpsmaxspeed_W;
				}
			}

			public AggregateParameter Clientdatasize
		    {
				get
		        {
					if(_Clientdatasize_W == null)
	        	    {
						_Clientdatasize_W = TearOff.Clientdatasize;
					}
					return _Clientdatasize_W;
				}
			}

			public AggregateParameter Clientmaxrate
		    {
				get
		        {
					if(_Clientmaxrate_W == null)
	        	    {
						_Clientmaxrate_W = TearOff.Clientmaxrate;
					}
					return _Clientmaxrate_W;
				}
			}

			public AggregateParameter Clientmaxseenrate
		    {
				get
		        {
					if(_Clientmaxseenrate_W == null)
	        	    {
						_Clientmaxseenrate_W = TearOff.Clientmaxseenrate;
					}
					return _Clientmaxseenrate_W;
				}
			}

			public AggregateParameter Clientlasttime
		    {
				get
		        {
					if(_Clientlasttime_W == null)
	        	    {
						_Clientlasttime_W = TearOff.Clientlasttime;
					}
					return _Clientlasttime_W;
				}
			}

			public AggregateParameter Clientpacketscrypt
		    {
				get
		        {
					if(_Clientpacketscrypt_W == null)
	        	    {
						_Clientpacketscrypt_W = TearOff.Clientpacketscrypt;
					}
					return _Clientpacketscrypt_W;
				}
			}

			public AggregateParameter Clientpacketsdata
		    {
				get
		        {
					if(_Clientpacketsdata_W == null)
	        	    {
						_Clientpacketsdata_W = TearOff.Clientpacketsdata;
					}
					return _Clientpacketsdata_W;
				}
			}

			public AggregateParameter Clientpacketsweak
		    {
				get
		        {
					if(_Clientpacketsweak_W == null)
	        	    {
						_Clientpacketsweak_W = TearOff.Clientpacketsweak;
					}
					return _Clientpacketsweak_W;
				}
			}

			public AggregateParameter Number
		    {
				get
		        {
					if(_Number_W == null)
	        	    {
						_Number_W = TearOff.Number;
					}
					return _Number_W;
				}
			}

			public AggregateParameter Type
		    {
				get
		        {
					if(_Type_W == null)
	        	    {
						_Type_W = TearOff.Type;
					}
					return _Type_W;
				}
			}

			public AggregateParameter Wep
		    {
				get
		        {
					if(_Wep_W == null)
	        	    {
						_Wep_W = TearOff.Wep;
					}
					return _Wep_W;
				}
			}

			private AggregateParameter _Clientipaddress_W = null;
			private AggregateParameter _Oui_W = null;
			private AggregateParameter _Bssid_W = null;
			private AggregateParameter _Clientmac_W = null;
			private AggregateParameter _Clientencryption_W = null;
			private AggregateParameter _Clientfirsttime_W = null;
			private AggregateParameter _Clientgpsminlat_W = null;
			private AggregateParameter _Clientgpsmaxlat_W = null;
			private AggregateParameter _Clientgpsminlon_W = null;
			private AggregateParameter _Clientgpsmaxlon_W = null;
			private AggregateParameter _Clientgpsminalt_W = null;
			private AggregateParameter _Clientgpsmaxalt_W = null;
			private AggregateParameter _Clientgpsminspeed_W = null;
			private AggregateParameter _Clientgpsmaxspeed_W = null;
			private AggregateParameter _Clientdatasize_W = null;
			private AggregateParameter _Clientmaxrate_W = null;
			private AggregateParameter _Clientmaxseenrate_W = null;
			private AggregateParameter _Clientlasttime_W = null;
			private AggregateParameter _Clientpacketscrypt_W = null;
			private AggregateParameter _Clientpacketsdata_W = null;
			private AggregateParameter _Clientpacketsweak_W = null;
			private AggregateParameter _Number_W = null;
			private AggregateParameter _Type_W = null;
			private AggregateParameter _Wep_W = null;

			public void AggregateClauseReset()
			{
				_Clientipaddress_W = null;
				_Oui_W = null;
				_Bssid_W = null;
				_Clientmac_W = null;
				_Clientencryption_W = null;
				_Clientfirsttime_W = null;
				_Clientgpsminlat_W = null;
				_Clientgpsmaxlat_W = null;
				_Clientgpsminlon_W = null;
				_Clientgpsmaxlon_W = null;
				_Clientgpsminalt_W = null;
				_Clientgpsmaxalt_W = null;
				_Clientgpsminspeed_W = null;
				_Clientgpsmaxspeed_W = null;
				_Clientdatasize_W = null;
				_Clientmaxrate_W = null;
				_Clientmaxseenrate_W = null;
				_Clientlasttime_W = null;
				_Clientpacketscrypt_W = null;
				_Clientpacketsdata_W = null;
				_Clientpacketsweak_W = null;
				_Number_W = null;
				_Type_W = null;
				_Wep_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
			
		
		protected override IDbCommand GetInsertCommand()
		{
			SQLiteCommand cmd = new SQLiteCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
			@"INSERT INTO [Clients]
			(
				[Clientipaddress],
				[oui],
				[bssid],
				[clientmac],
				[clientencryption],
				[clientfirsttime],
				[clientgpsminlat],
				[clientgpsmaxlat],
				[clientgpsminlon],
				[clientgpsmaxlon],
				[clientgpsminalt],
				[clientgpsmaxalt],
				[clientgpsminspeed],
				[clientgpsmaxspeed],
				[clientdatasize],
				[clientmaxrate],
				[clientmaxseenrate],
				[clientlasttime],
				[clientpacketscrypt],
				[clientpacketsdata],
				[clientpacketsweak],
				[Number],
				[Type],
				[wep]
			)
			VALUES
			(
				@Clientipaddress,
				@oui,
				@bssid,
				@clientmac,
				@clientencryption,
				@clientfirsttime,
				@clientgpsminlat,
				@clientgpsmaxlat,
				@clientgpsminlon,
				@clientgpsmaxlon,
				@clientgpsminalt,
				@clientgpsmaxalt,
				@clientgpsminspeed,
				@clientgpsmaxspeed,
				@clientdatasize,
				@clientmaxrate,
				@clientmaxseenrate,
				@clientlasttime,
				@clientpacketscrypt,
				@clientpacketsdata,
				@clientpacketsweak,
				@Number,
				@Type,
				@wep
			)";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			SQLiteCommand cmd = new SQLiteCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText = 
			@"UPDATE [Clients] SET 
				[Clientipaddress]=@Clientipaddress,
				[oui]=@oui,
				[bssid]=@bssid,
				[clientencryption]=@clientencryption,
				[clientfirsttime]=@clientfirsttime,
				[clientgpsminlat]=@clientgpsminlat,
				[clientgpsmaxlat]=@clientgpsmaxlat,
				[clientgpsminlon]=@clientgpsminlon,
				[clientgpsmaxlon]=@clientgpsmaxlon,
				[clientgpsminalt]=@clientgpsminalt,
				[clientgpsmaxalt]=@clientgpsmaxalt,
				[clientgpsminspeed]=@clientgpsminspeed,
				[clientgpsmaxspeed]=@clientgpsmaxspeed,
				[clientdatasize]=@clientdatasize,
				[clientmaxrate]=@clientmaxrate,
				[clientmaxseenrate]=@clientmaxseenrate,
				[clientlasttime]=@clientlasttime,
				[clientpacketscrypt]=@clientpacketscrypt,
				[clientpacketsdata]=@clientpacketsdata,
				[clientpacketsweak]=@clientpacketsweak,
				[Number]=@Number,
				[Type]=@Type,
				[wep]=@wep
			WHERE
				[clientmac]=@clientmac";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			SQLiteCommand cmd = new SQLiteCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
			@"DELETE FROM [Clients] 
			WHERE
				[clientmac]=@clientmac";

	
			SQLiteParameter p;
			p = cmd.Parameters.Add(Parameters.Clientmac);
			p.SourceColumn = ColumnNames.Clientmac;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SQLiteCommand cmd)
		{
			SQLiteParameter p;
		
			p = cmd.Parameters.Add(Parameters.Clientipaddress);
			p.SourceColumn = ColumnNames.Clientipaddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Oui);
			p.SourceColumn = ColumnNames.Oui;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bssid);
			p.SourceColumn = ColumnNames.Bssid;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientmac);
			p.SourceColumn = ColumnNames.Clientmac;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientencryption);
			p.SourceColumn = ColumnNames.Clientencryption;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientfirsttime);
			p.SourceColumn = ColumnNames.Clientfirsttime;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientgpsminlat);
			p.SourceColumn = ColumnNames.Clientgpsminlat;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientgpsmaxlat);
			p.SourceColumn = ColumnNames.Clientgpsmaxlat;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientgpsminlon);
			p.SourceColumn = ColumnNames.Clientgpsminlon;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientgpsmaxlon);
			p.SourceColumn = ColumnNames.Clientgpsmaxlon;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientgpsminalt);
			p.SourceColumn = ColumnNames.Clientgpsminalt;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientgpsmaxalt);
			p.SourceColumn = ColumnNames.Clientgpsmaxalt;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientgpsminspeed);
			p.SourceColumn = ColumnNames.Clientgpsminspeed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientgpsmaxspeed);
			p.SourceColumn = ColumnNames.Clientgpsmaxspeed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientdatasize);
			p.SourceColumn = ColumnNames.Clientdatasize;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientmaxrate);
			p.SourceColumn = ColumnNames.Clientmaxrate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientmaxseenrate);
			p.SourceColumn = ColumnNames.Clientmaxseenrate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientlasttime);
			p.SourceColumn = ColumnNames.Clientlasttime;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientpacketscrypt);
			p.SourceColumn = ColumnNames.Clientpacketscrypt;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientpacketsdata);
			p.SourceColumn = ColumnNames.Clientpacketsdata;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clientpacketsweak);
			p.SourceColumn = ColumnNames.Clientpacketsweak;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Number);
			p.SourceColumn = ColumnNames.Number;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Type);
			p.SourceColumn = ColumnNames.Type;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Wep);
			p.SourceColumn = ColumnNames.Wep;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}		
		
	
	}
}
