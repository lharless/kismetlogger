//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace KismetLogger {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("KismetData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class KismetData : global::System.Data.DataSet {
        
        private DatanewDataTable tableDatanew;
        
        private GPSDatanewDataTable tableGPSDatanew;
        
        private ClientsDataTable tableClients;
        
        private statsDataTable tablestats;
        
        private FilesDataTable tableFiles;
        
        private bssidclientcountDataTable tablebssidclientcount;
        
        private ophensDataTable tableophens;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public KismetData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected KismetData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Datanew"] != null)) {
                    base.Tables.Add(new DatanewDataTable(ds.Tables["Datanew"]));
                }
                if ((ds.Tables["GPSDatanew"] != null)) {
                    base.Tables.Add(new GPSDatanewDataTable(ds.Tables["GPSDatanew"]));
                }
                if ((ds.Tables["Clients"] != null)) {
                    base.Tables.Add(new ClientsDataTable(ds.Tables["Clients"]));
                }
                if ((ds.Tables["stats"] != null)) {
                    base.Tables.Add(new statsDataTable(ds.Tables["stats"]));
                }
                if ((ds.Tables["Files"] != null)) {
                    base.Tables.Add(new FilesDataTable(ds.Tables["Files"]));
                }
                if ((ds.Tables["bssidclientcount"] != null)) {
                    base.Tables.Add(new bssidclientcountDataTable(ds.Tables["bssidclientcount"]));
                }
                if ((ds.Tables["ophens"] != null)) {
                    base.Tables.Add(new ophensDataTable(ds.Tables["ophens"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DatanewDataTable Datanew {
            get {
                return this.tableDatanew;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GPSDatanewDataTable GPSDatanew {
            get {
                return this.tableGPSDatanew;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientsDataTable Clients {
            get {
                return this.tableClients;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public statsDataTable stats {
            get {
                return this.tablestats;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FilesDataTable Files {
            get {
                return this.tableFiles;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public bssidclientcountDataTable bssidclientcount {
            get {
                return this.tablebssidclientcount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ophensDataTable ophens {
            get {
                return this.tableophens;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            KismetData cln = ((KismetData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Datanew"] != null)) {
                    base.Tables.Add(new DatanewDataTable(ds.Tables["Datanew"]));
                }
                if ((ds.Tables["GPSDatanew"] != null)) {
                    base.Tables.Add(new GPSDatanewDataTable(ds.Tables["GPSDatanew"]));
                }
                if ((ds.Tables["Clients"] != null)) {
                    base.Tables.Add(new ClientsDataTable(ds.Tables["Clients"]));
                }
                if ((ds.Tables["stats"] != null)) {
                    base.Tables.Add(new statsDataTable(ds.Tables["stats"]));
                }
                if ((ds.Tables["Files"] != null)) {
                    base.Tables.Add(new FilesDataTable(ds.Tables["Files"]));
                }
                if ((ds.Tables["bssidclientcount"] != null)) {
                    base.Tables.Add(new bssidclientcountDataTable(ds.Tables["bssidclientcount"]));
                }
                if ((ds.Tables["ophens"] != null)) {
                    base.Tables.Add(new ophensDataTable(ds.Tables["ophens"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDatanew = ((DatanewDataTable)(base.Tables["Datanew"]));
            if ((initTable == true)) {
                if ((this.tableDatanew != null)) {
                    this.tableDatanew.InitVars();
                }
            }
            this.tableGPSDatanew = ((GPSDatanewDataTable)(base.Tables["GPSDatanew"]));
            if ((initTable == true)) {
                if ((this.tableGPSDatanew != null)) {
                    this.tableGPSDatanew.InitVars();
                }
            }
            this.tableClients = ((ClientsDataTable)(base.Tables["Clients"]));
            if ((initTable == true)) {
                if ((this.tableClients != null)) {
                    this.tableClients.InitVars();
                }
            }
            this.tablestats = ((statsDataTable)(base.Tables["stats"]));
            if ((initTable == true)) {
                if ((this.tablestats != null)) {
                    this.tablestats.InitVars();
                }
            }
            this.tableFiles = ((FilesDataTable)(base.Tables["Files"]));
            if ((initTable == true)) {
                if ((this.tableFiles != null)) {
                    this.tableFiles.InitVars();
                }
            }
            this.tablebssidclientcount = ((bssidclientcountDataTable)(base.Tables["bssidclientcount"]));
            if ((initTable == true)) {
                if ((this.tablebssidclientcount != null)) {
                    this.tablebssidclientcount.InitVars();
                }
            }
            this.tableophens = ((ophensDataTable)(base.Tables["ophens"]));
            if ((initTable == true)) {
                if ((this.tableophens != null)) {
                    this.tableophens.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "KismetData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/KismetData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDatanew = new DatanewDataTable();
            base.Tables.Add(this.tableDatanew);
            this.tableGPSDatanew = new GPSDatanewDataTable();
            base.Tables.Add(this.tableGPSDatanew);
            this.tableClients = new ClientsDataTable();
            base.Tables.Add(this.tableClients);
            this.tablestats = new statsDataTable();
            base.Tables.Add(this.tablestats);
            this.tableFiles = new FilesDataTable();
            base.Tables.Add(this.tableFiles);
            this.tablebssidclientcount = new bssidclientcountDataTable();
            base.Tables.Add(this.tablebssidclientcount);
            this.tableophens = new ophensDataTable();
            base.Tables.Add(this.tableophens);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDatanew() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGPSDatanew() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClients() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializestats() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFiles() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializebssidclientcount() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeophens() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            KismetData ds = new KismetData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DatanewRowChangeEventHandler(object sender, DatanewRowChangeEvent e);
        
        public delegate void GPSDatanewRowChangeEventHandler(object sender, GPSDatanewRowChangeEvent e);
        
        public delegate void ClientsRowChangeEventHandler(object sender, ClientsRowChangeEvent e);
        
        public delegate void statsRowChangeEventHandler(object sender, statsRowChangeEvent e);
        
        public delegate void FilesRowChangeEventHandler(object sender, FilesRowChangeEvent e);
        
        public delegate void bssidclientcountRowChangeEventHandler(object sender, bssidclientcountRowChangeEvent e);
        
        public delegate void ophensRowChangeEventHandler(object sender, ophensRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DatanewDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnoui;
            
            private global::System.Data.DataColumn columntotalpacketsweak;
            
            private global::System.Data.DataColumn columntotalpacketstotal;
            
            private global::System.Data.DataColumn columntotalpacketsllc;
            
            private global::System.Data.DataColumn columntotalpacketsdupeiv;
            
            private global::System.Data.DataColumn columntotalpacketsdata;
            
            private global::System.Data.DataColumn columntotalpacketscrypt;
            
            private global::System.Data.DataColumn columnNetwork;
            
            private global::System.Data.DataColumn columnNetType;
            
            private global::System.Data.DataColumn columnESSID;
            
            private global::System.Data.DataColumn columnBSSID;
            
            private global::System.Data.DataColumn columnInfo;
            
            private global::System.Data.DataColumn columnChannel;
            
            private global::System.Data.DataColumn columnCloaked;
            
            private global::System.Data.DataColumn columnEncryption;
            
            private global::System.Data.DataColumn columnDecrypted;
            
            private global::System.Data.DataColumn columnMaxRate;
            
            private global::System.Data.DataColumn columnMaxSeenRate;
            
            private global::System.Data.DataColumn columnBeacon;
            
            private global::System.Data.DataColumn columnLLC;
            
            private global::System.Data.DataColumn columnData;
            
            private global::System.Data.DataColumn columnCrypt;
            
            private global::System.Data.DataColumn columnWeak;
            
            private global::System.Data.DataColumn columnTotal;
            
            private global::System.Data.DataColumn columnCarrier;
            
            private global::System.Data.DataColumn columnEncoding;
            
            private global::System.Data.DataColumn columnFirstTime;
            
            private global::System.Data.DataColumn columnLastTime;
            
            private global::System.Data.DataColumn columnBestQuality;
            
            private global::System.Data.DataColumn columnBestSignal;
            
            private global::System.Data.DataColumn columnBestNoise;
            
            private global::System.Data.DataColumn columnGPSMinLat;
            
            private global::System.Data.DataColumn columnGPSMinLon;
            
            private global::System.Data.DataColumn columnGPSMinAlt;
            
            private global::System.Data.DataColumn columnGPSMinSpd;
            
            private global::System.Data.DataColumn columnGPSMaxLat;
            
            private global::System.Data.DataColumn columnGPSMaxLon;
            
            private global::System.Data.DataColumn columnGPSMaxAlt;
            
            private global::System.Data.DataColumn columnGPSMaxSpd;
            
            private global::System.Data.DataColumn columnGPSBestLat;
            
            private global::System.Data.DataColumn columnGPSBestLon;
            
            private global::System.Data.DataColumn columnGPSBestAlt;
            
            private global::System.Data.DataColumn columnDatasize;
            
            private global::System.Data.DataColumn columnIPType;
            
            private global::System.Data.DataColumn columnIP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DatanewDataTable() {
                this.TableName = "Datanew";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DatanewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DatanewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ouiColumn {
                get {
                    return this.columnoui;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalpacketsweakColumn {
                get {
                    return this.columntotalpacketsweak;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalpacketstotalColumn {
                get {
                    return this.columntotalpacketstotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalpacketsllcColumn {
                get {
                    return this.columntotalpacketsllc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalpacketsdupeivColumn {
                get {
                    return this.columntotalpacketsdupeiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalpacketsdataColumn {
                get {
                    return this.columntotalpacketsdata;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalpacketscryptColumn {
                get {
                    return this.columntotalpacketscrypt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NetworkColumn {
                get {
                    return this.columnNetwork;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NetTypeColumn {
                get {
                    return this.columnNetType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ESSIDColumn {
                get {
                    return this.columnESSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BSSIDColumn {
                get {
                    return this.columnBSSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfoColumn {
                get {
                    return this.columnInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChannelColumn {
                get {
                    return this.columnChannel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CloakedColumn {
                get {
                    return this.columnCloaked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EncryptionColumn {
                get {
                    return this.columnEncryption;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DecryptedColumn {
                get {
                    return this.columnDecrypted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxRateColumn {
                get {
                    return this.columnMaxRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxSeenRateColumn {
                get {
                    return this.columnMaxSeenRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BeaconColumn {
                get {
                    return this.columnBeacon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LLCColumn {
                get {
                    return this.columnLLC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CryptColumn {
                get {
                    return this.columnCrypt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeakColumn {
                get {
                    return this.columnWeak;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CarrierColumn {
                get {
                    return this.columnCarrier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EncodingColumn {
                get {
                    return this.columnEncoding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstTimeColumn {
                get {
                    return this.columnFirstTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastTimeColumn {
                get {
                    return this.columnLastTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BestQualityColumn {
                get {
                    return this.columnBestQuality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BestSignalColumn {
                get {
                    return this.columnBestSignal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BestNoiseColumn {
                get {
                    return this.columnBestNoise;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPSMinLatColumn {
                get {
                    return this.columnGPSMinLat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPSMinLonColumn {
                get {
                    return this.columnGPSMinLon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPSMinAltColumn {
                get {
                    return this.columnGPSMinAlt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPSMinSpdColumn {
                get {
                    return this.columnGPSMinSpd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPSMaxLatColumn {
                get {
                    return this.columnGPSMaxLat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPSMaxLonColumn {
                get {
                    return this.columnGPSMaxLon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPSMaxAltColumn {
                get {
                    return this.columnGPSMaxAlt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPSMaxSpdColumn {
                get {
                    return this.columnGPSMaxSpd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPSBestLatColumn {
                get {
                    return this.columnGPSBestLat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPSBestLonColumn {
                get {
                    return this.columnGPSBestLon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPSBestAltColumn {
                get {
                    return this.columnGPSBestAlt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DatasizeColumn {
                get {
                    return this.columnDatasize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPTypeColumn {
                get {
                    return this.columnIPType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPColumn {
                get {
                    return this.columnIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DatanewRow this[int index] {
                get {
                    return ((DatanewRow)(this.Rows[index]));
                }
            }
            
            public event DatanewRowChangeEventHandler DatanewRowChanging;
            
            public event DatanewRowChangeEventHandler DatanewRowChanged;
            
            public event DatanewRowChangeEventHandler DatanewRowDeleting;
            
            public event DatanewRowChangeEventHandler DatanewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDatanewRow(DatanewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DatanewRow AddDatanewRow(
                        string oui, 
                        decimal totalpacketsweak, 
                        decimal totalpacketstotal, 
                        decimal totalpacketsllc, 
                        decimal totalpacketsdupeiv, 
                        decimal totalpacketsdata, 
                        decimal totalpacketscrypt, 
                        string Network, 
                        string NetType, 
                        string ESSID, 
                        string BSSID, 
                        string Info, 
                        decimal Channel, 
                        string Cloaked, 
                        string Encryption, 
                        string Decrypted, 
                        decimal MaxRate, 
                        decimal MaxSeenRate, 
                        string Beacon, 
                        string LLC, 
                        string Data, 
                        string Crypt, 
                        decimal Weak, 
                        decimal Total, 
                        decimal Carrier, 
                        string Encoding, 
                        string FirstTime, 
                        string LastTime, 
                        string BestQuality, 
                        decimal BestSignal, 
                        decimal BestNoise, 
                        decimal GPSMinLat, 
                        decimal GPSMinLon, 
                        decimal GPSMinAlt, 
                        decimal GPSMinSpd, 
                        decimal GPSMaxLat, 
                        decimal GPSMaxLon, 
                        decimal GPSMaxAlt, 
                        decimal GPSMaxSpd, 
                        decimal GPSBestLat, 
                        decimal GPSBestLon, 
                        decimal GPSBestAlt, 
                        string Datasize, 
                        string IPType, 
                        string IP) {
                DatanewRow rowDatanewRow = ((DatanewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        oui,
                        totalpacketsweak,
                        totalpacketstotal,
                        totalpacketsllc,
                        totalpacketsdupeiv,
                        totalpacketsdata,
                        totalpacketscrypt,
                        Network,
                        NetType,
                        ESSID,
                        BSSID,
                        Info,
                        Channel,
                        Cloaked,
                        Encryption,
                        Decrypted,
                        MaxRate,
                        MaxSeenRate,
                        Beacon,
                        LLC,
                        Data,
                        Crypt,
                        Weak,
                        Total,
                        Carrier,
                        Encoding,
                        FirstTime,
                        LastTime,
                        BestQuality,
                        BestSignal,
                        BestNoise,
                        GPSMinLat,
                        GPSMinLon,
                        GPSMinAlt,
                        GPSMinSpd,
                        GPSMaxLat,
                        GPSMaxLon,
                        GPSMaxAlt,
                        GPSMaxSpd,
                        GPSBestLat,
                        GPSBestLon,
                        GPSBestAlt,
                        Datasize,
                        IPType,
                        IP};
                rowDatanewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDatanewRow);
                return rowDatanewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DatanewRow FindByBSSID(string BSSID) {
                return ((DatanewRow)(this.Rows.Find(new object[] {
                            BSSID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DatanewDataTable cln = ((DatanewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DatanewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnoui = base.Columns["oui"];
                this.columntotalpacketsweak = base.Columns["totalpacketsweak"];
                this.columntotalpacketstotal = base.Columns["totalpacketstotal"];
                this.columntotalpacketsllc = base.Columns["totalpacketsllc"];
                this.columntotalpacketsdupeiv = base.Columns["totalpacketsdupeiv"];
                this.columntotalpacketsdata = base.Columns["totalpacketsdata"];
                this.columntotalpacketscrypt = base.Columns["totalpacketscrypt"];
                this.columnNetwork = base.Columns["Network"];
                this.columnNetType = base.Columns["NetType"];
                this.columnESSID = base.Columns["ESSID"];
                this.columnBSSID = base.Columns["BSSID"];
                this.columnInfo = base.Columns["Info"];
                this.columnChannel = base.Columns["Channel"];
                this.columnCloaked = base.Columns["Cloaked"];
                this.columnEncryption = base.Columns["Encryption"];
                this.columnDecrypted = base.Columns["Decrypted"];
                this.columnMaxRate = base.Columns["MaxRate"];
                this.columnMaxSeenRate = base.Columns["MaxSeenRate"];
                this.columnBeacon = base.Columns["Beacon"];
                this.columnLLC = base.Columns["LLC"];
                this.columnData = base.Columns["Data"];
                this.columnCrypt = base.Columns["Crypt"];
                this.columnWeak = base.Columns["Weak"];
                this.columnTotal = base.Columns["Total"];
                this.columnCarrier = base.Columns["Carrier"];
                this.columnEncoding = base.Columns["Encoding"];
                this.columnFirstTime = base.Columns["FirstTime"];
                this.columnLastTime = base.Columns["LastTime"];
                this.columnBestQuality = base.Columns["BestQuality"];
                this.columnBestSignal = base.Columns["BestSignal"];
                this.columnBestNoise = base.Columns["BestNoise"];
                this.columnGPSMinLat = base.Columns["GPSMinLat"];
                this.columnGPSMinLon = base.Columns["GPSMinLon"];
                this.columnGPSMinAlt = base.Columns["GPSMinAlt"];
                this.columnGPSMinSpd = base.Columns["GPSMinSpd"];
                this.columnGPSMaxLat = base.Columns["GPSMaxLat"];
                this.columnGPSMaxLon = base.Columns["GPSMaxLon"];
                this.columnGPSMaxAlt = base.Columns["GPSMaxAlt"];
                this.columnGPSMaxSpd = base.Columns["GPSMaxSpd"];
                this.columnGPSBestLat = base.Columns["GPSBestLat"];
                this.columnGPSBestLon = base.Columns["GPSBestLon"];
                this.columnGPSBestAlt = base.Columns["GPSBestAlt"];
                this.columnDatasize = base.Columns["Datasize"];
                this.columnIPType = base.Columns["IPType"];
                this.columnIP = base.Columns["IP"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnoui = new global::System.Data.DataColumn("oui", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoui);
                this.columntotalpacketsweak = new global::System.Data.DataColumn("totalpacketsweak", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalpacketsweak);
                this.columntotalpacketstotal = new global::System.Data.DataColumn("totalpacketstotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalpacketstotal);
                this.columntotalpacketsllc = new global::System.Data.DataColumn("totalpacketsllc", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalpacketsllc);
                this.columntotalpacketsdupeiv = new global::System.Data.DataColumn("totalpacketsdupeiv", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalpacketsdupeiv);
                this.columntotalpacketsdata = new global::System.Data.DataColumn("totalpacketsdata", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalpacketsdata);
                this.columntotalpacketscrypt = new global::System.Data.DataColumn("totalpacketscrypt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalpacketscrypt);
                this.columnNetwork = new global::System.Data.DataColumn("Network", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetwork);
                this.columnNetType = new global::System.Data.DataColumn("NetType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetType);
                this.columnESSID = new global::System.Data.DataColumn("ESSID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnESSID);
                this.columnBSSID = new global::System.Data.DataColumn("BSSID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBSSID);
                this.columnInfo = new global::System.Data.DataColumn("Info", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfo);
                this.columnChannel = new global::System.Data.DataColumn("Channel", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChannel);
                this.columnCloaked = new global::System.Data.DataColumn("Cloaked", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCloaked);
                this.columnEncryption = new global::System.Data.DataColumn("Encryption", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEncryption);
                this.columnDecrypted = new global::System.Data.DataColumn("Decrypted", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDecrypted);
                this.columnMaxRate = new global::System.Data.DataColumn("MaxRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxRate);
                this.columnMaxSeenRate = new global::System.Data.DataColumn("MaxSeenRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxSeenRate);
                this.columnBeacon = new global::System.Data.DataColumn("Beacon", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBeacon);
                this.columnLLC = new global::System.Data.DataColumn("LLC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLLC);
                this.columnData = new global::System.Data.DataColumn("Data", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnData);
                this.columnCrypt = new global::System.Data.DataColumn("Crypt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrypt);
                this.columnWeak = new global::System.Data.DataColumn("Weak", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeak);
                this.columnTotal = new global::System.Data.DataColumn("Total", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnCarrier = new global::System.Data.DataColumn("Carrier", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarrier);
                this.columnEncoding = new global::System.Data.DataColumn("Encoding", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEncoding);
                this.columnFirstTime = new global::System.Data.DataColumn("FirstTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstTime);
                this.columnLastTime = new global::System.Data.DataColumn("LastTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastTime);
                this.columnBestQuality = new global::System.Data.DataColumn("BestQuality", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBestQuality);
                this.columnBestSignal = new global::System.Data.DataColumn("BestSignal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBestSignal);
                this.columnBestNoise = new global::System.Data.DataColumn("BestNoise", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBestNoise);
                this.columnGPSMinLat = new global::System.Data.DataColumn("GPSMinLat", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSMinLat);
                this.columnGPSMinLon = new global::System.Data.DataColumn("GPSMinLon", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSMinLon);
                this.columnGPSMinAlt = new global::System.Data.DataColumn("GPSMinAlt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSMinAlt);
                this.columnGPSMinSpd = new global::System.Data.DataColumn("GPSMinSpd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSMinSpd);
                this.columnGPSMaxLat = new global::System.Data.DataColumn("GPSMaxLat", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSMaxLat);
                this.columnGPSMaxLon = new global::System.Data.DataColumn("GPSMaxLon", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSMaxLon);
                this.columnGPSMaxAlt = new global::System.Data.DataColumn("GPSMaxAlt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSMaxAlt);
                this.columnGPSMaxSpd = new global::System.Data.DataColumn("GPSMaxSpd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSMaxSpd);
                this.columnGPSBestLat = new global::System.Data.DataColumn("GPSBestLat", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSBestLat);
                this.columnGPSBestLon = new global::System.Data.DataColumn("GPSBestLon", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSBestLon);
                this.columnGPSBestAlt = new global::System.Data.DataColumn("GPSBestAlt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSBestAlt);
                this.columnDatasize = new global::System.Data.DataColumn("Datasize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatasize);
                this.columnIPType = new global::System.Data.DataColumn("IPType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPType);
                this.columnIP = new global::System.Data.DataColumn("IP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIP);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnBSSID}, true));
                this.columnoui.MaxLength = 2147483647;
                this.columnNetwork.MaxLength = 2147483647;
                this.columnNetType.MaxLength = 2147483647;
                this.columnESSID.MaxLength = 2147483647;
                this.columnBSSID.AllowDBNull = false;
                this.columnBSSID.Unique = true;
                this.columnBSSID.MaxLength = 2147483647;
                this.columnInfo.MaxLength = 2147483647;
                this.columnCloaked.MaxLength = 2147483647;
                this.columnEncryption.MaxLength = 2147483647;
                this.columnDecrypted.MaxLength = 2147483647;
                this.columnBeacon.MaxLength = 2147483647;
                this.columnLLC.MaxLength = 2147483647;
                this.columnData.MaxLength = 2147483647;
                this.columnCrypt.MaxLength = 2147483647;
                this.columnEncoding.MaxLength = 2147483647;
                this.columnFirstTime.MaxLength = 2147483647;
                this.columnLastTime.MaxLength = 2147483647;
                this.columnBestQuality.MaxLength = 2147483647;
                this.columnDatasize.MaxLength = 2147483647;
                this.columnIPType.MaxLength = 2147483647;
                this.columnIP.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DatanewRow NewDatanewRow() {
                return ((DatanewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DatanewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DatanewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DatanewRowChanged != null)) {
                    this.DatanewRowChanged(this, new DatanewRowChangeEvent(((DatanewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DatanewRowChanging != null)) {
                    this.DatanewRowChanging(this, new DatanewRowChangeEvent(((DatanewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DatanewRowDeleted != null)) {
                    this.DatanewRowDeleted(this, new DatanewRowChangeEvent(((DatanewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DatanewRowDeleting != null)) {
                    this.DatanewRowDeleting(this, new DatanewRowChangeEvent(((DatanewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDatanewRow(DatanewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                KismetData ds = new KismetData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DatanewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GPSDatanewDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnbssid;
            
            private global::System.Data.DataColumn columnsource;
            
            private global::System.Data.DataColumn columntimesec;
            
            private global::System.Data.DataColumn columntimeusec;
            
            private global::System.Data.DataColumn columnlat;
            
            private global::System.Data.DataColumn columnlon;
            
            private global::System.Data.DataColumn columnalt;
            
            private global::System.Data.DataColumn columnspeed;
            
            private global::System.Data.DataColumn columnheading;
            
            private global::System.Data.DataColumn columnfix;
            
            private global::System.Data.DataColumn columnsignal;
            
            private global::System.Data.DataColumn columnquality;
            
            private global::System.Data.DataColumn columnnoise;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GPSDatanewDataTable() {
                this.TableName = "GPSDatanew";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GPSDatanewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GPSDatanewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bssidColumn {
                get {
                    return this.columnbssid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceColumn {
                get {
                    return this.columnsource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn timesecColumn {
                get {
                    return this.columntimesec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn timeusecColumn {
                get {
                    return this.columntimeusec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn latColumn {
                get {
                    return this.columnlat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lonColumn {
                get {
                    return this.columnlon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn altColumn {
                get {
                    return this.columnalt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn speedColumn {
                get {
                    return this.columnspeed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headingColumn {
                get {
                    return this.columnheading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fixColumn {
                get {
                    return this.columnfix;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn signalColumn {
                get {
                    return this.columnsignal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn qualityColumn {
                get {
                    return this.columnquality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noiseColumn {
                get {
                    return this.columnnoise;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GPSDatanewRow this[int index] {
                get {
                    return ((GPSDatanewRow)(this.Rows[index]));
                }
            }
            
            public event GPSDatanewRowChangeEventHandler GPSDatanewRowChanging;
            
            public event GPSDatanewRowChangeEventHandler GPSDatanewRowChanged;
            
            public event GPSDatanewRowChangeEventHandler GPSDatanewRowDeleting;
            
            public event GPSDatanewRowChangeEventHandler GPSDatanewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGPSDatanewRow(GPSDatanewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GPSDatanewRow AddGPSDatanewRow(string bssid, string source, decimal timesec, string timeusec, decimal lat, decimal lon, decimal alt, decimal speed, decimal heading, string fix, decimal signal, decimal quality, decimal noise) {
                GPSDatanewRow rowGPSDatanewRow = ((GPSDatanewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        bssid,
                        source,
                        timesec,
                        timeusec,
                        lat,
                        lon,
                        alt,
                        speed,
                        heading,
                        fix,
                        signal,
                        quality,
                        noise};
                rowGPSDatanewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGPSDatanewRow);
                return rowGPSDatanewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GPSDatanewRow FindBybssid(string bssid) {
                return ((GPSDatanewRow)(this.Rows.Find(new object[] {
                            bssid})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GPSDatanewDataTable cln = ((GPSDatanewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GPSDatanewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnbssid = base.Columns["bssid"];
                this.columnsource = base.Columns["source"];
                this.columntimesec = base.Columns["timesec"];
                this.columntimeusec = base.Columns["timeusec"];
                this.columnlat = base.Columns["lat"];
                this.columnlon = base.Columns["lon"];
                this.columnalt = base.Columns["alt"];
                this.columnspeed = base.Columns["speed"];
                this.columnheading = base.Columns["heading"];
                this.columnfix = base.Columns["fix"];
                this.columnsignal = base.Columns["signal"];
                this.columnquality = base.Columns["quality"];
                this.columnnoise = base.Columns["noise"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnbssid = new global::System.Data.DataColumn("bssid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbssid);
                this.columnsource = new global::System.Data.DataColumn("source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource);
                this.columntimesec = new global::System.Data.DataColumn("timesec", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntimesec);
                this.columntimeusec = new global::System.Data.DataColumn("timeusec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntimeusec);
                this.columnlat = new global::System.Data.DataColumn("lat", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlat);
                this.columnlon = new global::System.Data.DataColumn("lon", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlon);
                this.columnalt = new global::System.Data.DataColumn("alt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnalt);
                this.columnspeed = new global::System.Data.DataColumn("speed", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnspeed);
                this.columnheading = new global::System.Data.DataColumn("heading", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheading);
                this.columnfix = new global::System.Data.DataColumn("fix", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfix);
                this.columnsignal = new global::System.Data.DataColumn("signal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsignal);
                this.columnquality = new global::System.Data.DataColumn("quality", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnquality);
                this.columnnoise = new global::System.Data.DataColumn("noise", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnoise);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnbssid}, true));
                this.columnbssid.AllowDBNull = false;
                this.columnbssid.Unique = true;
                this.columnbssid.MaxLength = 2147483647;
                this.columnsource.MaxLength = 2147483647;
                this.columntimeusec.MaxLength = 2147483647;
                this.columnfix.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GPSDatanewRow NewGPSDatanewRow() {
                return ((GPSDatanewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GPSDatanewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GPSDatanewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GPSDatanewRowChanged != null)) {
                    this.GPSDatanewRowChanged(this, new GPSDatanewRowChangeEvent(((GPSDatanewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GPSDatanewRowChanging != null)) {
                    this.GPSDatanewRowChanging(this, new GPSDatanewRowChangeEvent(((GPSDatanewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GPSDatanewRowDeleted != null)) {
                    this.GPSDatanewRowDeleted(this, new GPSDatanewRowChangeEvent(((GPSDatanewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GPSDatanewRowDeleting != null)) {
                    this.GPSDatanewRowDeleting(this, new GPSDatanewRowChangeEvent(((GPSDatanewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGPSDatanewRow(GPSDatanewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                KismetData ds = new KismetData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GPSDatanewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientipaddress;
            
            private global::System.Data.DataColumn columnoui;
            
            private global::System.Data.DataColumn columnbssid;
            
            private global::System.Data.DataColumn columnclientmac;
            
            private global::System.Data.DataColumn columnclientencryption;
            
            private global::System.Data.DataColumn columnclientfirsttime;
            
            private global::System.Data.DataColumn columnclientgpsminlat;
            
            private global::System.Data.DataColumn columnclientgpsminlon;
            
            private global::System.Data.DataColumn columnclientgpsmaxlat;
            
            private global::System.Data.DataColumn columnclientgpsmaxlon;
            
            private global::System.Data.DataColumn columnclientgpsminalt;
            
            private global::System.Data.DataColumn columnclientgpsmaxalt;
            
            private global::System.Data.DataColumn columnclientgpsminspeed;
            
            private global::System.Data.DataColumn columnclientgpsmaxspeed;
            
            private global::System.Data.DataColumn columnclientdatasize;
            
            private global::System.Data.DataColumn columnclientmaxrate;
            
            private global::System.Data.DataColumn columnclientmaxseenrate;
            
            private global::System.Data.DataColumn columnclientlasttime;
            
            private global::System.Data.DataColumn columnclientpacketscrypt;
            
            private global::System.Data.DataColumn columnclientpacketsdata;
            
            private global::System.Data.DataColumn columnclientpacketsweak;
            
            private global::System.Data.DataColumn columnNumber;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnwep;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsDataTable() {
                this.TableName = "Clients";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClientsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientipaddressColumn {
                get {
                    return this.columnClientipaddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ouiColumn {
                get {
                    return this.columnoui;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bssidColumn {
                get {
                    return this.columnbssid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientmacColumn {
                get {
                    return this.columnclientmac;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientencryptionColumn {
                get {
                    return this.columnclientencryption;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientfirsttimeColumn {
                get {
                    return this.columnclientfirsttime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientgpsminlatColumn {
                get {
                    return this.columnclientgpsminlat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientgpsminlonColumn {
                get {
                    return this.columnclientgpsminlon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientgpsmaxlatColumn {
                get {
                    return this.columnclientgpsmaxlat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientgpsmaxlonColumn {
                get {
                    return this.columnclientgpsmaxlon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientgpsminaltColumn {
                get {
                    return this.columnclientgpsminalt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientgpsmaxaltColumn {
                get {
                    return this.columnclientgpsmaxalt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientgpsminspeedColumn {
                get {
                    return this.columnclientgpsminspeed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientgpsmaxspeedColumn {
                get {
                    return this.columnclientgpsmaxspeed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientdatasizeColumn {
                get {
                    return this.columnclientdatasize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientmaxrateColumn {
                get {
                    return this.columnclientmaxrate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientmaxseenrateColumn {
                get {
                    return this.columnclientmaxseenrate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientlasttimeColumn {
                get {
                    return this.columnclientlasttime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientpacketscryptColumn {
                get {
                    return this.columnclientpacketscrypt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientpacketsdataColumn {
                get {
                    return this.columnclientpacketsdata;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientpacketsweakColumn {
                get {
                    return this.columnclientpacketsweak;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn wepColumn {
                get {
                    return this.columnwep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow this[int index] {
                get {
                    return ((ClientsRow)(this.Rows[index]));
                }
            }
            
            public event ClientsRowChangeEventHandler ClientsRowChanging;
            
            public event ClientsRowChangeEventHandler ClientsRowChanged;
            
            public event ClientsRowChangeEventHandler ClientsRowDeleting;
            
            public event ClientsRowChangeEventHandler ClientsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientsRow(ClientsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow AddClientsRow(
                        string Clientipaddress, 
                        string oui, 
                        string bssid, 
                        string clientmac, 
                        string clientencryption, 
                        string clientfirsttime, 
                        decimal clientgpsminlat, 
                        decimal clientgpsminlon, 
                        decimal clientgpsmaxlat, 
                        decimal clientgpsmaxlon, 
                        decimal clientgpsminalt, 
                        decimal clientgpsmaxalt, 
                        decimal clientgpsminspeed, 
                        decimal clientgpsmaxspeed, 
                        decimal clientdatasize, 
                        string clientmaxrate, 
                        string clientmaxseenrate, 
                        string clientlasttime, 
                        decimal clientpacketscrypt, 
                        decimal clientpacketsdata, 
                        decimal clientpacketsweak, 
                        string Number, 
                        string Type, 
                        string wep) {
                ClientsRow rowClientsRow = ((ClientsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Clientipaddress,
                        oui,
                        bssid,
                        clientmac,
                        clientencryption,
                        clientfirsttime,
                        clientgpsminlat,
                        clientgpsminlon,
                        clientgpsmaxlat,
                        clientgpsmaxlon,
                        clientgpsminalt,
                        clientgpsmaxalt,
                        clientgpsminspeed,
                        clientgpsmaxspeed,
                        clientdatasize,
                        clientmaxrate,
                        clientmaxseenrate,
                        clientlasttime,
                        clientpacketscrypt,
                        clientpacketsdata,
                        clientpacketsweak,
                        Number,
                        Type,
                        wep};
                rowClientsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientsRow);
                return rowClientsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow FindBybssidclientmac(string bssid, string clientmac) {
                return ((ClientsRow)(this.Rows.Find(new object[] {
                            bssid,
                            clientmac})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientsDataTable cln = ((ClientsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientipaddress = base.Columns["Clientipaddress"];
                this.columnoui = base.Columns["oui"];
                this.columnbssid = base.Columns["bssid"];
                this.columnclientmac = base.Columns["clientmac"];
                this.columnclientencryption = base.Columns["clientencryption"];
                this.columnclientfirsttime = base.Columns["clientfirsttime"];
                this.columnclientgpsminlat = base.Columns["clientgpsminlat"];
                this.columnclientgpsminlon = base.Columns["clientgpsminlon"];
                this.columnclientgpsmaxlat = base.Columns["clientgpsmaxlat"];
                this.columnclientgpsmaxlon = base.Columns["clientgpsmaxlon"];
                this.columnclientgpsminalt = base.Columns["clientgpsminalt"];
                this.columnclientgpsmaxalt = base.Columns["clientgpsmaxalt"];
                this.columnclientgpsminspeed = base.Columns["clientgpsminspeed"];
                this.columnclientgpsmaxspeed = base.Columns["clientgpsmaxspeed"];
                this.columnclientdatasize = base.Columns["clientdatasize"];
                this.columnclientmaxrate = base.Columns["clientmaxrate"];
                this.columnclientmaxseenrate = base.Columns["clientmaxseenrate"];
                this.columnclientlasttime = base.Columns["clientlasttime"];
                this.columnclientpacketscrypt = base.Columns["clientpacketscrypt"];
                this.columnclientpacketsdata = base.Columns["clientpacketsdata"];
                this.columnclientpacketsweak = base.Columns["clientpacketsweak"];
                this.columnNumber = base.Columns["Number"];
                this.columnType = base.Columns["Type"];
                this.columnwep = base.Columns["wep"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientipaddress = new global::System.Data.DataColumn("Clientipaddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientipaddress);
                this.columnoui = new global::System.Data.DataColumn("oui", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoui);
                this.columnbssid = new global::System.Data.DataColumn("bssid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbssid);
                this.columnclientmac = new global::System.Data.DataColumn("clientmac", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientmac);
                this.columnclientencryption = new global::System.Data.DataColumn("clientencryption", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientencryption);
                this.columnclientfirsttime = new global::System.Data.DataColumn("clientfirsttime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientfirsttime);
                this.columnclientgpsminlat = new global::System.Data.DataColumn("clientgpsminlat", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientgpsminlat);
                this.columnclientgpsminlon = new global::System.Data.DataColumn("clientgpsminlon", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientgpsminlon);
                this.columnclientgpsmaxlat = new global::System.Data.DataColumn("clientgpsmaxlat", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientgpsmaxlat);
                this.columnclientgpsmaxlon = new global::System.Data.DataColumn("clientgpsmaxlon", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientgpsmaxlon);
                this.columnclientgpsminalt = new global::System.Data.DataColumn("clientgpsminalt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientgpsminalt);
                this.columnclientgpsmaxalt = new global::System.Data.DataColumn("clientgpsmaxalt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientgpsmaxalt);
                this.columnclientgpsminspeed = new global::System.Data.DataColumn("clientgpsminspeed", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientgpsminspeed);
                this.columnclientgpsmaxspeed = new global::System.Data.DataColumn("clientgpsmaxspeed", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientgpsmaxspeed);
                this.columnclientdatasize = new global::System.Data.DataColumn("clientdatasize", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientdatasize);
                this.columnclientmaxrate = new global::System.Data.DataColumn("clientmaxrate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientmaxrate);
                this.columnclientmaxseenrate = new global::System.Data.DataColumn("clientmaxseenrate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientmaxseenrate);
                this.columnclientlasttime = new global::System.Data.DataColumn("clientlasttime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientlasttime);
                this.columnclientpacketscrypt = new global::System.Data.DataColumn("clientpacketscrypt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientpacketscrypt);
                this.columnclientpacketsdata = new global::System.Data.DataColumn("clientpacketsdata", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientpacketsdata);
                this.columnclientpacketsweak = new global::System.Data.DataColumn("clientpacketsweak", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientpacketsweak);
                this.columnNumber = new global::System.Data.DataColumn("Number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnwep = new global::System.Data.DataColumn("wep", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwep);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnbssid,
                                this.columnclientmac}, true));
                this.columnClientipaddress.MaxLength = 2147483647;
                this.columnoui.MaxLength = 2147483647;
                this.columnbssid.AllowDBNull = false;
                this.columnbssid.MaxLength = 2147483647;
                this.columnclientmac.AllowDBNull = false;
                this.columnclientmac.MaxLength = 2147483647;
                this.columnclientencryption.MaxLength = 2147483647;
                this.columnclientfirsttime.MaxLength = 2147483647;
                this.columnclientmaxrate.MaxLength = 2147483647;
                this.columnclientmaxseenrate.MaxLength = 2147483647;
                this.columnclientlasttime.MaxLength = 2147483647;
                this.columnNumber.MaxLength = 2147483647;
                this.columnType.MaxLength = 2147483647;
                this.columnwep.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow NewClientsRow() {
                return ((ClientsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientsRowChanged != null)) {
                    this.ClientsRowChanged(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientsRowChanging != null)) {
                    this.ClientsRowChanging(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientsRowDeleted != null)) {
                    this.ClientsRowDeleted(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientsRowDeleting != null)) {
                    this.ClientsRowDeleting(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientsRow(ClientsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                KismetData ds = new KismetData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class statsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnfilename;
            
            private global::System.Data.DataColumn columnnettotal;
            
            private global::System.Data.DataColumn columnnetnew;
            
            private global::System.Data.DataColumn columnnetseen;
            
            private global::System.Data.DataColumn columnclienttotal;
            
            private global::System.Data.DataColumn columnclientsnew;
            
            private global::System.Data.DataColumn columnclientsseen;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statsDataTable() {
                this.TableName = "stats";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal statsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected statsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn filenameColumn {
                get {
                    return this.columnfilename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nettotalColumn {
                get {
                    return this.columnnettotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn netnewColumn {
                get {
                    return this.columnnetnew;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn netseenColumn {
                get {
                    return this.columnnetseen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clienttotalColumn {
                get {
                    return this.columnclienttotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientsnewColumn {
                get {
                    return this.columnclientsnew;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientsseenColumn {
                get {
                    return this.columnclientsseen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statsRow this[int index] {
                get {
                    return ((statsRow)(this.Rows[index]));
                }
            }
            
            public event statsRowChangeEventHandler statsRowChanging;
            
            public event statsRowChangeEventHandler statsRowChanged;
            
            public event statsRowChangeEventHandler statsRowDeleting;
            
            public event statsRowChangeEventHandler statsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddstatsRow(statsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statsRow AddstatsRow(string filename, long nettotal, long netnew, long netseen, long clienttotal, long clientsnew, long clientsseen) {
                statsRow rowstatsRow = ((statsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        filename,
                        nettotal,
                        netnew,
                        netseen,
                        clienttotal,
                        clientsnew,
                        clientsseen};
                rowstatsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowstatsRow);
                return rowstatsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statsRow FindByfilename(string filename) {
                return ((statsRow)(this.Rows.Find(new object[] {
                            filename})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                statsDataTable cln = ((statsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new statsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfilename = base.Columns["filename"];
                this.columnnettotal = base.Columns["nettotal"];
                this.columnnetnew = base.Columns["netnew"];
                this.columnnetseen = base.Columns["netseen"];
                this.columnclienttotal = base.Columns["clienttotal"];
                this.columnclientsnew = base.Columns["clientsnew"];
                this.columnclientsseen = base.Columns["clientsseen"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfilename = new global::System.Data.DataColumn("filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfilename);
                this.columnnettotal = new global::System.Data.DataColumn("nettotal", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnettotal);
                this.columnnetnew = new global::System.Data.DataColumn("netnew", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnetnew);
                this.columnnetseen = new global::System.Data.DataColumn("netseen", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnetseen);
                this.columnclienttotal = new global::System.Data.DataColumn("clienttotal", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclienttotal);
                this.columnclientsnew = new global::System.Data.DataColumn("clientsnew", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientsnew);
                this.columnclientsseen = new global::System.Data.DataColumn("clientsseen", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclientsseen);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnfilename}, true));
                this.columnfilename.AllowDBNull = false;
                this.columnfilename.Unique = true;
                this.columnfilename.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statsRow NewstatsRow() {
                return ((statsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new statsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(statsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.statsRowChanged != null)) {
                    this.statsRowChanged(this, new statsRowChangeEvent(((statsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.statsRowChanging != null)) {
                    this.statsRowChanging(this, new statsRowChangeEvent(((statsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.statsRowDeleted != null)) {
                    this.statsRowDeleted(this, new statsRowChangeEvent(((statsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.statsRowDeleting != null)) {
                    this.statsRowDeleting(this, new statsRowChangeEvent(((statsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovestatsRow(statsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                KismetData ds = new KismetData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "statsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FilesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnfilename;
            
            private global::System.Data.DataColumn columnyear;
            
            private global::System.Data.DataColumn columnmonth;
            
            private global::System.Data.DataColumn columnday;
            
            private global::System.Data.DataColumn columnnumber;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilesDataTable() {
                this.TableName = "Files";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FilesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FilesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn filenameColumn {
                get {
                    return this.columnfilename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yearColumn {
                get {
                    return this.columnyear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn monthColumn {
                get {
                    return this.columnmonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dayColumn {
                get {
                    return this.columnday;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn numberColumn {
                get {
                    return this.columnnumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilesRow this[int index] {
                get {
                    return ((FilesRow)(this.Rows[index]));
                }
            }
            
            public event FilesRowChangeEventHandler FilesRowChanging;
            
            public event FilesRowChangeEventHandler FilesRowChanged;
            
            public event FilesRowChangeEventHandler FilesRowDeleting;
            
            public event FilesRowChangeEventHandler FilesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFilesRow(FilesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilesRow AddFilesRow(string filename, long year, string month, long day, long number) {
                FilesRow rowFilesRow = ((FilesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        filename,
                        year,
                        month,
                        day,
                        number};
                rowFilesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFilesRow);
                return rowFilesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilesRow FindByfilename(string filename) {
                return ((FilesRow)(this.Rows.Find(new object[] {
                            filename})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FilesDataTable cln = ((FilesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FilesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfilename = base.Columns["filename"];
                this.columnyear = base.Columns["year"];
                this.columnmonth = base.Columns["month"];
                this.columnday = base.Columns["day"];
                this.columnnumber = base.Columns["number"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfilename = new global::System.Data.DataColumn("filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfilename);
                this.columnyear = new global::System.Data.DataColumn("year", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyear);
                this.columnmonth = new global::System.Data.DataColumn("month", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmonth);
                this.columnday = new global::System.Data.DataColumn("day", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnday);
                this.columnnumber = new global::System.Data.DataColumn("number", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumber);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnfilename}, true));
                this.columnfilename.AllowDBNull = false;
                this.columnfilename.Unique = true;
                this.columnfilename.MaxLength = 2147483647;
                this.columnmonth.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilesRow NewFilesRow() {
                return ((FilesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FilesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FilesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FilesRowChanged != null)) {
                    this.FilesRowChanged(this, new FilesRowChangeEvent(((FilesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FilesRowChanging != null)) {
                    this.FilesRowChanging(this, new FilesRowChangeEvent(((FilesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FilesRowDeleted != null)) {
                    this.FilesRowDeleted(this, new FilesRowChangeEvent(((FilesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FilesRowDeleting != null)) {
                    this.FilesRowDeleting(this, new FilesRowChangeEvent(((FilesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFilesRow(FilesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                KismetData ds = new KismetData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FilesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class bssidclientcountDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn _column_bssid_;
            
            private global::System.Data.DataColumn _column_count_bssid__;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bssidclientcountDataTable() {
                this.TableName = "bssidclientcount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal bssidclientcountDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected bssidclientcountDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn @__bssid_Column {
                get {
                    return this._column_bssid_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn @__count_bssid__Column {
                get {
                    return this._column_count_bssid__;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bssidclientcountRow this[int index] {
                get {
                    return ((bssidclientcountRow)(this.Rows[index]));
                }
            }
            
            public event bssidclientcountRowChangeEventHandler bssidclientcountRowChanging;
            
            public event bssidclientcountRowChangeEventHandler bssidclientcountRowChanged;
            
            public event bssidclientcountRowChangeEventHandler bssidclientcountRowDeleting;
            
            public event bssidclientcountRowChangeEventHandler bssidclientcountRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddbssidclientcountRow(bssidclientcountRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bssidclientcountRow AddbssidclientcountRow(string @__bssid_, long @__count_bssid__) {
                bssidclientcountRow rowbssidclientcountRow = ((bssidclientcountRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        @__bssid_,
                        @__count_bssid__};
                rowbssidclientcountRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowbssidclientcountRow);
                return rowbssidclientcountRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                bssidclientcountDataTable cln = ((bssidclientcountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new bssidclientcountDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this._column_bssid_ = base.Columns["[bssid]"];
                this._column_count_bssid__ = base.Columns["[count(bssid)]"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this._column_bssid_ = new global::System.Data.DataColumn("[bssid]", typeof(string), null, global::System.Data.MappingType.Element);
                this._column_bssid_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_bssid_");
                this._column_bssid_.ExtendedProperties.Add("Generator_UserColumnName", "[bssid]");
                base.Columns.Add(this._column_bssid_);
                this._column_count_bssid__ = new global::System.Data.DataColumn("[count(bssid)]", typeof(long), null, global::System.Data.MappingType.Element);
                this._column_count_bssid__.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_count_bssid__");
                this._column_count_bssid__.ExtendedProperties.Add("Generator_UserColumnName", "[count(bssid)]");
                base.Columns.Add(this._column_count_bssid__);
                this._column_bssid_.AllowDBNull = false;
                this._column_bssid_.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bssidclientcountRow NewbssidclientcountRow() {
                return ((bssidclientcountRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new bssidclientcountRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(bssidclientcountRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.bssidclientcountRowChanged != null)) {
                    this.bssidclientcountRowChanged(this, new bssidclientcountRowChangeEvent(((bssidclientcountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.bssidclientcountRowChanging != null)) {
                    this.bssidclientcountRowChanging(this, new bssidclientcountRowChangeEvent(((bssidclientcountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.bssidclientcountRowDeleted != null)) {
                    this.bssidclientcountRowDeleted(this, new bssidclientcountRowChangeEvent(((bssidclientcountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.bssidclientcountRowDeleting != null)) {
                    this.bssidclientcountRowDeleting(this, new bssidclientcountRowChangeEvent(((bssidclientcountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovebssidclientcountRow(bssidclientcountRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                KismetData ds = new KismetData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "bssidclientcountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ophensDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columndata_bssid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ophensDataTable() {
                this.TableName = "ophens";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ophensDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ophensDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn data_bssidColumn {
                get {
                    return this.columndata_bssid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ophensRow this[int index] {
                get {
                    return ((ophensRow)(this.Rows[index]));
                }
            }
            
            public event ophensRowChangeEventHandler ophensRowChanging;
            
            public event ophensRowChangeEventHandler ophensRowChanged;
            
            public event ophensRowChangeEventHandler ophensRowDeleting;
            
            public event ophensRowChangeEventHandler ophensRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddophensRow(ophensRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ophensRow AddophensRow(string data_bssid) {
                ophensRow rowophensRow = ((ophensRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        data_bssid};
                rowophensRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowophensRow);
                return rowophensRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ophensDataTable cln = ((ophensDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ophensDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndata_bssid = base.Columns["data_bssid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndata_bssid = new global::System.Data.DataColumn("data_bssid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_bssid);
                this.columndata_bssid.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ophensRow NewophensRow() {
                return ((ophensRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ophensRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ophensRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ophensRowChanged != null)) {
                    this.ophensRowChanged(this, new ophensRowChangeEvent(((ophensRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ophensRowChanging != null)) {
                    this.ophensRowChanging(this, new ophensRowChangeEvent(((ophensRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ophensRowDeleted != null)) {
                    this.ophensRowDeleted(this, new ophensRowChangeEvent(((ophensRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ophensRowDeleting != null)) {
                    this.ophensRowDeleting(this, new ophensRowChangeEvent(((ophensRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveophensRow(ophensRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                KismetData ds = new KismetData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ophensDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DatanewRow : global::System.Data.DataRow {
            
            private DatanewDataTable tableDatanew;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DatanewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDatanew = ((DatanewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string oui {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.ouiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'oui\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.ouiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalpacketsweak {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.totalpacketsweakColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'totalpacketsweak\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.totalpacketsweakColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalpacketstotal {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.totalpacketstotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'totalpacketstotal\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.totalpacketstotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalpacketsllc {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.totalpacketsllcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'totalpacketsllc\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.totalpacketsllcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalpacketsdupeiv {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.totalpacketsdupeivColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'totalpacketsdupeiv\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.totalpacketsdupeivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalpacketsdata {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.totalpacketsdataColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'totalpacketsdata\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.totalpacketsdataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalpacketscrypt {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.totalpacketscryptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'totalpacketscrypt\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.totalpacketscryptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Network {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.NetworkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Network\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.NetworkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NetType {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.NetTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NetType\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.NetTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ESSID {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.ESSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ESSID\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.ESSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BSSID {
                get {
                    return ((string)(this[this.tableDatanew.BSSIDColumn]));
                }
                set {
                    this[this.tableDatanew.BSSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Info {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.InfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Info\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.InfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Channel {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.ChannelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Channel\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.ChannelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cloaked {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.CloakedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cloaked\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.CloakedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Encryption {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.EncryptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Encryption\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.EncryptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Decrypted {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.DecryptedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Decrypted\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.DecryptedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaxRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.MaxRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxRate\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.MaxRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaxSeenRate {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.MaxSeenRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxSeenRate\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.MaxSeenRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Beacon {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.BeaconColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Beacon\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.BeaconColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LLC {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.LLCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LLC\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.LLCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Data {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.DataColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Data\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.DataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Crypt {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.CryptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Crypt\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.CryptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Weak {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.WeakColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Weak\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.WeakColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.TotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Carrier {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.CarrierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Carrier\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.CarrierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Encoding {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.EncodingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Encoding\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.EncodingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstTime {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.FirstTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstTime\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.FirstTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastTime {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.LastTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastTime\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.LastTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BestQuality {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.BestQualityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BestQuality\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.BestQualityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BestSignal {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.BestSignalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BestSignal\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.BestSignalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BestNoise {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.BestNoiseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BestNoise\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.BestNoiseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSMinLat {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.GPSMinLatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPSMinLat\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.GPSMinLatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSMinLon {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.GPSMinLonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPSMinLon\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.GPSMinLonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSMinAlt {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.GPSMinAltColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPSMinAlt\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.GPSMinAltColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSMinSpd {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.GPSMinSpdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPSMinSpd\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.GPSMinSpdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSMaxLat {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.GPSMaxLatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPSMaxLat\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.GPSMaxLatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSMaxLon {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.GPSMaxLonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPSMaxLon\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.GPSMaxLonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSMaxAlt {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.GPSMaxAltColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPSMaxAlt\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.GPSMaxAltColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSMaxSpd {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.GPSMaxSpdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPSMaxSpd\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.GPSMaxSpdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSBestLat {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.GPSBestLatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPSBestLat\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.GPSBestLatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSBestLon {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.GPSBestLonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPSBestLon\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.GPSBestLonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPSBestAlt {
                get {
                    try {
                        return ((decimal)(this[this.tableDatanew.GPSBestAltColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPSBestAlt\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.GPSBestAltColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Datasize {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.DatasizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Datasize\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.DatasizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IPType {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.IPTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IPType\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.IPTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IP {
                get {
                    try {
                        return ((string)(this[this.tableDatanew.IPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IP\' in table \'Datanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatanew.IPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsouiNull() {
                return this.IsNull(this.tableDatanew.ouiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetouiNull() {
                this[this.tableDatanew.ouiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalpacketsweakNull() {
                return this.IsNull(this.tableDatanew.totalpacketsweakColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalpacketsweakNull() {
                this[this.tableDatanew.totalpacketsweakColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalpacketstotalNull() {
                return this.IsNull(this.tableDatanew.totalpacketstotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalpacketstotalNull() {
                this[this.tableDatanew.totalpacketstotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalpacketsllcNull() {
                return this.IsNull(this.tableDatanew.totalpacketsllcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalpacketsllcNull() {
                this[this.tableDatanew.totalpacketsllcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalpacketsdupeivNull() {
                return this.IsNull(this.tableDatanew.totalpacketsdupeivColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalpacketsdupeivNull() {
                this[this.tableDatanew.totalpacketsdupeivColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalpacketsdataNull() {
                return this.IsNull(this.tableDatanew.totalpacketsdataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalpacketsdataNull() {
                this[this.tableDatanew.totalpacketsdataColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalpacketscryptNull() {
                return this.IsNull(this.tableDatanew.totalpacketscryptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalpacketscryptNull() {
                this[this.tableDatanew.totalpacketscryptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetworkNull() {
                return this.IsNull(this.tableDatanew.NetworkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetworkNull() {
                this[this.tableDatanew.NetworkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetTypeNull() {
                return this.IsNull(this.tableDatanew.NetTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetTypeNull() {
                this[this.tableDatanew.NetTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsESSIDNull() {
                return this.IsNull(this.tableDatanew.ESSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetESSIDNull() {
                this[this.tableDatanew.ESSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfoNull() {
                return this.IsNull(this.tableDatanew.InfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfoNull() {
                this[this.tableDatanew.InfoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChannelNull() {
                return this.IsNull(this.tableDatanew.ChannelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChannelNull() {
                this[this.tableDatanew.ChannelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCloakedNull() {
                return this.IsNull(this.tableDatanew.CloakedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCloakedNull() {
                this[this.tableDatanew.CloakedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEncryptionNull() {
                return this.IsNull(this.tableDatanew.EncryptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEncryptionNull() {
                this[this.tableDatanew.EncryptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDecryptedNull() {
                return this.IsNull(this.tableDatanew.DecryptedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDecryptedNull() {
                this[this.tableDatanew.DecryptedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxRateNull() {
                return this.IsNull(this.tableDatanew.MaxRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxRateNull() {
                this[this.tableDatanew.MaxRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxSeenRateNull() {
                return this.IsNull(this.tableDatanew.MaxSeenRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxSeenRateNull() {
                this[this.tableDatanew.MaxSeenRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBeaconNull() {
                return this.IsNull(this.tableDatanew.BeaconColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBeaconNull() {
                this[this.tableDatanew.BeaconColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLLCNull() {
                return this.IsNull(this.tableDatanew.LLCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLLCNull() {
                this[this.tableDatanew.LLCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataNull() {
                return this.IsNull(this.tableDatanew.DataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataNull() {
                this[this.tableDatanew.DataColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCryptNull() {
                return this.IsNull(this.tableDatanew.CryptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCryptNull() {
                this[this.tableDatanew.CryptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeakNull() {
                return this.IsNull(this.tableDatanew.WeakColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeakNull() {
                this[this.tableDatanew.WeakColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.tableDatanew.TotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.tableDatanew.TotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCarrierNull() {
                return this.IsNull(this.tableDatanew.CarrierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCarrierNull() {
                this[this.tableDatanew.CarrierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEncodingNull() {
                return this.IsNull(this.tableDatanew.EncodingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEncodingNull() {
                this[this.tableDatanew.EncodingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstTimeNull() {
                return this.IsNull(this.tableDatanew.FirstTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstTimeNull() {
                this[this.tableDatanew.FirstTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastTimeNull() {
                return this.IsNull(this.tableDatanew.LastTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastTimeNull() {
                this[this.tableDatanew.LastTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBestQualityNull() {
                return this.IsNull(this.tableDatanew.BestQualityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBestQualityNull() {
                this[this.tableDatanew.BestQualityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBestSignalNull() {
                return this.IsNull(this.tableDatanew.BestSignalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBestSignalNull() {
                this[this.tableDatanew.BestSignalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBestNoiseNull() {
                return this.IsNull(this.tableDatanew.BestNoiseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBestNoiseNull() {
                this[this.tableDatanew.BestNoiseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSMinLatNull() {
                return this.IsNull(this.tableDatanew.GPSMinLatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSMinLatNull() {
                this[this.tableDatanew.GPSMinLatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSMinLonNull() {
                return this.IsNull(this.tableDatanew.GPSMinLonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSMinLonNull() {
                this[this.tableDatanew.GPSMinLonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSMinAltNull() {
                return this.IsNull(this.tableDatanew.GPSMinAltColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSMinAltNull() {
                this[this.tableDatanew.GPSMinAltColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSMinSpdNull() {
                return this.IsNull(this.tableDatanew.GPSMinSpdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSMinSpdNull() {
                this[this.tableDatanew.GPSMinSpdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSMaxLatNull() {
                return this.IsNull(this.tableDatanew.GPSMaxLatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSMaxLatNull() {
                this[this.tableDatanew.GPSMaxLatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSMaxLonNull() {
                return this.IsNull(this.tableDatanew.GPSMaxLonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSMaxLonNull() {
                this[this.tableDatanew.GPSMaxLonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSMaxAltNull() {
                return this.IsNull(this.tableDatanew.GPSMaxAltColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSMaxAltNull() {
                this[this.tableDatanew.GPSMaxAltColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSMaxSpdNull() {
                return this.IsNull(this.tableDatanew.GPSMaxSpdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSMaxSpdNull() {
                this[this.tableDatanew.GPSMaxSpdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSBestLatNull() {
                return this.IsNull(this.tableDatanew.GPSBestLatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSBestLatNull() {
                this[this.tableDatanew.GPSBestLatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSBestLonNull() {
                return this.IsNull(this.tableDatanew.GPSBestLonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSBestLonNull() {
                this[this.tableDatanew.GPSBestLonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSBestAltNull() {
                return this.IsNull(this.tableDatanew.GPSBestAltColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSBestAltNull() {
                this[this.tableDatanew.GPSBestAltColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDatasizeNull() {
                return this.IsNull(this.tableDatanew.DatasizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDatasizeNull() {
                this[this.tableDatanew.DatasizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIPTypeNull() {
                return this.IsNull(this.tableDatanew.IPTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIPTypeNull() {
                this[this.tableDatanew.IPTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIPNull() {
                return this.IsNull(this.tableDatanew.IPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIPNull() {
                this[this.tableDatanew.IPColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GPSDatanewRow : global::System.Data.DataRow {
            
            private GPSDatanewDataTable tableGPSDatanew;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GPSDatanewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGPSDatanew = ((GPSDatanewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bssid {
                get {
                    return ((string)(this[this.tableGPSDatanew.bssidColumn]));
                }
                set {
                    this[this.tableGPSDatanew.bssidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source {
                get {
                    try {
                        return ((string)(this[this.tableGPSDatanew.sourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'source\' in table \'GPSDatanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGPSDatanew.sourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal timesec {
                get {
                    try {
                        return ((decimal)(this[this.tableGPSDatanew.timesecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'timesec\' in table \'GPSDatanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGPSDatanew.timesecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string timeusec {
                get {
                    try {
                        return ((string)(this[this.tableGPSDatanew.timeusecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'timeusec\' in table \'GPSDatanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGPSDatanew.timeusecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal lat {
                get {
                    try {
                        return ((decimal)(this[this.tableGPSDatanew.latColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lat\' in table \'GPSDatanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGPSDatanew.latColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal lon {
                get {
                    try {
                        return ((decimal)(this[this.tableGPSDatanew.lonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lon\' in table \'GPSDatanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGPSDatanew.lonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal alt {
                get {
                    try {
                        return ((decimal)(this[this.tableGPSDatanew.altColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'alt\' in table \'GPSDatanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGPSDatanew.altColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal speed {
                get {
                    try {
                        return ((decimal)(this[this.tableGPSDatanew.speedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'speed\' in table \'GPSDatanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGPSDatanew.speedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal heading {
                get {
                    try {
                        return ((decimal)(this[this.tableGPSDatanew.headingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'heading\' in table \'GPSDatanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGPSDatanew.headingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fix {
                get {
                    try {
                        return ((string)(this[this.tableGPSDatanew.fixColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fix\' in table \'GPSDatanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGPSDatanew.fixColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal signal {
                get {
                    try {
                        return ((decimal)(this[this.tableGPSDatanew.signalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'signal\' in table \'GPSDatanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGPSDatanew.signalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal quality {
                get {
                    try {
                        return ((decimal)(this[this.tableGPSDatanew.qualityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'quality\' in table \'GPSDatanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGPSDatanew.qualityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal noise {
                get {
                    try {
                        return ((decimal)(this[this.tableGPSDatanew.noiseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'noise\' in table \'GPSDatanew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGPSDatanew.noiseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceNull() {
                return this.IsNull(this.tableGPSDatanew.sourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceNull() {
                this[this.tableGPSDatanew.sourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimesecNull() {
                return this.IsNull(this.tableGPSDatanew.timesecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimesecNull() {
                this[this.tableGPSDatanew.timesecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimeusecNull() {
                return this.IsNull(this.tableGPSDatanew.timeusecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimeusecNull() {
                this[this.tableGPSDatanew.timeusecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslatNull() {
                return this.IsNull(this.tableGPSDatanew.latColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlatNull() {
                this[this.tableGPSDatanew.latColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslonNull() {
                return this.IsNull(this.tableGPSDatanew.lonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlonNull() {
                this[this.tableGPSDatanew.lonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaltNull() {
                return this.IsNull(this.tableGPSDatanew.altColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaltNull() {
                this[this.tableGPSDatanew.altColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsspeedNull() {
                return this.IsNull(this.tableGPSDatanew.speedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetspeedNull() {
                this[this.tableGPSDatanew.speedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadingNull() {
                return this.IsNull(this.tableGPSDatanew.headingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadingNull() {
                this[this.tableGPSDatanew.headingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfixNull() {
                return this.IsNull(this.tableGPSDatanew.fixColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfixNull() {
                this[this.tableGPSDatanew.fixColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssignalNull() {
                return this.IsNull(this.tableGPSDatanew.signalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsignalNull() {
                this[this.tableGPSDatanew.signalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsqualityNull() {
                return this.IsNull(this.tableGPSDatanew.qualityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetqualityNull() {
                this[this.tableGPSDatanew.qualityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoiseNull() {
                return this.IsNull(this.tableGPSDatanew.noiseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoiseNull() {
                this[this.tableGPSDatanew.noiseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientsRow : global::System.Data.DataRow {
            
            private ClientsDataTable tableClients;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClients = ((ClientsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Clientipaddress {
                get {
                    try {
                        return ((string)(this[this.tableClients.ClientipaddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Clientipaddress\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.ClientipaddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string oui {
                get {
                    try {
                        return ((string)(this[this.tableClients.ouiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'oui\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.ouiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bssid {
                get {
                    return ((string)(this[this.tableClients.bssidColumn]));
                }
                set {
                    this[this.tableClients.bssidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string clientmac {
                get {
                    return ((string)(this[this.tableClients.clientmacColumn]));
                }
                set {
                    this[this.tableClients.clientmacColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string clientencryption {
                get {
                    try {
                        return ((string)(this[this.tableClients.clientencryptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientencryption\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientencryptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string clientfirsttime {
                get {
                    try {
                        return ((string)(this[this.tableClients.clientfirsttimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientfirsttime\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientfirsttimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal clientgpsminlat {
                get {
                    try {
                        return ((decimal)(this[this.tableClients.clientgpsminlatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientgpsminlat\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientgpsminlatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal clientgpsminlon {
                get {
                    try {
                        return ((decimal)(this[this.tableClients.clientgpsminlonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientgpsminlon\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientgpsminlonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal clientgpsmaxlat {
                get {
                    try {
                        return ((decimal)(this[this.tableClients.clientgpsmaxlatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientgpsmaxlat\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientgpsmaxlatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal clientgpsmaxlon {
                get {
                    try {
                        return ((decimal)(this[this.tableClients.clientgpsmaxlonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientgpsmaxlon\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientgpsmaxlonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal clientgpsminalt {
                get {
                    try {
                        return ((decimal)(this[this.tableClients.clientgpsminaltColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientgpsminalt\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientgpsminaltColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal clientgpsmaxalt {
                get {
                    try {
                        return ((decimal)(this[this.tableClients.clientgpsmaxaltColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientgpsmaxalt\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientgpsmaxaltColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal clientgpsminspeed {
                get {
                    try {
                        return ((decimal)(this[this.tableClients.clientgpsminspeedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientgpsminspeed\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientgpsminspeedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal clientgpsmaxspeed {
                get {
                    try {
                        return ((decimal)(this[this.tableClients.clientgpsmaxspeedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientgpsmaxspeed\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientgpsmaxspeedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal clientdatasize {
                get {
                    try {
                        return ((decimal)(this[this.tableClients.clientdatasizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientdatasize\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientdatasizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string clientmaxrate {
                get {
                    try {
                        return ((string)(this[this.tableClients.clientmaxrateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientmaxrate\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientmaxrateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string clientmaxseenrate {
                get {
                    try {
                        return ((string)(this[this.tableClients.clientmaxseenrateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientmaxseenrate\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientmaxseenrateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string clientlasttime {
                get {
                    try {
                        return ((string)(this[this.tableClients.clientlasttimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientlasttime\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientlasttimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal clientpacketscrypt {
                get {
                    try {
                        return ((decimal)(this[this.tableClients.clientpacketscryptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientpacketscrypt\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientpacketscryptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal clientpacketsdata {
                get {
                    try {
                        return ((decimal)(this[this.tableClients.clientpacketsdataColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientpacketsdata\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientpacketsdataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal clientpacketsweak {
                get {
                    try {
                        return ((decimal)(this[this.tableClients.clientpacketsweakColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientpacketsweak\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.clientpacketsweakColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableClients.NumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Number\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableClients.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string wep {
                get {
                    try {
                        return ((string)(this[this.tableClients.wepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'wep\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.wepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientipaddressNull() {
                return this.IsNull(this.tableClients.ClientipaddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientipaddressNull() {
                this[this.tableClients.ClientipaddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsouiNull() {
                return this.IsNull(this.tableClients.ouiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetouiNull() {
                this[this.tableClients.ouiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientencryptionNull() {
                return this.IsNull(this.tableClients.clientencryptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientencryptionNull() {
                this[this.tableClients.clientencryptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientfirsttimeNull() {
                return this.IsNull(this.tableClients.clientfirsttimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientfirsttimeNull() {
                this[this.tableClients.clientfirsttimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientgpsminlatNull() {
                return this.IsNull(this.tableClients.clientgpsminlatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientgpsminlatNull() {
                this[this.tableClients.clientgpsminlatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientgpsminlonNull() {
                return this.IsNull(this.tableClients.clientgpsminlonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientgpsminlonNull() {
                this[this.tableClients.clientgpsminlonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientgpsmaxlatNull() {
                return this.IsNull(this.tableClients.clientgpsmaxlatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientgpsmaxlatNull() {
                this[this.tableClients.clientgpsmaxlatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientgpsmaxlonNull() {
                return this.IsNull(this.tableClients.clientgpsmaxlonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientgpsmaxlonNull() {
                this[this.tableClients.clientgpsmaxlonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientgpsminaltNull() {
                return this.IsNull(this.tableClients.clientgpsminaltColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientgpsminaltNull() {
                this[this.tableClients.clientgpsminaltColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientgpsmaxaltNull() {
                return this.IsNull(this.tableClients.clientgpsmaxaltColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientgpsmaxaltNull() {
                this[this.tableClients.clientgpsmaxaltColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientgpsminspeedNull() {
                return this.IsNull(this.tableClients.clientgpsminspeedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientgpsminspeedNull() {
                this[this.tableClients.clientgpsminspeedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientgpsmaxspeedNull() {
                return this.IsNull(this.tableClients.clientgpsmaxspeedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientgpsmaxspeedNull() {
                this[this.tableClients.clientgpsmaxspeedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientdatasizeNull() {
                return this.IsNull(this.tableClients.clientdatasizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientdatasizeNull() {
                this[this.tableClients.clientdatasizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientmaxrateNull() {
                return this.IsNull(this.tableClients.clientmaxrateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientmaxrateNull() {
                this[this.tableClients.clientmaxrateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientmaxseenrateNull() {
                return this.IsNull(this.tableClients.clientmaxseenrateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientmaxseenrateNull() {
                this[this.tableClients.clientmaxseenrateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientlasttimeNull() {
                return this.IsNull(this.tableClients.clientlasttimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientlasttimeNull() {
                this[this.tableClients.clientlasttimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientpacketscryptNull() {
                return this.IsNull(this.tableClients.clientpacketscryptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientpacketscryptNull() {
                this[this.tableClients.clientpacketscryptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientpacketsdataNull() {
                return this.IsNull(this.tableClients.clientpacketsdataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientpacketsdataNull() {
                this[this.tableClients.clientpacketsdataColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientpacketsweakNull() {
                return this.IsNull(this.tableClients.clientpacketsweakColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientpacketsweakNull() {
                this[this.tableClients.clientpacketsweakColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberNull() {
                return this.IsNull(this.tableClients.NumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberNull() {
                this[this.tableClients.NumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableClients.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableClients.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IswepNull() {
                return this.IsNull(this.tableClients.wepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetwepNull() {
                this[this.tableClients.wepColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class statsRow : global::System.Data.DataRow {
            
            private statsDataTable tablestats;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal statsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablestats = ((statsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string filename {
                get {
                    return ((string)(this[this.tablestats.filenameColumn]));
                }
                set {
                    this[this.tablestats.filenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long nettotal {
                get {
                    try {
                        return ((long)(this[this.tablestats.nettotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nettotal\' in table \'stats\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestats.nettotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long netnew {
                get {
                    try {
                        return ((long)(this[this.tablestats.netnewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'netnew\' in table \'stats\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestats.netnewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long netseen {
                get {
                    try {
                        return ((long)(this[this.tablestats.netseenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'netseen\' in table \'stats\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestats.netseenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long clienttotal {
                get {
                    try {
                        return ((long)(this[this.tablestats.clienttotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clienttotal\' in table \'stats\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestats.clienttotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long clientsnew {
                get {
                    try {
                        return ((long)(this[this.tablestats.clientsnewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientsnew\' in table \'stats\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestats.clientsnewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long clientsseen {
                get {
                    try {
                        return ((long)(this[this.tablestats.clientsseenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clientsseen\' in table \'stats\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestats.clientsseenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnettotalNull() {
                return this.IsNull(this.tablestats.nettotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnettotalNull() {
                this[this.tablestats.nettotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnetnewNull() {
                return this.IsNull(this.tablestats.netnewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnetnewNull() {
                this[this.tablestats.netnewColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnetseenNull() {
                return this.IsNull(this.tablestats.netseenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnetseenNull() {
                this[this.tablestats.netseenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclienttotalNull() {
                return this.IsNull(this.tablestats.clienttotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclienttotalNull() {
                this[this.tablestats.clienttotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientsnewNull() {
                return this.IsNull(this.tablestats.clientsnewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientsnewNull() {
                this[this.tablestats.clientsnewColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientsseenNull() {
                return this.IsNull(this.tablestats.clientsseenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientsseenNull() {
                this[this.tablestats.clientsseenColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FilesRow : global::System.Data.DataRow {
            
            private FilesDataTable tableFiles;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FilesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFiles = ((FilesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string filename {
                get {
                    return ((string)(this[this.tableFiles.filenameColumn]));
                }
                set {
                    this[this.tableFiles.filenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long year {
                get {
                    try {
                        return ((long)(this[this.tableFiles.yearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'year\' in table \'Files\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFiles.yearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string month {
                get {
                    try {
                        return ((string)(this[this.tableFiles.monthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'month\' in table \'Files\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFiles.monthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long day {
                get {
                    try {
                        return ((long)(this[this.tableFiles.dayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'day\' in table \'Files\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFiles.dayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long number {
                get {
                    try {
                        return ((long)(this[this.tableFiles.numberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'number\' in table \'Files\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFiles.numberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyearNull() {
                return this.IsNull(this.tableFiles.yearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyearNull() {
                this[this.tableFiles.yearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmonthNull() {
                return this.IsNull(this.tableFiles.monthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmonthNull() {
                this[this.tableFiles.monthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdayNull() {
                return this.IsNull(this.tableFiles.dayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdayNull() {
                this[this.tableFiles.dayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumberNull() {
                return this.IsNull(this.tableFiles.numberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumberNull() {
                this[this.tableFiles.numberColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class bssidclientcountRow : global::System.Data.DataRow {
            
            private bssidclientcountDataTable tablebssidclientcount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal bssidclientcountRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablebssidclientcount = ((bssidclientcountDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string @__bssid_ {
                get {
                    return ((string)(this[this.tablebssidclientcount.@__bssid_Column]));
                }
                set {
                    this[this.tablebssidclientcount.@__bssid_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long @__count_bssid__ {
                get {
                    try {
                        return ((long)(this[this.tablebssidclientcount.@__count_bssid__Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'[count(bssid)]\' in table \'bssidclientcount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebssidclientcount.@__count_bssid__Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is__count_bssid__Null() {
                return this.IsNull(this.tablebssidclientcount.@__count_bssid__Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set__count_bssid__Null() {
                this[this.tablebssidclientcount.@__count_bssid__Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ophensRow : global::System.Data.DataRow {
            
            private ophensDataTable tableophens;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ophensRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableophens = ((ophensDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string data_bssid {
                get {
                    try {
                        return ((string)(this[this.tableophens.data_bssidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'data_bssid\' in table \'ophens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableophens.data_bssidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdata_bssidNull() {
                return this.IsNull(this.tableophens.data_bssidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdata_bssidNull() {
                this[this.tableophens.data_bssidColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DatanewRowChangeEvent : global::System.EventArgs {
            
            private DatanewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DatanewRowChangeEvent(DatanewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DatanewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GPSDatanewRowChangeEvent : global::System.EventArgs {
            
            private GPSDatanewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GPSDatanewRowChangeEvent(GPSDatanewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GPSDatanewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientsRowChangeEvent : global::System.EventArgs {
            
            private ClientsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRowChangeEvent(ClientsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class statsRowChangeEvent : global::System.EventArgs {
            
            private statsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statsRowChangeEvent(statsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FilesRowChangeEvent : global::System.EventArgs {
            
            private FilesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilesRowChangeEvent(FilesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class bssidclientcountRowChangeEvent : global::System.EventArgs {
            
            private bssidclientcountRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bssidclientcountRowChangeEvent(bssidclientcountRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bssidclientcountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ophensRowChangeEvent : global::System.EventArgs {
            
            private ophensRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ophensRowChangeEvent(ophensRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ophensRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace KismetLogger.KismetDataTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DatanewTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DatanewTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Datanew";
            tableMapping.ColumnMappings.Add("oui", "oui");
            tableMapping.ColumnMappings.Add("totalpacketsweak", "totalpacketsweak");
            tableMapping.ColumnMappings.Add("totalpacketstotal", "totalpacketstotal");
            tableMapping.ColumnMappings.Add("totalpacketsllc", "totalpacketsllc");
            tableMapping.ColumnMappings.Add("totalpacketsdupeiv", "totalpacketsdupeiv");
            tableMapping.ColumnMappings.Add("totalpacketsdata", "totalpacketsdata");
            tableMapping.ColumnMappings.Add("totalpacketscrypt", "totalpacketscrypt");
            tableMapping.ColumnMappings.Add("Network", "Network");
            tableMapping.ColumnMappings.Add("NetType", "NetType");
            tableMapping.ColumnMappings.Add("ESSID", "ESSID");
            tableMapping.ColumnMappings.Add("BSSID", "BSSID");
            tableMapping.ColumnMappings.Add("Info", "Info");
            tableMapping.ColumnMappings.Add("Channel", "Channel");
            tableMapping.ColumnMappings.Add("Cloaked", "Cloaked");
            tableMapping.ColumnMappings.Add("Encryption", "Encryption");
            tableMapping.ColumnMappings.Add("Decrypted", "Decrypted");
            tableMapping.ColumnMappings.Add("MaxRate", "MaxRate");
            tableMapping.ColumnMappings.Add("MaxSeenRate", "MaxSeenRate");
            tableMapping.ColumnMappings.Add("Beacon", "Beacon");
            tableMapping.ColumnMappings.Add("LLC", "LLC");
            tableMapping.ColumnMappings.Add("Data", "Data");
            tableMapping.ColumnMappings.Add("Crypt", "Crypt");
            tableMapping.ColumnMappings.Add("Weak", "Weak");
            tableMapping.ColumnMappings.Add("Total", "Total");
            tableMapping.ColumnMappings.Add("Carrier", "Carrier");
            tableMapping.ColumnMappings.Add("Encoding", "Encoding");
            tableMapping.ColumnMappings.Add("FirstTime", "FirstTime");
            tableMapping.ColumnMappings.Add("LastTime", "LastTime");
            tableMapping.ColumnMappings.Add("BestQuality", "BestQuality");
            tableMapping.ColumnMappings.Add("BestSignal", "BestSignal");
            tableMapping.ColumnMappings.Add("BestNoise", "BestNoise");
            tableMapping.ColumnMappings.Add("GPSMinLat", "GPSMinLat");
            tableMapping.ColumnMappings.Add("GPSMinLon", "GPSMinLon");
            tableMapping.ColumnMappings.Add("GPSMinAlt", "GPSMinAlt");
            tableMapping.ColumnMappings.Add("GPSMinSpd", "GPSMinSpd");
            tableMapping.ColumnMappings.Add("GPSMaxLat", "GPSMaxLat");
            tableMapping.ColumnMappings.Add("GPSMaxLon", "GPSMaxLon");
            tableMapping.ColumnMappings.Add("GPSMaxAlt", "GPSMaxAlt");
            tableMapping.ColumnMappings.Add("GPSMaxSpd", "GPSMaxSpd");
            tableMapping.ColumnMappings.Add("GPSBestLat", "GPSBestLat");
            tableMapping.ColumnMappings.Add("GPSBestLon", "GPSBestLon");
            tableMapping.ColumnMappings.Add("GPSBestAlt", "GPSBestAlt");
            tableMapping.ColumnMappings.Add("Datasize", "Datasize");
            tableMapping.ColumnMappings.Add("IPType", "IPType");
            tableMapping.ColumnMappings.Add("IP", "IP");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Data] WHERE (((@IsNull_oui = 1 AND [oui] IS NULL) OR ([oui] = @Origi" +
                "nal_oui)) AND ((@IsNull_totalpacketsweak = 1 AND [totalpacketsweak] IS NULL) OR " +
                "([totalpacketsweak] = @Original_totalpacketsweak)) AND ((@IsNull_totalpacketstot" +
                "al = 1 AND [totalpacketstotal] IS NULL) OR ([totalpacketstotal] = @Original_tota" +
                "lpacketstotal)) AND ((@IsNull_totalpacketsllc = 1 AND [totalpacketsllc] IS NULL)" +
                " OR ([totalpacketsllc] = @Original_totalpacketsllc)) AND ((@IsNull_totalpacketsd" +
                "upeiv = 1 AND [totalpacketsdupeiv] IS NULL) OR ([totalpacketsdupeiv] = @Original" +
                "_totalpacketsdupeiv)) AND ((@IsNull_totalpacketsdata = 1 AND [totalpacketsdata] " +
                "IS NULL) OR ([totalpacketsdata] = @Original_totalpacketsdata)) AND ((@IsNull_tot" +
                "alpacketscrypt = 1 AND [totalpacketscrypt] IS NULL) OR ([totalpacketscrypt] = @O" +
                "riginal_totalpacketscrypt)) AND ((@IsNull_Network = 1 AND [Network] IS NULL) OR " +
                "([Network] = @Original_Network)) AND ((@IsNull_NetType = 1 AND [NetType] IS NULL" +
                ") OR ([NetType] = @Original_NetType)) AND ((@IsNull_ESSID = 1 AND [ESSID] IS NUL" +
                "L) OR ([ESSID] = @Original_ESSID)) AND ([BSSID] = @Original_BSSID) AND ((@IsNull" +
                "_Info = 1 AND [Info] IS NULL) OR ([Info] = @Original_Info)) AND ((@IsNull_Channe" +
                "l = 1 AND [Channel] IS NULL) OR ([Channel] = @Original_Channel)) AND ((@IsNull_C" +
                "loaked = 1 AND [Cloaked] IS NULL) OR ([Cloaked] = @Original_Cloaked)) AND ((@IsN" +
                "ull_Encryption = 1 AND [Encryption] IS NULL) OR ([Encryption] = @Original_Encryp" +
                "tion)) AND ((@IsNull_Decrypted = 1 AND [Decrypted] IS NULL) OR ([Decrypted] = @O" +
                "riginal_Decrypted)) AND ((@IsNull_MaxRate = 1 AND [MaxRate] IS NULL) OR ([MaxRat" +
                "e] = @Original_MaxRate)) AND ((@IsNull_MaxSeenRate = 1 AND [MaxSeenRate] IS NULL" +
                ") OR ([MaxSeenRate] = @Original_MaxSeenRate)) AND ((@IsNull_Beacon = 1 AND [Beac" +
                "on] IS NULL) OR ([Beacon] = @Original_Beacon)) AND ((@IsNull_LLC = 1 AND [LLC] I" +
                "S NULL) OR ([LLC] = @Original_LLC)) AND ((@IsNull_Data = 1 AND [Data] IS NULL) O" +
                "R ([Data] = @Original_Data)) AND ((@IsNull_Crypt = 1 AND [Crypt] IS NULL) OR ([C" +
                "rypt] = @Original_Crypt)) AND ((@IsNull_Weak = 1 AND [Weak] IS NULL) OR ([Weak] " +
                "= @Original_Weak)) AND ((@IsNull_Total = 1 AND [Total] IS NULL) OR ([Total] = @O" +
                "riginal_Total)) AND ((@IsNull_Carrier = 1 AND [Carrier] IS NULL) OR ([Carrier] =" +
                " @Original_Carrier)) AND ((@IsNull_Encoding = 1 AND [Encoding] IS NULL) OR ([Enc" +
                "oding] = @Original_Encoding)) AND ((@IsNull_FirstTime = 1 AND [FirstTime] IS NUL" +
                "L) OR ([FirstTime] = @Original_FirstTime)) AND ((@IsNull_LastTime = 1 AND [LastT" +
                "ime] IS NULL) OR ([LastTime] = @Original_LastTime)) AND ((@IsNull_BestQuality = " +
                "1 AND [BestQuality] IS NULL) OR ([BestQuality] = @Original_BestQuality)) AND ((@" +
                "IsNull_BestSignal = 1 AND [BestSignal] IS NULL) OR ([BestSignal] = @Original_Bes" +
                "tSignal)) AND ((@IsNull_BestNoise = 1 AND [BestNoise] IS NULL) OR ([BestNoise] =" +
                " @Original_BestNoise)) AND ((@IsNull_GPSMinLat = 1 AND [GPSMinLat] IS NULL) OR (" +
                "[GPSMinLat] = @Original_GPSMinLat)) AND ((@IsNull_GPSMinLon = 1 AND [GPSMinLon] " +
                "IS NULL) OR ([GPSMinLon] = @Original_GPSMinLon)) AND ((@IsNull_GPSMinAlt = 1 AND" +
                " [GPSMinAlt] IS NULL) OR ([GPSMinAlt] = @Original_GPSMinAlt)) AND ((@IsNull_GPSM" +
                "inSpd = 1 AND [GPSMinSpd] IS NULL) OR ([GPSMinSpd] = @Original_GPSMinSpd)) AND (" +
                "(@IsNull_GPSMaxLat = 1 AND [GPSMaxLat] IS NULL) OR ([GPSMaxLat] = @Original_GPSM" +
                "axLat)) AND ((@IsNull_GPSMaxLon = 1 AND [GPSMaxLon] IS NULL) OR ([GPSMaxLon] = @" +
                "Original_GPSMaxLon)) AND ((@IsNull_GPSMaxAlt = 1 AND [GPSMaxAlt] IS NULL) OR ([G" +
                "PSMaxAlt] = @Original_GPSMaxAlt)) AND ((@IsNull_GPSMaxSpd = 1 AND [GPSMaxSpd] IS" +
                " NULL) OR ([GPSMaxSpd] = @Original_GPSMaxSpd)) AND ((@IsNull_GPSBestLat = 1 AND " +
                "[GPSBestLat] IS NULL) OR ([GPSBestLat] = @Original_GPSBestLat)) AND ((@IsNull_GP" +
                "SBestLon = 1 AND [GPSBestLon] IS NULL) OR ([GPSBestLon] = @Original_GPSBestLon))" +
                " AND ((@IsNull_GPSBestAlt = 1 AND [GPSBestAlt] IS NULL) OR ([GPSBestAlt] = @Orig" +
                "inal_GPSBestAlt)) AND ((@IsNull_Datasize = 1 AND [Datasize] IS NULL) OR ([Datasi" +
                "ze] = @Original_Datasize)) AND ((@IsNull_IPType = 1 AND [IPType] IS NULL) OR ([I" +
                "PType] = @Original_IPType)) AND ((@IsNull_IP = 1 AND [IP] IS NULL) OR ([IP] = @O" +
                "riginal_IP)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_oui";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "oui";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_oui";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "oui";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketsweak";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketsweak";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketsweak";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsweak";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketstotal";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketstotal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketstotal";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketstotal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketsllc";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketsllc";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketsllc";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsllc";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketsdupeiv";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketsdupeiv";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketsdupeiv";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsdupeiv";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketsdata";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketsdata";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketsdata";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsdata";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketscrypt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketscrypt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketscrypt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketscrypt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Network";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Network";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Network";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Network";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NetType";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NetType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NetType";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NetType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ESSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ESSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ESSID";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ESSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BSSID";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BSSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Info";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Info";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Info";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Info";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Channel";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Channel";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Channel";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Channel";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Cloaked";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Cloaked";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Cloaked";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Cloaked";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Encryption";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Encryption";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Encryption";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Encryption";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Decrypted";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Decrypted";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Decrypted";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Decrypted";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MaxRate";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MaxRate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MaxRate";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MaxRate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MaxSeenRate";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MaxSeenRate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MaxSeenRate";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MaxSeenRate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Beacon";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Beacon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Beacon";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Beacon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_LLC";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "LLC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LLC";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "LLC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Data";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Data";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Data";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Data";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Crypt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Crypt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Crypt";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Crypt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Weak";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Weak";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Weak";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Weak";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Total";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Total";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Total";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Total";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Carrier";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Carrier";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Carrier";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Carrier";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Encoding";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Encoding";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Encoding";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Encoding";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FirstTime";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FirstTime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FirstTime";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FirstTime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_LastTime";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "LastTime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LastTime";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "LastTime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BestQuality";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BestQuality";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BestQuality";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BestQuality";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BestSignal";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BestSignal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BestSignal";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "BestSignal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BestNoise";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BestNoise";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BestNoise";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "BestNoise";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMinLat";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSMinLat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMinLat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinLat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMinLon";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSMinLon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMinLon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinLon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMinAlt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSMinAlt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMinAlt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinAlt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMinSpd";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSMinSpd";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMinSpd";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinSpd";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMaxLat";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSMaxLat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMaxLat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxLat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMaxLon";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSMaxLon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMaxLon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxLon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMaxAlt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSMaxAlt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMaxAlt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxAlt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMaxSpd";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSMaxSpd";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMaxSpd";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxSpd";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSBestLat";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSBestLat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSBestLat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestLat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSBestLon";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSBestLon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSBestLon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestLon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSBestAlt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSBestAlt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSBestAlt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestAlt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Datasize";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Datasize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Datasize";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Datasize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IPType";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IPType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IPType";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "IPType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IP";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IP";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "IP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Data] ([oui], [totalpacketsweak], [totalpacketstotal], [totalpacketsllc], [totalpacketsdupeiv], [totalpacketsdata], [totalpacketscrypt], [Network], [NetType], [ESSID], [BSSID], [Info], [Channel], [Cloaked], [Encryption], [Decrypted], [MaxRate], [MaxSeenRate], [Beacon], [LLC], [Data], [Crypt], [Weak], [Total], [Carrier], [Encoding], [FirstTime], [LastTime], [BestQuality], [BestSignal], [BestNoise], [GPSMinLat], [GPSMinLon], [GPSMinAlt], [GPSMinSpd], [GPSMaxLat], [GPSMaxLon], [GPSMaxAlt], [GPSMaxSpd], [GPSBestLat], [GPSBestLon], [GPSBestAlt], [Datasize], [IPType], [IP]) VALUES (@oui, @totalpacketsweak, @totalpacketstotal, @totalpacketsllc, @totalpacketsdupeiv, @totalpacketsdata, @totalpacketscrypt, @Network, @NetType, @ESSID, @BSSID, @Info, @Channel, @Cloaked, @Encryption, @Decrypted, @MaxRate, @MaxSeenRate, @Beacon, @LLC, @Data, @Crypt, @Weak, @Total, @Carrier, @Encoding, @FirstTime, @LastTime, @BestQuality, @BestSignal, @BestNoise, @GPSMinLat, @GPSMinLon, @GPSMinAlt, @GPSMinSpd, @GPSMaxLat, @GPSMaxLon, @GPSMaxAlt, @GPSMaxSpd, @GPSBestLat, @GPSBestLon, @GPSBestAlt, @Datasize, @IPType, @IP)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@oui";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "oui";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketsweak";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsweak";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketstotal";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketstotal";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketsllc";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsllc";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketsdupeiv";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsdupeiv";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketsdata";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsdata";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketscrypt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketscrypt";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Network";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Network";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NetType";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NetType";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ESSID";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ESSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BSSID";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BSSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Info";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Info";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Channel";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Channel";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Cloaked";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Cloaked";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Encryption";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Encryption";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Decrypted";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Decrypted";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MaxRate";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MaxRate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MaxSeenRate";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MaxSeenRate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Beacon";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Beacon";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LLC";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "LLC";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Data";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Data";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Crypt";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Crypt";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Weak";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Weak";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Total";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Total";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Carrier";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Carrier";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Encoding";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Encoding";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FirstTime";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FirstTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LastTime";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "LastTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BestQuality";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BestQuality";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BestSignal";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "BestSignal";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BestNoise";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "BestNoise";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMinLat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinLat";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMinLon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinLon";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMinAlt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinAlt";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMinSpd";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinSpd";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMaxLat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxLat";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMaxLon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxLon";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMaxAlt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxAlt";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMaxSpd";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxSpd";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSBestLat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestLat";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSBestLon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestLon";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSBestAlt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestAlt";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Datasize";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Datasize";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IPType";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "IPType";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IP";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "IP";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Data] SET [oui] = @oui, [totalpacketsweak] = @totalpacketsweak, [totalpac" +
                "ketstotal] = @totalpacketstotal, [totalpacketsllc] = @totalpacketsllc, [totalpac" +
                "ketsdupeiv] = @totalpacketsdupeiv, [totalpacketsdata] = @totalpacketsdata, [tota" +
                "lpacketscrypt] = @totalpacketscrypt, [Network] = @Network, [NetType] = @NetType," +
                " [ESSID] = @ESSID, [BSSID] = @BSSID, [Info] = @Info, [Channel] = @Channel, [Cloa" +
                "ked] = @Cloaked, [Encryption] = @Encryption, [Decrypted] = @Decrypted, [MaxRate]" +
                " = @MaxRate, [MaxSeenRate] = @MaxSeenRate, [Beacon] = @Beacon, [LLC] = @LLC, [Da" +
                "ta] = @Data, [Crypt] = @Crypt, [Weak] = @Weak, [Total] = @Total, [Carrier] = @Ca" +
                "rrier, [Encoding] = @Encoding, [FirstTime] = @FirstTime, [LastTime] = @LastTime," +
                " [BestQuality] = @BestQuality, [BestSignal] = @BestSignal, [BestNoise] = @BestNo" +
                "ise, [GPSMinLat] = @GPSMinLat, [GPSMinLon] = @GPSMinLon, [GPSMinAlt] = @GPSMinAl" +
                "t, [GPSMinSpd] = @GPSMinSpd, [GPSMaxLat] = @GPSMaxLat, [GPSMaxLon] = @GPSMaxLon," +
                " [GPSMaxAlt] = @GPSMaxAlt, [GPSMaxSpd] = @GPSMaxSpd, [GPSBestLat] = @GPSBestLat," +
                " [GPSBestLon] = @GPSBestLon, [GPSBestAlt] = @GPSBestAlt, [Datasize] = @Datasize," +
                " [IPType] = @IPType, [IP] = @IP WHERE (((@IsNull_oui = 1 AND [oui] IS NULL) OR (" +
                "[oui] = @Original_oui)) AND ((@IsNull_totalpacketsweak = 1 AND [totalpacketsweak" +
                "] IS NULL) OR ([totalpacketsweak] = @Original_totalpacketsweak)) AND ((@IsNull_t" +
                "otalpacketstotal = 1 AND [totalpacketstotal] IS NULL) OR ([totalpacketstotal] = " +
                "@Original_totalpacketstotal)) AND ((@IsNull_totalpacketsllc = 1 AND [totalpacket" +
                "sllc] IS NULL) OR ([totalpacketsllc] = @Original_totalpacketsllc)) AND ((@IsNull" +
                "_totalpacketsdupeiv = 1 AND [totalpacketsdupeiv] IS NULL) OR ([totalpacketsdupei" +
                "v] = @Original_totalpacketsdupeiv)) AND ((@IsNull_totalpacketsdata = 1 AND [tota" +
                "lpacketsdata] IS NULL) OR ([totalpacketsdata] = @Original_totalpacketsdata)) AND" +
                " ((@IsNull_totalpacketscrypt = 1 AND [totalpacketscrypt] IS NULL) OR ([totalpack" +
                "etscrypt] = @Original_totalpacketscrypt)) AND ((@IsNull_Network = 1 AND [Network" +
                "] IS NULL) OR ([Network] = @Original_Network)) AND ((@IsNull_NetType = 1 AND [Ne" +
                "tType] IS NULL) OR ([NetType] = @Original_NetType)) AND ((@IsNull_ESSID = 1 AND " +
                "[ESSID] IS NULL) OR ([ESSID] = @Original_ESSID)) AND ([BSSID] = @Original_BSSID)" +
                " AND ((@IsNull_Info = 1 AND [Info] IS NULL) OR ([Info] = @Original_Info)) AND ((" +
                "@IsNull_Channel = 1 AND [Channel] IS NULL) OR ([Channel] = @Original_Channel)) A" +
                "ND ((@IsNull_Cloaked = 1 AND [Cloaked] IS NULL) OR ([Cloaked] = @Original_Cloake" +
                "d)) AND ((@IsNull_Encryption = 1 AND [Encryption] IS NULL) OR ([Encryption] = @O" +
                "riginal_Encryption)) AND ((@IsNull_Decrypted = 1 AND [Decrypted] IS NULL) OR ([D" +
                "ecrypted] = @Original_Decrypted)) AND ((@IsNull_MaxRate = 1 AND [MaxRate] IS NUL" +
                "L) OR ([MaxRate] = @Original_MaxRate)) AND ((@IsNull_MaxSeenRate = 1 AND [MaxSee" +
                "nRate] IS NULL) OR ([MaxSeenRate] = @Original_MaxSeenRate)) AND ((@IsNull_Beacon" +
                " = 1 AND [Beacon] IS NULL) OR ([Beacon] = @Original_Beacon)) AND ((@IsNull_LLC =" +
                " 1 AND [LLC] IS NULL) OR ([LLC] = @Original_LLC)) AND ((@IsNull_Data = 1 AND [Da" +
                "ta] IS NULL) OR ([Data] = @Original_Data)) AND ((@IsNull_Crypt = 1 AND [Crypt] I" +
                "S NULL) OR ([Crypt] = @Original_Crypt)) AND ((@IsNull_Weak = 1 AND [Weak] IS NUL" +
                "L) OR ([Weak] = @Original_Weak)) AND ((@IsNull_Total = 1 AND [Total] IS NULL) OR" +
                " ([Total] = @Original_Total)) AND ((@IsNull_Carrier = 1 AND [Carrier] IS NULL) O" +
                "R ([Carrier] = @Original_Carrier)) AND ((@IsNull_Encoding = 1 AND [Encoding] IS " +
                "NULL) OR ([Encoding] = @Original_Encoding)) AND ((@IsNull_FirstTime = 1 AND [Fir" +
                "stTime] IS NULL) OR ([FirstTime] = @Original_FirstTime)) AND ((@IsNull_LastTime " +
                "= 1 AND [LastTime] IS NULL) OR ([LastTime] = @Original_LastTime)) AND ((@IsNull_" +
                "BestQuality = 1 AND [BestQuality] IS NULL) OR ([BestQuality] = @Original_BestQua" +
                "lity)) AND ((@IsNull_BestSignal = 1 AND [BestSignal] IS NULL) OR ([BestSignal] =" +
                " @Original_BestSignal)) AND ((@IsNull_BestNoise = 1 AND [BestNoise] IS NULL) OR " +
                "([BestNoise] = @Original_BestNoise)) AND ((@IsNull_GPSMinLat = 1 AND [GPSMinLat]" +
                " IS NULL) OR ([GPSMinLat] = @Original_GPSMinLat)) AND ((@IsNull_GPSMinLon = 1 AN" +
                "D [GPSMinLon] IS NULL) OR ([GPSMinLon] = @Original_GPSMinLon)) AND ((@IsNull_GPS" +
                "MinAlt = 1 AND [GPSMinAlt] IS NULL) OR ([GPSMinAlt] = @Original_GPSMinAlt)) AND " +
                "((@IsNull_GPSMinSpd = 1 AND [GPSMinSpd] IS NULL) OR ([GPSMinSpd] = @Original_GPS" +
                "MinSpd)) AND ((@IsNull_GPSMaxLat = 1 AND [GPSMaxLat] IS NULL) OR ([GPSMaxLat] = " +
                "@Original_GPSMaxLat)) AND ((@IsNull_GPSMaxLon = 1 AND [GPSMaxLon] IS NULL) OR ([" +
                "GPSMaxLon] = @Original_GPSMaxLon)) AND ((@IsNull_GPSMaxAlt = 1 AND [GPSMaxAlt] I" +
                "S NULL) OR ([GPSMaxAlt] = @Original_GPSMaxAlt)) AND ((@IsNull_GPSMaxSpd = 1 AND " +
                "[GPSMaxSpd] IS NULL) OR ([GPSMaxSpd] = @Original_GPSMaxSpd)) AND ((@IsNull_GPSBe" +
                "stLat = 1 AND [GPSBestLat] IS NULL) OR ([GPSBestLat] = @Original_GPSBestLat)) AN" +
                "D ((@IsNull_GPSBestLon = 1 AND [GPSBestLon] IS NULL) OR ([GPSBestLon] = @Origina" +
                "l_GPSBestLon)) AND ((@IsNull_GPSBestAlt = 1 AND [GPSBestAlt] IS NULL) OR ([GPSBe" +
                "stAlt] = @Original_GPSBestAlt)) AND ((@IsNull_Datasize = 1 AND [Datasize] IS NUL" +
                "L) OR ([Datasize] = @Original_Datasize)) AND ((@IsNull_IPType = 1 AND [IPType] I" +
                "S NULL) OR ([IPType] = @Original_IPType)) AND ((@IsNull_IP = 1 AND [IP] IS NULL)" +
                " OR ([IP] = @Original_IP)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@oui";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "oui";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketsweak";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsweak";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketstotal";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketstotal";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketsllc";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsllc";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketsdupeiv";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsdupeiv";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketsdata";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsdata";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@totalpacketscrypt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketscrypt";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Network";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Network";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NetType";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NetType";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ESSID";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ESSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BSSID";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BSSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Info";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Info";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Channel";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Channel";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Cloaked";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Cloaked";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Encryption";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Encryption";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Decrypted";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Decrypted";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MaxRate";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MaxRate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MaxSeenRate";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MaxSeenRate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Beacon";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Beacon";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LLC";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "LLC";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Data";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Data";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Crypt";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Crypt";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Weak";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Weak";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Total";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Total";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Carrier";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Carrier";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Encoding";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Encoding";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FirstTime";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FirstTime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LastTime";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "LastTime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BestQuality";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BestQuality";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BestSignal";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "BestSignal";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BestNoise";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "BestNoise";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMinLat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinLat";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMinLon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinLon";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMinAlt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinAlt";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMinSpd";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinSpd";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMaxLat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxLat";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMaxLon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxLon";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMaxAlt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxAlt";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSMaxSpd";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxSpd";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSBestLat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestLat";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSBestLon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestLon";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GPSBestAlt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestAlt";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Datasize";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Datasize";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IPType";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "IPType";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IP";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "IP";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_oui";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "oui";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_oui";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "oui";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketsweak";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketsweak";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketsweak";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsweak";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketstotal";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketstotal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketstotal";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketstotal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketsllc";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketsllc";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketsllc";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsllc";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketsdupeiv";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketsdupeiv";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketsdupeiv";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsdupeiv";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketsdata";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketsdata";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketsdata";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketsdata";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_totalpacketscrypt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "totalpacketscrypt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_totalpacketscrypt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "totalpacketscrypt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Network";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Network";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Network";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Network";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NetType";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NetType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NetType";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "NetType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ESSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ESSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ESSID";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "ESSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BSSID";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BSSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Info";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Info";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Info";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Info";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Channel";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Channel";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Channel";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Channel";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Cloaked";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Cloaked";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Cloaked";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Cloaked";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Encryption";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Encryption";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Encryption";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Encryption";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Decrypted";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Decrypted";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Decrypted";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Decrypted";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MaxRate";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MaxRate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MaxRate";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MaxRate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MaxSeenRate";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MaxSeenRate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MaxSeenRate";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MaxSeenRate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Beacon";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Beacon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Beacon";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Beacon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_LLC";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "LLC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LLC";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "LLC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Data";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Data";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Data";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Data";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Crypt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Crypt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Crypt";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Crypt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Weak";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Weak";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Weak";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Weak";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Total";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Total";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Total";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Total";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Carrier";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Carrier";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Carrier";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Carrier";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Encoding";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Encoding";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Encoding";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Encoding";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FirstTime";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FirstTime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FirstTime";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "FirstTime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_LastTime";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "LastTime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LastTime";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "LastTime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BestQuality";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BestQuality";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BestQuality";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "BestQuality";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BestSignal";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BestSignal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BestSignal";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "BestSignal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BestNoise";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BestNoise";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BestNoise";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "BestNoise";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMinLat";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSMinLat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMinLat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinLat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMinLon";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSMinLon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMinLon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinLon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMinAlt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSMinAlt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMinAlt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinAlt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMinSpd";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSMinSpd";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMinSpd";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMinSpd";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMaxLat";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSMaxLat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMaxLat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxLat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMaxLon";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSMaxLon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMaxLon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxLon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMaxAlt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSMaxAlt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMaxAlt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxAlt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSMaxSpd";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSMaxSpd";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSMaxSpd";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSMaxSpd";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSBestLat";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSBestLat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSBestLat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestLat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSBestLon";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSBestLon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSBestLon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestLon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GPSBestAlt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GPSBestAlt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GPSBestAlt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "GPSBestAlt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Datasize";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Datasize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Datasize";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Datasize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IPType";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IPType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IPType";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "IPType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IP";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IP";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "IP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::KismetLogger.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[5];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [oui], [totalpacketsweak], [totalpacketstotal], [totalpacketsllc], [totalpacketsdupeiv], [totalpacketsdata], [totalpacketscrypt], [Network], [NetType], [ESSID], [BSSID], [Info], [Channel], [Cloaked], [Encryption], [Decrypted], [MaxRate], [MaxSeenRate], [Beacon], [LLC], [Data], [Crypt], [Weak], [Total], [Carrier], [Encoding], [FirstTime], [LastTime], [BestQuality], [BestSignal], [BestNoise], [GPSMinLat], [GPSMinLon], [GPSMinAlt], [GPSMinSpd], [GPSMaxLat], [GPSMaxLon], [GPSMaxAlt], [GPSMaxSpd], [GPSBestLat], [GPSBestLon], [GPSBestAlt], [Datasize], [IPType], [IP] FROM [Data]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     oui, totalpacketsweak, totalpacketstotal, totalpacketsllc, totalpacketsdupeiv, totalpacketsdata, totalpacketscrypt, Network, NetType, ESSID, BSSID, Info, 
                      Channel, Cloaked, Encryption, Decrypted, MaxRate, MaxSeenRate, Beacon, LLC, Data, Crypt, Weak, Total, Carrier, Encoding, FirstTime, LastTime, 
                      BestQuality, BestSignal, BestNoise, GPSMinLat, GPSMinLon, GPSMinAlt, GPSMinSpd, GPSMaxLat, GPSMaxLon, GPSMaxAlt, GPSMaxSpd, 
                      GPSBestLat, GPSBestLon, GPSBestAlt, Datasize, IPType, IP
FROM         Data
WHERE     (BSSID = @param1)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@param1";
            param.DbType = global::System.Data.DbType.String;
            param.Size = 2147483647;
            param.SourceColumn = "BSSID";
            this._commandCollection[1].Parameters.Add(param);
            this._commandCollection[2] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT     oui , BSSID\r\nFROM         Data\r\nWHERE     (oui = \'Unknown\')";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT     oui, totalpacketsweak, totalpacketstotal, totalpacketsllc, totalpacketsdupeiv, totalpacketsdata, totalpacketscrypt, Network, NetType, ESSID, BSSID, Info, 
                      Channel, Cloaked, Encryption, Decrypted, MaxRate, MaxSeenRate, Beacon, LLC, Data, Crypt, Weak, Total, Carrier, Encoding, FirstTime, LastTime, 
                      BestQuality, BestSignal, BestNoise, GPSMinLat, GPSMinLon, GPSMinAlt, GPSMinSpd, GPSMaxLat, GPSMaxLon, GPSMaxAlt, GPSMaxSpd, 
                      GPSBestLat, GPSBestLon, GPSBestAlt, Datasize, IPType, IP
FROM         Data
WHERE     (NetType = 'infrastructure') AND (Encryption = @theenc)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@theenc";
            param.DbType = global::System.Data.DbType.String;
            param.Size = 2147483647;
            param.SourceColumn = "Encryption";
            this._commandCollection[3].Parameters.Add(param);
            this._commandCollection[4] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "UPDATE    Data\r\nSET              oui = @oui\r\nWHERE     (BSSID = @BSSID)";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@oui";
            param.DbType = global::System.Data.DbType.String;
            param.Size = 2147483647;
            param.SourceColumn = "oui";
            this._commandCollection[4].Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BSSID";
            param.DbType = global::System.Data.DbType.String;
            param.Size = 2147483647;
            param.SourceColumn = "BSSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._commandCollection[4].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(KismetData.DatanewDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual KismetData.DatanewDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            KismetData.DatanewDataTable dataTable = new KismetData.DatanewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(KismetData.DatanewDataTable dataTable, string param1) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((param1 == null)) {
                throw new global::System.ArgumentNullException("param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(param1));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual KismetData.DatanewDataTable GetDataByBssid(string param1) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((param1 == null)) {
                throw new global::System.ArgumentNullException("param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(param1));
            }
            KismetData.DatanewDataTable dataTable = new KismetData.DatanewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual KismetData.DatanewDataTable GetDataByUnknownOui() {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            KismetData.DatanewDataTable dataTable = new KismetData.DatanewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual KismetData.DatanewDataTable GetDataByEncType(string theenc) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((theenc == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(theenc));
            }
            KismetData.DatanewDataTable dataTable = new KismetData.DatanewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(KismetData.DatanewDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(KismetData dataSet) {
            return this.Adapter.Update(dataSet, "Datanew");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_oui, 
                    global::System.Nullable<decimal> Original_totalpacketsweak, 
                    global::System.Nullable<decimal> Original_totalpacketstotal, 
                    global::System.Nullable<decimal> Original_totalpacketsllc, 
                    global::System.Nullable<decimal> Original_totalpacketsdupeiv, 
                    global::System.Nullable<decimal> Original_totalpacketsdata, 
                    global::System.Nullable<decimal> Original_totalpacketscrypt, 
                    string Original_Network, 
                    string Original_NetType, 
                    string Original_ESSID, 
                    string Original_BSSID, 
                    string Original_Info, 
                    global::System.Nullable<decimal> Original_Channel, 
                    string Original_Cloaked, 
                    string Original_Encryption, 
                    string Original_Decrypted, 
                    global::System.Nullable<decimal> Original_MaxRate, 
                    global::System.Nullable<decimal> Original_MaxSeenRate, 
                    string Original_Beacon, 
                    string Original_LLC, 
                    string Original_Data, 
                    string Original_Crypt, 
                    global::System.Nullable<decimal> Original_Weak, 
                    global::System.Nullable<decimal> Original_Total, 
                    global::System.Nullable<decimal> Original_Carrier, 
                    string Original_Encoding, 
                    string Original_FirstTime, 
                    string Original_LastTime, 
                    string Original_BestQuality, 
                    global::System.Nullable<decimal> Original_BestSignal, 
                    global::System.Nullable<decimal> Original_BestNoise, 
                    global::System.Nullable<decimal> Original_GPSMinLat, 
                    global::System.Nullable<decimal> Original_GPSMinLon, 
                    global::System.Nullable<decimal> Original_GPSMinAlt, 
                    global::System.Nullable<decimal> Original_GPSMinSpd, 
                    global::System.Nullable<decimal> Original_GPSMaxLat, 
                    global::System.Nullable<decimal> Original_GPSMaxLon, 
                    global::System.Nullable<decimal> Original_GPSMaxAlt, 
                    global::System.Nullable<decimal> Original_GPSMaxSpd, 
                    global::System.Nullable<decimal> Original_GPSBestLat, 
                    global::System.Nullable<decimal> Original_GPSBestLon, 
                    global::System.Nullable<decimal> Original_GPSBestAlt, 
                    string Original_Datasize, 
                    string Original_IPType, 
                    string Original_IP) {
            if ((Original_oui == null)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_oui));
            }
            if ((Original_totalpacketsweak.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_totalpacketsweak.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_totalpacketstotal.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_totalpacketstotal.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_totalpacketsllc.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_totalpacketsllc.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_totalpacketsdupeiv.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_totalpacketsdupeiv.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_totalpacketsdata.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((decimal)(Original_totalpacketsdata.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_totalpacketscrypt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((decimal)(Original_totalpacketscrypt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_Network == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_Network));
            }
            if ((Original_NetType == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_NetType));
            }
            if ((Original_ESSID == null)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_ESSID));
            }
            if ((Original_BSSID == null)) {
                throw new global::System.ArgumentNullException("Original_BSSID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_BSSID));
            }
            if ((Original_Info == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_Info));
            }
            if ((Original_Channel.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((decimal)(Original_Channel.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_Cloaked == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_Cloaked));
            }
            if ((Original_Encryption == null)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_Encryption));
            }
            if ((Original_Decrypted == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_Decrypted));
            }
            if ((Original_MaxRate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((decimal)(Original_MaxRate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_MaxSeenRate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((decimal)(Original_MaxSeenRate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_Beacon == null)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((string)(Original_Beacon));
            }
            if ((Original_LLC == null)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((string)(Original_LLC));
            }
            if ((Original_Data == null)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((string)(Original_Data));
            }
            if ((Original_Crypt == null)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((string)(Original_Crypt));
            }
            if ((Original_Weak.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((decimal)(Original_Weak.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_Total.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((decimal)(Original_Total.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_Carrier.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((decimal)(Original_Carrier.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_Encoding == null)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((string)(Original_Encoding));
            }
            if ((Original_FirstTime == null)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((string)(Original_FirstTime));
            }
            if ((Original_LastTime == null)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((string)(Original_LastTime));
            }
            if ((Original_BestQuality == null)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((string)(Original_BestQuality));
            }
            if ((Original_BestSignal.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((decimal)(Original_BestSignal.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_BestNoise.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((decimal)(Original_BestNoise.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSMinLat.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((decimal)(Original_GPSMinLat.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSMinLon.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((decimal)(Original_GPSMinLon.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSMinAlt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[66].Value = ((decimal)(Original_GPSMinAlt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSMinSpd.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[68].Value = ((decimal)(Original_GPSMinSpd.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSMaxLat.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[70].Value = ((decimal)(Original_GPSMaxLat.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSMaxLon.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[72].Value = ((decimal)(Original_GPSMaxLon.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSMaxAlt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[74].Value = ((decimal)(Original_GPSMaxAlt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSMaxSpd.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[76].Value = ((decimal)(Original_GPSMaxSpd.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSBestLat.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[78].Value = ((decimal)(Original_GPSBestLat.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSBestLon.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[80].Value = ((decimal)(Original_GPSBestLon.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSBestAlt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[82].Value = ((decimal)(Original_GPSBestAlt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            if ((Original_Datasize == null)) {
                this.Adapter.DeleteCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[84].Value = ((string)(Original_Datasize));
            }
            if ((Original_IPType == null)) {
                this.Adapter.DeleteCommand.Parameters[85].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[85].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[86].Value = ((string)(Original_IPType));
            }
            if ((Original_IP == null)) {
                this.Adapter.DeleteCommand.Parameters[87].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[87].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[88].Value = ((string)(Original_IP));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string oui, 
                    global::System.Nullable<decimal> totalpacketsweak, 
                    global::System.Nullable<decimal> totalpacketstotal, 
                    global::System.Nullable<decimal> totalpacketsllc, 
                    global::System.Nullable<decimal> totalpacketsdupeiv, 
                    global::System.Nullable<decimal> totalpacketsdata, 
                    global::System.Nullable<decimal> totalpacketscrypt, 
                    string Network, 
                    string NetType, 
                    string ESSID, 
                    string BSSID, 
                    string Info, 
                    global::System.Nullable<decimal> Channel, 
                    string Cloaked, 
                    string Encryption, 
                    string Decrypted, 
                    global::System.Nullable<decimal> MaxRate, 
                    global::System.Nullable<decimal> MaxSeenRate, 
                    string Beacon, 
                    string LLC, 
                    string Data, 
                    string Crypt, 
                    global::System.Nullable<decimal> Weak, 
                    global::System.Nullable<decimal> Total, 
                    global::System.Nullable<decimal> Carrier, 
                    string Encoding, 
                    string FirstTime, 
                    string LastTime, 
                    string BestQuality, 
                    global::System.Nullable<decimal> BestSignal, 
                    global::System.Nullable<decimal> BestNoise, 
                    global::System.Nullable<decimal> GPSMinLat, 
                    global::System.Nullable<decimal> GPSMinLon, 
                    global::System.Nullable<decimal> GPSMinAlt, 
                    global::System.Nullable<decimal> GPSMinSpd, 
                    global::System.Nullable<decimal> GPSMaxLat, 
                    global::System.Nullable<decimal> GPSMaxLon, 
                    global::System.Nullable<decimal> GPSMaxAlt, 
                    global::System.Nullable<decimal> GPSMaxSpd, 
                    global::System.Nullable<decimal> GPSBestLat, 
                    global::System.Nullable<decimal> GPSBestLon, 
                    global::System.Nullable<decimal> GPSBestAlt, 
                    string Datasize, 
                    string IPType, 
                    string IP) {
            if ((oui == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(oui));
            }
            if ((totalpacketsweak.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(totalpacketsweak.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((totalpacketstotal.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(totalpacketstotal.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((totalpacketsllc.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(totalpacketsllc.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((totalpacketsdupeiv.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(totalpacketsdupeiv.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((totalpacketsdata.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(totalpacketsdata.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((totalpacketscrypt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(totalpacketscrypt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Network == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Network));
            }
            if ((NetType == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(NetType));
            }
            if ((ESSID == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ESSID));
            }
            if ((BSSID == null)) {
                throw new global::System.ArgumentNullException("BSSID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(BSSID));
            }
            if ((Info == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Info));
            }
            if ((Channel.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(Channel.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Cloaked == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Cloaked));
            }
            if ((Encryption == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(Encryption));
            }
            if ((Decrypted == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(Decrypted));
            }
            if ((MaxRate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((decimal)(MaxRate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((MaxSeenRate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((decimal)(MaxSeenRate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Beacon == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(Beacon));
            }
            if ((LLC == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(LLC));
            }
            if ((Data == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(Data));
            }
            if ((Crypt == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(Crypt));
            }
            if ((Weak.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((decimal)(Weak.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Total.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((decimal)(Total.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Carrier.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((decimal)(Carrier.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Encoding == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(Encoding));
            }
            if ((FirstTime == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(FirstTime));
            }
            if ((LastTime == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(LastTime));
            }
            if ((BestQuality == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(BestQuality));
            }
            if ((BestSignal.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((decimal)(BestSignal.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((BestNoise.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((decimal)(BestNoise.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((GPSMinLat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((decimal)(GPSMinLat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((GPSMinLon.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((decimal)(GPSMinLon.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((GPSMinAlt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((decimal)(GPSMinAlt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((GPSMinSpd.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[34].Value = ((decimal)(GPSMinSpd.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((GPSMaxLat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((decimal)(GPSMaxLat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((GPSMaxLon.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((decimal)(GPSMaxLon.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((GPSMaxAlt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[37].Value = ((decimal)(GPSMaxAlt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((GPSMaxSpd.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[38].Value = ((decimal)(GPSMaxSpd.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((GPSBestLat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[39].Value = ((decimal)(GPSBestLat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((GPSBestLon.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[40].Value = ((decimal)(GPSBestLon.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((GPSBestAlt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[41].Value = ((decimal)(GPSBestAlt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((Datasize == null)) {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = ((string)(Datasize));
            }
            if ((IPType == null)) {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = ((string)(IPType));
            }
            if ((IP == null)) {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = ((string)(IP));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string oui, 
                    global::System.Nullable<decimal> totalpacketsweak, 
                    global::System.Nullable<decimal> totalpacketstotal, 
                    global::System.Nullable<decimal> totalpacketsllc, 
                    global::System.Nullable<decimal> totalpacketsdupeiv, 
                    global::System.Nullable<decimal> totalpacketsdata, 
                    global::System.Nullable<decimal> totalpacketscrypt, 
                    string Network, 
                    string NetType, 
                    string ESSID, 
                    string BSSID, 
                    string Info, 
                    global::System.Nullable<decimal> Channel, 
                    string Cloaked, 
                    string Encryption, 
                    string Decrypted, 
                    global::System.Nullable<decimal> MaxRate, 
                    global::System.Nullable<decimal> MaxSeenRate, 
                    string Beacon, 
                    string LLC, 
                    string Data, 
                    string Crypt, 
                    global::System.Nullable<decimal> Weak, 
                    global::System.Nullable<decimal> Total, 
                    global::System.Nullable<decimal> Carrier, 
                    string Encoding, 
                    string FirstTime, 
                    string LastTime, 
                    string BestQuality, 
                    global::System.Nullable<decimal> BestSignal, 
                    global::System.Nullable<decimal> BestNoise, 
                    global::System.Nullable<decimal> GPSMinLat, 
                    global::System.Nullable<decimal> GPSMinLon, 
                    global::System.Nullable<decimal> GPSMinAlt, 
                    global::System.Nullable<decimal> GPSMinSpd, 
                    global::System.Nullable<decimal> GPSMaxLat, 
                    global::System.Nullable<decimal> GPSMaxLon, 
                    global::System.Nullable<decimal> GPSMaxAlt, 
                    global::System.Nullable<decimal> GPSMaxSpd, 
                    global::System.Nullable<decimal> GPSBestLat, 
                    global::System.Nullable<decimal> GPSBestLon, 
                    global::System.Nullable<decimal> GPSBestAlt, 
                    string Datasize, 
                    string IPType, 
                    string IP, 
                    string Original_oui, 
                    global::System.Nullable<decimal> Original_totalpacketsweak, 
                    global::System.Nullable<decimal> Original_totalpacketstotal, 
                    global::System.Nullable<decimal> Original_totalpacketsllc, 
                    global::System.Nullable<decimal> Original_totalpacketsdupeiv, 
                    global::System.Nullable<decimal> Original_totalpacketsdata, 
                    global::System.Nullable<decimal> Original_totalpacketscrypt, 
                    string Original_Network, 
                    string Original_NetType, 
                    string Original_ESSID, 
                    string Original_BSSID, 
                    string Original_Info, 
                    global::System.Nullable<decimal> Original_Channel, 
                    string Original_Cloaked, 
                    string Original_Encryption, 
                    string Original_Decrypted, 
                    global::System.Nullable<decimal> Original_MaxRate, 
                    global::System.Nullable<decimal> Original_MaxSeenRate, 
                    string Original_Beacon, 
                    string Original_LLC, 
                    string Original_Data, 
                    string Original_Crypt, 
                    global::System.Nullable<decimal> Original_Weak, 
                    global::System.Nullable<decimal> Original_Total, 
                    global::System.Nullable<decimal> Original_Carrier, 
                    string Original_Encoding, 
                    string Original_FirstTime, 
                    string Original_LastTime, 
                    string Original_BestQuality, 
                    global::System.Nullable<decimal> Original_BestSignal, 
                    global::System.Nullable<decimal> Original_BestNoise, 
                    global::System.Nullable<decimal> Original_GPSMinLat, 
                    global::System.Nullable<decimal> Original_GPSMinLon, 
                    global::System.Nullable<decimal> Original_GPSMinAlt, 
                    global::System.Nullable<decimal> Original_GPSMinSpd, 
                    global::System.Nullable<decimal> Original_GPSMaxLat, 
                    global::System.Nullable<decimal> Original_GPSMaxLon, 
                    global::System.Nullable<decimal> Original_GPSMaxAlt, 
                    global::System.Nullable<decimal> Original_GPSMaxSpd, 
                    global::System.Nullable<decimal> Original_GPSBestLat, 
                    global::System.Nullable<decimal> Original_GPSBestLon, 
                    global::System.Nullable<decimal> Original_GPSBestAlt, 
                    string Original_Datasize, 
                    string Original_IPType, 
                    string Original_IP) {
            if ((oui == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(oui));
            }
            if ((totalpacketsweak.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(totalpacketsweak.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((totalpacketstotal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(totalpacketstotal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((totalpacketsllc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(totalpacketsllc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((totalpacketsdupeiv.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(totalpacketsdupeiv.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((totalpacketsdata.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(totalpacketsdata.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((totalpacketscrypt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(totalpacketscrypt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Network == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Network));
            }
            if ((NetType == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(NetType));
            }
            if ((ESSID == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ESSID));
            }
            if ((BSSID == null)) {
                throw new global::System.ArgumentNullException("BSSID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(BSSID));
            }
            if ((Info == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Info));
            }
            if ((Channel.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Channel.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Cloaked == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Cloaked));
            }
            if ((Encryption == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Encryption));
            }
            if ((Decrypted == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Decrypted));
            }
            if ((MaxRate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(MaxRate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((MaxSeenRate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(MaxSeenRate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Beacon == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Beacon));
            }
            if ((LLC == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(LLC));
            }
            if ((Data == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Data));
            }
            if ((Crypt == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Crypt));
            }
            if ((Weak.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(Weak.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Total.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(Total.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Carrier.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((decimal)(Carrier.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Encoding == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Encoding));
            }
            if ((FirstTime == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(FirstTime));
            }
            if ((LastTime == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(LastTime));
            }
            if ((BestQuality == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(BestQuality));
            }
            if ((BestSignal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((decimal)(BestSignal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((BestNoise.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((decimal)(BestNoise.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((GPSMinLat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((decimal)(GPSMinLat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((GPSMinLon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((decimal)(GPSMinLon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((GPSMinAlt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((decimal)(GPSMinAlt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((GPSMinSpd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((decimal)(GPSMinSpd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((GPSMaxLat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((decimal)(GPSMaxLat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((GPSMaxLon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((decimal)(GPSMaxLon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((GPSMaxAlt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((decimal)(GPSMaxAlt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((GPSMaxSpd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((decimal)(GPSMaxSpd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((GPSBestLat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((decimal)(GPSBestLat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((GPSBestLon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((decimal)(GPSBestLon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((GPSBestAlt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((decimal)(GPSBestAlt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((Datasize == null)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Datasize));
            }
            if ((IPType == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(IPType));
            }
            if ((IP == null)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(IP));
            }
            if ((Original_oui == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_oui));
            }
            if ((Original_totalpacketsweak.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((decimal)(Original_totalpacketsweak.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_totalpacketstotal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((decimal)(Original_totalpacketstotal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_totalpacketsllc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((decimal)(Original_totalpacketsllc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((Original_totalpacketsdupeiv.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((decimal)(Original_totalpacketsdupeiv.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_totalpacketsdata.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((decimal)(Original_totalpacketsdata.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_totalpacketscrypt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((decimal)(Original_totalpacketscrypt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_Network == null)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((string)(Original_Network));
            }
            if ((Original_NetType == null)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[62].Value = ((string)(Original_NetType));
            }
            if ((Original_ESSID == null)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[64].Value = ((string)(Original_ESSID));
            }
            if ((Original_BSSID == null)) {
                throw new global::System.ArgumentNullException("Original_BSSID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((string)(Original_BSSID));
            }
            if ((Original_Info == null)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((string)(Original_Info));
            }
            if ((Original_Channel.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((decimal)(Original_Channel.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            if ((Original_Cloaked == null)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[71].Value = ((string)(Original_Cloaked));
            }
            if ((Original_Encryption == null)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((string)(Original_Encryption));
            }
            if ((Original_Decrypted == null)) {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[75].Value = ((string)(Original_Decrypted));
            }
            if ((Original_MaxRate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[77].Value = ((decimal)(Original_MaxRate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            if ((Original_MaxSeenRate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[79].Value = ((decimal)(Original_MaxSeenRate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            if ((Original_Beacon == null)) {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[81].Value = ((string)(Original_Beacon));
            }
            if ((Original_LLC == null)) {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[83].Value = ((string)(Original_LLC));
            }
            if ((Original_Data == null)) {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[85].Value = ((string)(Original_Data));
            }
            if ((Original_Crypt == null)) {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[87].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[87].Value = ((string)(Original_Crypt));
            }
            if ((Original_Weak.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[89].Value = ((decimal)(Original_Weak.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[89].Value = global::System.DBNull.Value;
            }
            if ((Original_Total.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[91].Value = ((decimal)(Original_Total.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[91].Value = global::System.DBNull.Value;
            }
            if ((Original_Carrier.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[93].Value = ((decimal)(Original_Carrier.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[93].Value = global::System.DBNull.Value;
            }
            if ((Original_Encoding == null)) {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[95].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[95].Value = ((string)(Original_Encoding));
            }
            if ((Original_FirstTime == null)) {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[97].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[97].Value = ((string)(Original_FirstTime));
            }
            if ((Original_LastTime == null)) {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[99].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[99].Value = ((string)(Original_LastTime));
            }
            if ((Original_BestQuality == null)) {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[101].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[101].Value = ((string)(Original_BestQuality));
            }
            if ((Original_BestSignal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[103].Value = ((decimal)(Original_BestSignal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[103].Value = global::System.DBNull.Value;
            }
            if ((Original_BestNoise.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[104].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[105].Value = ((decimal)(Original_BestNoise.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[104].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[105].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSMinLat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[106].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[107].Value = ((decimal)(Original_GPSMinLat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[106].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[107].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSMinLon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[108].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[109].Value = ((decimal)(Original_GPSMinLon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[108].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[109].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSMinAlt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[110].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[111].Value = ((decimal)(Original_GPSMinAlt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[110].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[111].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSMinSpd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[112].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[113].Value = ((decimal)(Original_GPSMinSpd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[112].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[113].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSMaxLat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[114].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[115].Value = ((decimal)(Original_GPSMaxLat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[114].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[115].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSMaxLon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[116].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[117].Value = ((decimal)(Original_GPSMaxLon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[116].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[117].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSMaxAlt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[118].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[119].Value = ((decimal)(Original_GPSMaxAlt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[118].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[119].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSMaxSpd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[120].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[121].Value = ((decimal)(Original_GPSMaxSpd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[120].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[121].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSBestLat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[122].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[123].Value = ((decimal)(Original_GPSBestLat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[122].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[123].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSBestLon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[124].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[125].Value = ((decimal)(Original_GPSBestLon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[124].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[125].Value = global::System.DBNull.Value;
            }
            if ((Original_GPSBestAlt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[126].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[127].Value = ((decimal)(Original_GPSBestAlt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[126].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[127].Value = global::System.DBNull.Value;
            }
            if ((Original_Datasize == null)) {
                this.Adapter.UpdateCommand.Parameters[128].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[129].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[128].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[129].Value = ((string)(Original_Datasize));
            }
            if ((Original_IPType == null)) {
                this.Adapter.UpdateCommand.Parameters[130].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[131].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[130].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[131].Value = ((string)(Original_IPType));
            }
            if ((Original_IP == null)) {
                this.Adapter.UpdateCommand.Parameters[132].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[133].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[132].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[133].Value = ((string)(Original_IP));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string oui, 
                    global::System.Nullable<decimal> totalpacketsweak, 
                    global::System.Nullable<decimal> totalpacketstotal, 
                    global::System.Nullable<decimal> totalpacketsllc, 
                    global::System.Nullable<decimal> totalpacketsdupeiv, 
                    global::System.Nullable<decimal> totalpacketsdata, 
                    global::System.Nullable<decimal> totalpacketscrypt, 
                    string Network, 
                    string NetType, 
                    string ESSID, 
                    string Info, 
                    global::System.Nullable<decimal> Channel, 
                    string Cloaked, 
                    string Encryption, 
                    string Decrypted, 
                    global::System.Nullable<decimal> MaxRate, 
                    global::System.Nullable<decimal> MaxSeenRate, 
                    string Beacon, 
                    string LLC, 
                    string Data, 
                    string Crypt, 
                    global::System.Nullable<decimal> Weak, 
                    global::System.Nullable<decimal> Total, 
                    global::System.Nullable<decimal> Carrier, 
                    string Encoding, 
                    string FirstTime, 
                    string LastTime, 
                    string BestQuality, 
                    global::System.Nullable<decimal> BestSignal, 
                    global::System.Nullable<decimal> BestNoise, 
                    global::System.Nullable<decimal> GPSMinLat, 
                    global::System.Nullable<decimal> GPSMinLon, 
                    global::System.Nullable<decimal> GPSMinAlt, 
                    global::System.Nullable<decimal> GPSMinSpd, 
                    global::System.Nullable<decimal> GPSMaxLat, 
                    global::System.Nullable<decimal> GPSMaxLon, 
                    global::System.Nullable<decimal> GPSMaxAlt, 
                    global::System.Nullable<decimal> GPSMaxSpd, 
                    global::System.Nullable<decimal> GPSBestLat, 
                    global::System.Nullable<decimal> GPSBestLon, 
                    global::System.Nullable<decimal> GPSBestAlt, 
                    string Datasize, 
                    string IPType, 
                    string IP, 
                    string Original_oui, 
                    global::System.Nullable<decimal> Original_totalpacketsweak, 
                    global::System.Nullable<decimal> Original_totalpacketstotal, 
                    global::System.Nullable<decimal> Original_totalpacketsllc, 
                    global::System.Nullable<decimal> Original_totalpacketsdupeiv, 
                    global::System.Nullable<decimal> Original_totalpacketsdata, 
                    global::System.Nullable<decimal> Original_totalpacketscrypt, 
                    string Original_Network, 
                    string Original_NetType, 
                    string Original_ESSID, 
                    string Original_BSSID, 
                    string Original_Info, 
                    global::System.Nullable<decimal> Original_Channel, 
                    string Original_Cloaked, 
                    string Original_Encryption, 
                    string Original_Decrypted, 
                    global::System.Nullable<decimal> Original_MaxRate, 
                    global::System.Nullable<decimal> Original_MaxSeenRate, 
                    string Original_Beacon, 
                    string Original_LLC, 
                    string Original_Data, 
                    string Original_Crypt, 
                    global::System.Nullable<decimal> Original_Weak, 
                    global::System.Nullable<decimal> Original_Total, 
                    global::System.Nullable<decimal> Original_Carrier, 
                    string Original_Encoding, 
                    string Original_FirstTime, 
                    string Original_LastTime, 
                    string Original_BestQuality, 
                    global::System.Nullable<decimal> Original_BestSignal, 
                    global::System.Nullable<decimal> Original_BestNoise, 
                    global::System.Nullable<decimal> Original_GPSMinLat, 
                    global::System.Nullable<decimal> Original_GPSMinLon, 
                    global::System.Nullable<decimal> Original_GPSMinAlt, 
                    global::System.Nullable<decimal> Original_GPSMinSpd, 
                    global::System.Nullable<decimal> Original_GPSMaxLat, 
                    global::System.Nullable<decimal> Original_GPSMaxLon, 
                    global::System.Nullable<decimal> Original_GPSMaxAlt, 
                    global::System.Nullable<decimal> Original_GPSMaxSpd, 
                    global::System.Nullable<decimal> Original_GPSBestLat, 
                    global::System.Nullable<decimal> Original_GPSBestLon, 
                    global::System.Nullable<decimal> Original_GPSBestAlt, 
                    string Original_Datasize, 
                    string Original_IPType, 
                    string Original_IP) {
            return this.Update(oui, totalpacketsweak, totalpacketstotal, totalpacketsllc, totalpacketsdupeiv, totalpacketsdata, totalpacketscrypt, Network, NetType, ESSID, Original_BSSID, Info, Channel, Cloaked, Encryption, Decrypted, MaxRate, MaxSeenRate, Beacon, LLC, Data, Crypt, Weak, Total, Carrier, Encoding, FirstTime, LastTime, BestQuality, BestSignal, BestNoise, GPSMinLat, GPSMinLon, GPSMinAlt, GPSMinSpd, GPSMaxLat, GPSMaxLon, GPSMaxAlt, GPSMaxSpd, GPSBestLat, GPSBestLon, GPSBestAlt, Datasize, IPType, IP, Original_oui, Original_totalpacketsweak, Original_totalpacketstotal, Original_totalpacketsllc, Original_totalpacketsdupeiv, Original_totalpacketsdata, Original_totalpacketscrypt, Original_Network, Original_NetType, Original_ESSID, Original_BSSID, Original_Info, Original_Channel, Original_Cloaked, Original_Encryption, Original_Decrypted, Original_MaxRate, Original_MaxSeenRate, Original_Beacon, Original_LLC, Original_Data, Original_Crypt, Original_Weak, Original_Total, Original_Carrier, Original_Encoding, Original_FirstTime, Original_LastTime, Original_BestQuality, Original_BestSignal, Original_BestNoise, Original_GPSMinLat, Original_GPSMinLon, Original_GPSMinAlt, Original_GPSMinSpd, Original_GPSMaxLat, Original_GPSMaxLon, Original_GPSMaxAlt, Original_GPSMaxSpd, Original_GPSBestLat, Original_GPSBestLon, Original_GPSBestAlt, Original_Datasize, Original_IPType, Original_IP);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateQuery(string oui, string BSSID) {
            global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[4];
            if ((oui == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(oui));
            }
            if ((BSSID == null)) {
                throw new global::System.ArgumentNullException("BSSID");
            }
            else {
                command.Parameters[1].Value = ((string)(BSSID));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GPSDatanewTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GPSDatanewTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GPSDatanew";
            tableMapping.ColumnMappings.Add("bssid", "bssid");
            tableMapping.ColumnMappings.Add("source", "source");
            tableMapping.ColumnMappings.Add("timesec", "timesec");
            tableMapping.ColumnMappings.Add("timeusec", "timeusec");
            tableMapping.ColumnMappings.Add("lat", "lat");
            tableMapping.ColumnMappings.Add("lon", "lon");
            tableMapping.ColumnMappings.Add("alt", "alt");
            tableMapping.ColumnMappings.Add("speed", "speed");
            tableMapping.ColumnMappings.Add("heading", "heading");
            tableMapping.ColumnMappings.Add("fix", "fix");
            tableMapping.ColumnMappings.Add("signal", "signal");
            tableMapping.ColumnMappings.Add("quality", "quality");
            tableMapping.ColumnMappings.Add("noise", "noise");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [GPSData] WHERE (([bssid] = @Original_bssid) AND ((@IsNull_source = 1 AND [source] IS NULL) OR ([source] = @Original_source)) AND ((@IsNull_timesec = 1 AND [timesec] IS NULL) OR ([timesec] = @Original_timesec)) AND ((@IsNull_timeusec = 1 AND [timeusec] IS NULL) OR ([timeusec] = @Original_timeusec)) AND ((@IsNull_lat = 1 AND [lat] IS NULL) OR ([lat] = @Original_lat)) AND ((@IsNull_lon = 1 AND [lon] IS NULL) OR ([lon] = @Original_lon)) AND ((@IsNull_alt = 1 AND [alt] IS NULL) OR ([alt] = @Original_alt)) AND ((@IsNull_speed = 1 AND [speed] IS NULL) OR ([speed] = @Original_speed)) AND ((@IsNull_heading = 1 AND [heading] IS NULL) OR ([heading] = @Original_heading)) AND ((@IsNull_fix = 1 AND [fix] IS NULL) OR ([fix] = @Original_fix)) AND ((@IsNull_signal = 1 AND [signal] IS NULL) OR ([signal] = @Original_signal)) AND ((@IsNull_quality = 1 AND [quality] IS NULL) OR ([quality] = @Original_quality)) AND ((@IsNull_noise = 1 AND [noise] IS NULL) OR ([noise] = @Original_noise)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_bssid";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "bssid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_source";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_source";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_timesec";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "timesec";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_timesec";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "timesec";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_timeusec";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "timeusec";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_timeusec";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "timeusec";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_lat";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "lat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_lat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "lat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_lon";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "lon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_lon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "lon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_alt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "alt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_alt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "alt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_speed";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "speed";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_speed";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "speed";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_heading";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "heading";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_heading";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "heading";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_fix";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "fix";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_fix";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "fix";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_signal";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "signal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_signal";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "signal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_quality";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "quality";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_quality";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "quality";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_noise";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "noise";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_noise";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "noise";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [GPSData] ([bssid], [source], [timesec], [timeusec], [lat], [lon], [alt], [speed], [heading], [fix], [signal], [quality], [noise]) VALUES (@bssid, @source, @timesec, @timeusec, @lat, @lon, @alt, @speed, @heading, @fix, @signal, @quality, @noise)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@bssid";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "bssid";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@source";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "source";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@timesec";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "timesec";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@timeusec";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "timeusec";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@lat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "lat";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@lon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "lon";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@alt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "alt";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@speed";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "speed";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@heading";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "heading";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@fix";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "fix";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@signal";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "signal";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@quality";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "quality";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@noise";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "noise";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GPSData] SET [bssid] = @bssid, [source] = @source, [timesec] = @timesec, [timeusec] = @timeusec, [lat] = @lat, [lon] = @lon, [alt] = @alt, [speed] = @speed, [heading] = @heading, [fix] = @fix, [signal] = @signal, [quality] = @quality, [noise] = @noise WHERE (([bssid] = @Original_bssid) AND ((@IsNull_source = 1 AND [source] IS NULL) OR ([source] = @Original_source)) AND ((@IsNull_timesec = 1 AND [timesec] IS NULL) OR ([timesec] = @Original_timesec)) AND ((@IsNull_timeusec = 1 AND [timeusec] IS NULL) OR ([timeusec] = @Original_timeusec)) AND ((@IsNull_lat = 1 AND [lat] IS NULL) OR ([lat] = @Original_lat)) AND ((@IsNull_lon = 1 AND [lon] IS NULL) OR ([lon] = @Original_lon)) AND ((@IsNull_alt = 1 AND [alt] IS NULL) OR ([alt] = @Original_alt)) AND ((@IsNull_speed = 1 AND [speed] IS NULL) OR ([speed] = @Original_speed)) AND ((@IsNull_heading = 1 AND [heading] IS NULL) OR ([heading] = @Original_heading)) AND ((@IsNull_fix = 1 AND [fix] IS NULL) OR ([fix] = @Original_fix)) AND ((@IsNull_signal = 1 AND [signal] IS NULL) OR ([signal] = @Original_signal)) AND ((@IsNull_quality = 1 AND [quality] IS NULL) OR ([quality] = @Original_quality)) AND ((@IsNull_noise = 1 AND [noise] IS NULL) OR ([noise] = @Original_noise)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@bssid";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "bssid";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@source";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "source";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@timesec";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "timesec";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@timeusec";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "timeusec";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@lat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "lat";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@lon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "lon";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@alt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "alt";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@speed";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "speed";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@heading";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "heading";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@fix";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "fix";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@signal";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "signal";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@quality";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "quality";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@noise";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "noise";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_bssid";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "bssid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_source";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_source";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_timesec";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "timesec";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_timesec";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "timesec";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_timeusec";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "timeusec";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_timeusec";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "timeusec";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_lat";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "lat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_lat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "lat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_lon";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "lon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_lon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "lon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_alt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "alt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_alt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "alt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_speed";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "speed";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_speed";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "speed";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_heading";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "heading";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_heading";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "heading";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_fix";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "fix";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_fix";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "fix";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_signal";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "signal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_signal";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "signal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_quality";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "quality";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_quality";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "quality";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_noise";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "noise";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_noise";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "noise";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::KismetLogger.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[2];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [bssid], [source], [timesec], [timeusec], [lat], [lon], [alt], [speed], [h" +
                "eading], [fix], [signal], [quality], [noise] FROM [GPSData]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     bssid, source, timesec, timeusec, lat, lon, alt, speed, heading, fix, " +
                "signal, quality, noise\r\nFROM         GPSData\r\nWHERE     (bssid = @Param1)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Param1";
            param.DbType = global::System.Data.DbType.String;
            param.Size = 2147483647;
            param.SourceColumn = "bssid";
            this._commandCollection[1].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(KismetData.GPSDatanewDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual KismetData.GPSDatanewDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            KismetData.GPSDatanewDataTable dataTable = new KismetData.GPSDatanewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGpsData(KismetData.GPSDatanewDataTable dataTable, string Param1) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Param1 == null)) {
                throw new global::System.ArgumentNullException("Param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual KismetData.GPSDatanewDataTable GetDataByGpsData(string Param1) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Param1 == null)) {
                throw new global::System.ArgumentNullException("Param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
            }
            KismetData.GPSDatanewDataTable dataTable = new KismetData.GPSDatanewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(KismetData.GPSDatanewDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(KismetData dataSet) {
            return this.Adapter.Update(dataSet, "GPSDatanew");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_bssid, string Original_source, global::System.Nullable<decimal> Original_timesec, string Original_timeusec, global::System.Nullable<decimal> Original_lat, global::System.Nullable<decimal> Original_lon, global::System.Nullable<decimal> Original_alt, global::System.Nullable<decimal> Original_speed, global::System.Nullable<decimal> Original_heading, string Original_fix, global::System.Nullable<decimal> Original_signal, global::System.Nullable<decimal> Original_quality, global::System.Nullable<decimal> Original_noise) {
            if ((Original_bssid == null)) {
                throw new global::System.ArgumentNullException("Original_bssid");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_bssid));
            }
            if ((Original_source == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_source));
            }
            if ((Original_timesec.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_timesec.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_timeusec == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_timeusec));
            }
            if ((Original_lat.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_lat.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_lon.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((decimal)(Original_lon.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_alt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_alt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_speed.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((decimal)(Original_speed.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_heading.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((decimal)(Original_heading.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_fix == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_fix));
            }
            if ((Original_signal.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((decimal)(Original_signal.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_quality.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((decimal)(Original_quality.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_noise.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((decimal)(Original_noise.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string bssid, string source, global::System.Nullable<decimal> timesec, string timeusec, global::System.Nullable<decimal> lat, global::System.Nullable<decimal> lon, global::System.Nullable<decimal> alt, global::System.Nullable<decimal> speed, global::System.Nullable<decimal> heading, string fix, global::System.Nullable<decimal> signal, global::System.Nullable<decimal> quality, global::System.Nullable<decimal> noise) {
            if ((bssid == null)) {
                throw new global::System.ArgumentNullException("bssid");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(bssid));
            }
            if ((source == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(source));
            }
            if ((timesec.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(timesec.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((timeusec == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(timeusec));
            }
            if ((lat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(lat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((lon.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(lon.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((alt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(alt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((speed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(speed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((heading.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(heading.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((fix == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(fix));
            }
            if ((signal.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(signal.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((quality.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(quality.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((noise.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(noise.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string bssid, 
                    string source, 
                    global::System.Nullable<decimal> timesec, 
                    string timeusec, 
                    global::System.Nullable<decimal> lat, 
                    global::System.Nullable<decimal> lon, 
                    global::System.Nullable<decimal> alt, 
                    global::System.Nullable<decimal> speed, 
                    global::System.Nullable<decimal> heading, 
                    string fix, 
                    global::System.Nullable<decimal> signal, 
                    global::System.Nullable<decimal> quality, 
                    global::System.Nullable<decimal> noise, 
                    string Original_bssid, 
                    string Original_source, 
                    global::System.Nullable<decimal> Original_timesec, 
                    string Original_timeusec, 
                    global::System.Nullable<decimal> Original_lat, 
                    global::System.Nullable<decimal> Original_lon, 
                    global::System.Nullable<decimal> Original_alt, 
                    global::System.Nullable<decimal> Original_speed, 
                    global::System.Nullable<decimal> Original_heading, 
                    string Original_fix, 
                    global::System.Nullable<decimal> Original_signal, 
                    global::System.Nullable<decimal> Original_quality, 
                    global::System.Nullable<decimal> Original_noise) {
            if ((bssid == null)) {
                throw new global::System.ArgumentNullException("bssid");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(bssid));
            }
            if ((source == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(source));
            }
            if ((timesec.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(timesec.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((timeusec == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(timeusec));
            }
            if ((lat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(lat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((lon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(lon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((alt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(alt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((speed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(speed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((heading.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(heading.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((fix == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(fix));
            }
            if ((signal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(signal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((quality.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(quality.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((noise.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(noise.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_bssid == null)) {
                throw new global::System.ArgumentNullException("Original_bssid");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_bssid));
            }
            if ((Original_source == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_source));
            }
            if ((Original_timesec.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(Original_timesec.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_timeusec == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_timeusec));
            }
            if ((Original_lat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((decimal)(Original_lat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Original_lon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(Original_lon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Original_alt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((decimal)(Original_alt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Original_speed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((decimal)(Original_speed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_heading.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((decimal)(Original_heading.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_fix == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_fix));
            }
            if ((Original_signal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((decimal)(Original_signal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((Original_quality.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((decimal)(Original_quality.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((Original_noise.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((decimal)(Original_noise.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string source, 
                    global::System.Nullable<decimal> timesec, 
                    string timeusec, 
                    global::System.Nullable<decimal> lat, 
                    global::System.Nullable<decimal> lon, 
                    global::System.Nullable<decimal> alt, 
                    global::System.Nullable<decimal> speed, 
                    global::System.Nullable<decimal> heading, 
                    string fix, 
                    global::System.Nullable<decimal> signal, 
                    global::System.Nullable<decimal> quality, 
                    global::System.Nullable<decimal> noise, 
                    string Original_bssid, 
                    string Original_source, 
                    global::System.Nullable<decimal> Original_timesec, 
                    string Original_timeusec, 
                    global::System.Nullable<decimal> Original_lat, 
                    global::System.Nullable<decimal> Original_lon, 
                    global::System.Nullable<decimal> Original_alt, 
                    global::System.Nullable<decimal> Original_speed, 
                    global::System.Nullable<decimal> Original_heading, 
                    string Original_fix, 
                    global::System.Nullable<decimal> Original_signal, 
                    global::System.Nullable<decimal> Original_quality, 
                    global::System.Nullable<decimal> Original_noise) {
            return this.Update(Original_bssid, source, timesec, timeusec, lat, lon, alt, speed, heading, fix, signal, quality, noise, Original_bssid, Original_source, Original_timesec, Original_timeusec, Original_lat, Original_lon, Original_alt, Original_speed, Original_heading, Original_fix, Original_signal, Original_quality, Original_noise);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ClientsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClientsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Clients";
            tableMapping.ColumnMappings.Add("Clientipaddress", "Clientipaddress");
            tableMapping.ColumnMappings.Add("oui", "oui");
            tableMapping.ColumnMappings.Add("bssid", "bssid");
            tableMapping.ColumnMappings.Add("clientmac", "clientmac");
            tableMapping.ColumnMappings.Add("clientencryption", "clientencryption");
            tableMapping.ColumnMappings.Add("clientfirsttime", "clientfirsttime");
            tableMapping.ColumnMappings.Add("clientgpsminlat", "clientgpsminlat");
            tableMapping.ColumnMappings.Add("clientgpsminlon", "clientgpsminlon");
            tableMapping.ColumnMappings.Add("clientgpsmaxlat", "clientgpsmaxlat");
            tableMapping.ColumnMappings.Add("clientgpsmaxlon", "clientgpsmaxlon");
            tableMapping.ColumnMappings.Add("clientgpsminalt", "clientgpsminalt");
            tableMapping.ColumnMappings.Add("clientgpsmaxalt", "clientgpsmaxalt");
            tableMapping.ColumnMappings.Add("clientgpsminspeed", "clientgpsminspeed");
            tableMapping.ColumnMappings.Add("clientgpsmaxspeed", "clientgpsmaxspeed");
            tableMapping.ColumnMappings.Add("clientdatasize", "clientdatasize");
            tableMapping.ColumnMappings.Add("clientmaxrate", "clientmaxrate");
            tableMapping.ColumnMappings.Add("clientmaxseenrate", "clientmaxseenrate");
            tableMapping.ColumnMappings.Add("clientlasttime", "clientlasttime");
            tableMapping.ColumnMappings.Add("clientpacketscrypt", "clientpacketscrypt");
            tableMapping.ColumnMappings.Add("clientpacketsdata", "clientpacketsdata");
            tableMapping.ColumnMappings.Add("clientpacketsweak", "clientpacketsweak");
            tableMapping.ColumnMappings.Add("Number", "Number");
            tableMapping.ColumnMappings.Add("Type", "Type");
            tableMapping.ColumnMappings.Add("wep", "wep");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Clients] WHERE (((@IsNull_Clientipaddress = 1 AND [Clientipaddress] " +
                "IS NULL) OR ([Clientipaddress] = @Original_Clientipaddress)) AND ((@IsNull_oui =" +
                " 1 AND [oui] IS NULL) OR ([oui] = @Original_oui)) AND ([bssid] = @Original_bssid" +
                ") AND ([clientmac] = @Original_clientmac) AND ((@IsNull_clientencryption = 1 AND" +
                " [clientencryption] IS NULL) OR ([clientencryption] = @Original_clientencryption" +
                ")) AND ((@IsNull_clientfirsttime = 1 AND [clientfirsttime] IS NULL) OR ([clientf" +
                "irsttime] = @Original_clientfirsttime)) AND ((@IsNull_clientgpsminlat = 1 AND [c" +
                "lientgpsminlat] IS NULL) OR ([clientgpsminlat] = @Original_clientgpsminlat)) AND" +
                " ((@IsNull_clientgpsminlon = 1 AND [clientgpsminlon] IS NULL) OR ([clientgpsminl" +
                "on] = @Original_clientgpsminlon)) AND ((@IsNull_clientgpsmaxlat = 1 AND [clientg" +
                "psmaxlat] IS NULL) OR ([clientgpsmaxlat] = @Original_clientgpsmaxlat)) AND ((@Is" +
                "Null_clientgpsmaxlon = 1 AND [clientgpsmaxlon] IS NULL) OR ([clientgpsmaxlon] = " +
                "@Original_clientgpsmaxlon)) AND ((@IsNull_clientgpsminalt = 1 AND [clientgpsmina" +
                "lt] IS NULL) OR ([clientgpsminalt] = @Original_clientgpsminalt)) AND ((@IsNull_c" +
                "lientgpsmaxalt = 1 AND [clientgpsmaxalt] IS NULL) OR ([clientgpsmaxalt] = @Origi" +
                "nal_clientgpsmaxalt)) AND ((@IsNull_clientgpsminspeed = 1 AND [clientgpsminspeed" +
                "] IS NULL) OR ([clientgpsminspeed] = @Original_clientgpsminspeed)) AND ((@IsNull" +
                "_clientgpsmaxspeed = 1 AND [clientgpsmaxspeed] IS NULL) OR ([clientgpsmaxspeed] " +
                "= @Original_clientgpsmaxspeed)) AND ((@IsNull_clientdatasize = 1 AND [clientdata" +
                "size] IS NULL) OR ([clientdatasize] = @Original_clientdatasize)) AND ((@IsNull_c" +
                "lientmaxrate = 1 AND [clientmaxrate] IS NULL) OR ([clientmaxrate] = @Original_cl" +
                "ientmaxrate)) AND ((@IsNull_clientmaxseenrate = 1 AND [clientmaxseenrate] IS NUL" +
                "L) OR ([clientmaxseenrate] = @Original_clientmaxseenrate)) AND ((@IsNull_clientl" +
                "asttime = 1 AND [clientlasttime] IS NULL) OR ([clientlasttime] = @Original_clien" +
                "tlasttime)) AND ((@IsNull_clientpacketscrypt = 1 AND [clientpacketscrypt] IS NUL" +
                "L) OR ([clientpacketscrypt] = @Original_clientpacketscrypt)) AND ((@IsNull_clien" +
                "tpacketsdata = 1 AND [clientpacketsdata] IS NULL) OR ([clientpacketsdata] = @Ori" +
                "ginal_clientpacketsdata)) AND ((@IsNull_clientpacketsweak = 1 AND [clientpackets" +
                "weak] IS NULL) OR ([clientpacketsweak] = @Original_clientpacketsweak)) AND ((@Is" +
                "Null_Number = 1 AND [Number] IS NULL) OR ([Number] = @Original_Number)) AND ((@I" +
                "sNull_Type = 1 AND [Type] IS NULL) OR ([Type] = @Original_Type)) AND ((@IsNull_w" +
                "ep = 1 AND [wep] IS NULL) OR ([wep] = @Original_wep)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Clientipaddress";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Clientipaddress";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Clientipaddress";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Clientipaddress";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_oui";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "oui";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_oui";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "oui";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_bssid";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "bssid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientmac";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientmac";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientencryption";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientencryption";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientencryption";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientencryption";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientfirsttime";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientfirsttime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientfirsttime";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientfirsttime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientgpsminlat";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientgpsminlat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientgpsminlat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsminlat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientgpsminlon";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientgpsminlon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientgpsminlon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsminlon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientgpsmaxlat";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientgpsmaxlat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientgpsmaxlat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsmaxlat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientgpsmaxlon";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientgpsmaxlon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientgpsmaxlon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsmaxlon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientgpsminalt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientgpsminalt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientgpsminalt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsminalt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientgpsmaxalt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientgpsmaxalt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientgpsmaxalt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsmaxalt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientgpsminspeed";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientgpsminspeed";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientgpsminspeed";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsminspeed";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientgpsmaxspeed";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientgpsmaxspeed";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientgpsmaxspeed";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsmaxspeed";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientdatasize";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientdatasize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientdatasize";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientdatasize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientmaxrate";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientmaxrate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientmaxrate";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientmaxrate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientmaxseenrate";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientmaxseenrate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientmaxseenrate";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientmaxseenrate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientlasttime";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientlasttime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientlasttime";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientlasttime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientpacketscrypt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientpacketscrypt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientpacketscrypt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientpacketscrypt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientpacketsdata";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientpacketsdata";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientpacketsdata";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientpacketsdata";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientpacketsweak";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientpacketsweak";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientpacketsweak";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientpacketsweak";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Number";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Number";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Number";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Number";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Type";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Type";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Type";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Type";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_wep";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "wep";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_wep";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "wep";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Clients] ([Clientipaddress], [oui], [bssid], [clientmac], [clientencryption], [clientfirsttime], [clientgpsminlat], [clientgpsminlon], [clientgpsmaxlat], [clientgpsmaxlon], [clientgpsminalt], [clientgpsmaxalt], [clientgpsminspeed], [clientgpsmaxspeed], [clientdatasize], [clientmaxrate], [clientmaxseenrate], [clientlasttime], [clientpacketscrypt], [clientpacketsdata], [clientpacketsweak], [Number], [Type], [wep]) VALUES (@Clientipaddress, @oui, @bssid, @clientmac, @clientencryption, @clientfirsttime, @clientgpsminlat, @clientgpsminlon, @clientgpsmaxlat, @clientgpsmaxlon, @clientgpsminalt, @clientgpsmaxalt, @clientgpsminspeed, @clientgpsmaxspeed, @clientdatasize, @clientmaxrate, @clientmaxseenrate, @clientlasttime, @clientpacketscrypt, @clientpacketsdata, @clientpacketsweak, @Number, @Type, @wep)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Clientipaddress";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Clientipaddress";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@oui";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "oui";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@bssid";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "bssid";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientmac";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientmac";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientencryption";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientencryption";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientfirsttime";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientfirsttime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientgpsminlat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsminlat";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientgpsminlon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsminlon";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientgpsmaxlat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsmaxlat";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientgpsmaxlon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsmaxlon";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientgpsminalt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsminalt";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientgpsmaxalt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsmaxalt";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientgpsminspeed";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsminspeed";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientgpsmaxspeed";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsmaxspeed";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientdatasize";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientdatasize";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientmaxrate";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientmaxrate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientmaxseenrate";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientmaxseenrate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientlasttime";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientlasttime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientpacketscrypt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientpacketscrypt";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientpacketsdata";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientpacketsdata";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientpacketsweak";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientpacketsweak";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Number";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Number";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Type";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Type";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@wep";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "wep";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Clients] SET [Clientipaddress] = @Clientipaddress, [oui] = @oui, [bssid] " +
                "= @bssid, [clientmac] = @clientmac, [clientencryption] = @clientencryption, [cli" +
                "entfirsttime] = @clientfirsttime, [clientgpsminlat] = @clientgpsminlat, [clientg" +
                "psminlon] = @clientgpsminlon, [clientgpsmaxlat] = @clientgpsmaxlat, [clientgpsma" +
                "xlon] = @clientgpsmaxlon, [clientgpsminalt] = @clientgpsminalt, [clientgpsmaxalt" +
                "] = @clientgpsmaxalt, [clientgpsminspeed] = @clientgpsminspeed, [clientgpsmaxspe" +
                "ed] = @clientgpsmaxspeed, [clientdatasize] = @clientdatasize, [clientmaxrate] = " +
                "@clientmaxrate, [clientmaxseenrate] = @clientmaxseenrate, [clientlasttime] = @cl" +
                "ientlasttime, [clientpacketscrypt] = @clientpacketscrypt, [clientpacketsdata] = " +
                "@clientpacketsdata, [clientpacketsweak] = @clientpacketsweak, [Number] = @Number" +
                ", [Type] = @Type, [wep] = @wep WHERE (((@IsNull_Clientipaddress = 1 AND [Clienti" +
                "paddress] IS NULL) OR ([Clientipaddress] = @Original_Clientipaddress)) AND ((@Is" +
                "Null_oui = 1 AND [oui] IS NULL) OR ([oui] = @Original_oui)) AND ([bssid] = @Orig" +
                "inal_bssid) AND ([clientmac] = @Original_clientmac) AND ((@IsNull_clientencrypti" +
                "on = 1 AND [clientencryption] IS NULL) OR ([clientencryption] = @Original_client" +
                "encryption)) AND ((@IsNull_clientfirsttime = 1 AND [clientfirsttime] IS NULL) OR" +
                " ([clientfirsttime] = @Original_clientfirsttime)) AND ((@IsNull_clientgpsminlat " +
                "= 1 AND [clientgpsminlat] IS NULL) OR ([clientgpsminlat] = @Original_clientgpsmi" +
                "nlat)) AND ((@IsNull_clientgpsminlon = 1 AND [clientgpsminlon] IS NULL) OR ([cli" +
                "entgpsminlon] = @Original_clientgpsminlon)) AND ((@IsNull_clientgpsmaxlat = 1 AN" +
                "D [clientgpsmaxlat] IS NULL) OR ([clientgpsmaxlat] = @Original_clientgpsmaxlat))" +
                " AND ((@IsNull_clientgpsmaxlon = 1 AND [clientgpsmaxlon] IS NULL) OR ([clientgps" +
                "maxlon] = @Original_clientgpsmaxlon)) AND ((@IsNull_clientgpsminalt = 1 AND [cli" +
                "entgpsminalt] IS NULL) OR ([clientgpsminalt] = @Original_clientgpsminalt)) AND (" +
                "(@IsNull_clientgpsmaxalt = 1 AND [clientgpsmaxalt] IS NULL) OR ([clientgpsmaxalt" +
                "] = @Original_clientgpsmaxalt)) AND ((@IsNull_clientgpsminspeed = 1 AND [clientg" +
                "psminspeed] IS NULL) OR ([clientgpsminspeed] = @Original_clientgpsminspeed)) AND" +
                " ((@IsNull_clientgpsmaxspeed = 1 AND [clientgpsmaxspeed] IS NULL) OR ([clientgps" +
                "maxspeed] = @Original_clientgpsmaxspeed)) AND ((@IsNull_clientdatasize = 1 AND [" +
                "clientdatasize] IS NULL) OR ([clientdatasize] = @Original_clientdatasize)) AND (" +
                "(@IsNull_clientmaxrate = 1 AND [clientmaxrate] IS NULL) OR ([clientmaxrate] = @O" +
                "riginal_clientmaxrate)) AND ((@IsNull_clientmaxseenrate = 1 AND [clientmaxseenra" +
                "te] IS NULL) OR ([clientmaxseenrate] = @Original_clientmaxseenrate)) AND ((@IsNu" +
                "ll_clientlasttime = 1 AND [clientlasttime] IS NULL) OR ([clientlasttime] = @Orig" +
                "inal_clientlasttime)) AND ((@IsNull_clientpacketscrypt = 1 AND [clientpacketscry" +
                "pt] IS NULL) OR ([clientpacketscrypt] = @Original_clientpacketscrypt)) AND ((@Is" +
                "Null_clientpacketsdata = 1 AND [clientpacketsdata] IS NULL) OR ([clientpacketsda" +
                "ta] = @Original_clientpacketsdata)) AND ((@IsNull_clientpacketsweak = 1 AND [cli" +
                "entpacketsweak] IS NULL) OR ([clientpacketsweak] = @Original_clientpacketsweak))" +
                " AND ((@IsNull_Number = 1 AND [Number] IS NULL) OR ([Number] = @Original_Number)" +
                ") AND ((@IsNull_Type = 1 AND [Type] IS NULL) OR ([Type] = @Original_Type)) AND (" +
                "(@IsNull_wep = 1 AND [wep] IS NULL) OR ([wep] = @Original_wep)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Clientipaddress";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Clientipaddress";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@oui";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "oui";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@bssid";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "bssid";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientmac";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientmac";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientencryption";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientencryption";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientfirsttime";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientfirsttime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientgpsminlat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsminlat";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientgpsminlon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsminlon";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientgpsmaxlat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsmaxlat";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientgpsmaxlon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsmaxlon";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientgpsminalt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsminalt";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientgpsmaxalt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsmaxalt";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientgpsminspeed";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsminspeed";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientgpsmaxspeed";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsmaxspeed";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientdatasize";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientdatasize";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientmaxrate";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientmaxrate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientmaxseenrate";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientmaxseenrate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientlasttime";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientlasttime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientpacketscrypt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientpacketscrypt";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientpacketsdata";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientpacketsdata";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientpacketsweak";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientpacketsweak";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Number";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Number";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Type";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Type";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@wep";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "wep";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Clientipaddress";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Clientipaddress";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Clientipaddress";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Clientipaddress";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_oui";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "oui";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_oui";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "oui";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_bssid";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "bssid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientmac";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientmac";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientencryption";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientencryption";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientencryption";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientencryption";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientfirsttime";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientfirsttime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientfirsttime";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientfirsttime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientgpsminlat";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientgpsminlat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientgpsminlat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsminlat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientgpsminlon";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientgpsminlon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientgpsminlon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsminlon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientgpsmaxlat";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientgpsmaxlat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientgpsmaxlat";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsmaxlat";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientgpsmaxlon";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientgpsmaxlon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientgpsmaxlon";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsmaxlon";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientgpsminalt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientgpsminalt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientgpsminalt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsminalt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientgpsmaxalt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientgpsmaxalt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientgpsmaxalt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsmaxalt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientgpsminspeed";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientgpsminspeed";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientgpsminspeed";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsminspeed";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientgpsmaxspeed";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientgpsmaxspeed";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientgpsmaxspeed";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientgpsmaxspeed";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientdatasize";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientdatasize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientdatasize";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientdatasize";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientmaxrate";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientmaxrate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientmaxrate";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientmaxrate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientmaxseenrate";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientmaxseenrate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientmaxseenrate";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientmaxseenrate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientlasttime";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientlasttime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientlasttime";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "clientlasttime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientpacketscrypt";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientpacketscrypt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientpacketscrypt";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientpacketscrypt";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientpacketsdata";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientpacketsdata";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientpacketsdata";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientpacketsdata";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientpacketsweak";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientpacketsweak";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientpacketsweak";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "clientpacketsweak";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Number";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Number";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Number";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Number";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Type";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Type";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Type";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "Type";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_wep";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "wep";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_wep";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "wep";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::KismetLogger.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[5];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [Clientipaddress], [oui], [bssid], [clientmac], [clientencryption], [clientfirsttime], [clientgpsminlat], [clientgpsminlon], [clientgpsmaxlat], [clientgpsmaxlon], [clientgpsminalt], [clientgpsmaxalt], [clientgpsminspeed], [clientgpsmaxspeed], [clientdatasize], [clientmaxrate], [clientmaxseenrate], [clientlasttime], [clientpacketscrypt], [clientpacketsdata], [clientpacketsweak], [Number], [Type], [wep] FROM [Clients]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     Clientipaddress, oui, bssid, clientmac, clientfirsttime, clientgpsminlat, clientgpsminlon, clientgpsmaxlat, clientgpsmaxlon, clientgpsminalt, 
                      clientgpsmaxalt, clientgpsminspeed, clientgpsmaxspeed, clientdatasize, clientmaxrate, clientmaxseenrate, clientlasttime, clientpacketscrypt, 
                      clientpacketsdata, clientpacketsweak, Number, Type, wep
FROM         Clients
WHERE     (bssid = @param1)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@param1";
            param.DbType = global::System.Data.DbType.String;
            param.Size = 2147483647;
            param.SourceColumn = "bssid";
            this._commandCollection[1].Parameters.Add(param);
            this._commandCollection[2] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT     Clientipaddress, oui, bssid, clientmac, clientencryption, clientfirsttime, clientgpsminlat, clientgpsminlon, clientgpsmaxlat, clientgpsmaxlon, 
                      clientgpsminalt, clientgpsmaxalt, clientgpsminspeed, clientgpsmaxspeed, clientdatasize, clientmaxrate, clientmaxseenrate, clientlasttime, 
                      clientpacketscrypt, clientpacketsdata, clientpacketsweak, Number, Type, wep
FROM         Clients
WHERE     (clientmac = @param1) AND (bssid = @param2)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@param1";
            param.DbType = global::System.Data.DbType.String;
            param.Size = 2147483647;
            param.SourceColumn = "clientmac";
            this._commandCollection[2].Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@param2";
            param.DbType = global::System.Data.DbType.String;
            param.Size = 2147483647;
            param.SourceColumn = "bssid";
            this._commandCollection[2].Parameters.Add(param);
            this._commandCollection[3] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT     Clientipaddress, oui, bssid, clientmac, clientencryption, clientfirsttime, clientgpsminlat, clientgpsminlon, clientgpsmaxlat, clientgpsmaxlon, 
                      clientgpsminalt, clientgpsmaxalt, clientgpsminspeed, clientgpsmaxspeed, clientdatasize, clientmaxrate, clientmaxseenrate, clientlasttime, 
                      clientpacketscrypt, clientpacketsdata, clientpacketsweak, Number, Type, wep
FROM         Clients
WHERE     (oui = 'Unknown')";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "UPDATE    Clients\r\nSET              oui = @oui\r\nWHERE     (bssid = @Original_bssi" +
                "d)";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@oui";
            param.DbType = global::System.Data.DbType.String;
            param.Size = 2147483647;
            param.SourceColumn = "oui";
            this._commandCollection[4].Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_bssid";
            param.DbType = global::System.Data.DbType.String;
            param.Size = 2147483647;
            param.SourceColumn = "bssid";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._commandCollection[4].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(KismetData.ClientsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual KismetData.ClientsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            KismetData.ClientsDataTable dataTable = new KismetData.ClientsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(KismetData.ClientsDataTable dataTable, string param1) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((param1 == null)) {
                throw new global::System.ArgumentNullException("param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(param1));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual KismetData.ClientsDataTable GetDataByBssid(string param1) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((param1 == null)) {
                throw new global::System.ArgumentNullException("param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(param1));
            }
            KismetData.ClientsDataTable dataTable = new KismetData.ClientsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy1(KismetData.ClientsDataTable dataTable, string param1, string param2) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((param1 == null)) {
                throw new global::System.ArgumentNullException("param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(param1));
            }
            if ((param2 == null)) {
                throw new global::System.ArgumentNullException("param2");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(param2));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual KismetData.ClientsDataTable GetDataByClientBssid(string param1, string param2) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((param1 == null)) {
                throw new global::System.ArgumentNullException("param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(param1));
            }
            if ((param2 == null)) {
                throw new global::System.ArgumentNullException("param2");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(param2));
            }
            KismetData.ClientsDataTable dataTable = new KismetData.ClientsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByUnknownOui(KismetData.ClientsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual KismetData.ClientsDataTable GetDataByUnknownOui() {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            KismetData.ClientsDataTable dataTable = new KismetData.ClientsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(KismetData.ClientsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(KismetData dataSet) {
            return this.Adapter.Update(dataSet, "Clients");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_Clientipaddress, 
                    string Original_oui, 
                    string Original_bssid, 
                    string Original_clientmac, 
                    string Original_clientencryption, 
                    string Original_clientfirsttime, 
                    global::System.Nullable<decimal> Original_clientgpsminlat, 
                    global::System.Nullable<decimal> Original_clientgpsminlon, 
                    global::System.Nullable<decimal> Original_clientgpsmaxlat, 
                    global::System.Nullable<decimal> Original_clientgpsmaxlon, 
                    global::System.Nullable<decimal> Original_clientgpsminalt, 
                    global::System.Nullable<decimal> Original_clientgpsmaxalt, 
                    global::System.Nullable<decimal> Original_clientgpsminspeed, 
                    global::System.Nullable<decimal> Original_clientgpsmaxspeed, 
                    global::System.Nullable<decimal> Original_clientdatasize, 
                    string Original_clientmaxrate, 
                    string Original_clientmaxseenrate, 
                    string Original_clientlasttime, 
                    global::System.Nullable<decimal> Original_clientpacketscrypt, 
                    global::System.Nullable<decimal> Original_clientpacketsdata, 
                    global::System.Nullable<decimal> Original_clientpacketsweak, 
                    string Original_Number, 
                    string Original_Type, 
                    string Original_wep) {
            if ((Original_Clientipaddress == null)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Clientipaddress));
            }
            if ((Original_oui == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_oui));
            }
            if ((Original_bssid == null)) {
                throw new global::System.ArgumentNullException("Original_bssid");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_bssid));
            }
            if ((Original_clientmac == null)) {
                throw new global::System.ArgumentNullException("Original_clientmac");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_clientmac));
            }
            if ((Original_clientencryption == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_clientencryption));
            }
            if ((Original_clientfirsttime == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_clientfirsttime));
            }
            if ((Original_clientgpsminlat.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((decimal)(Original_clientgpsminlat.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_clientgpsminlon.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((decimal)(Original_clientgpsminlon.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_clientgpsmaxlat.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((decimal)(Original_clientgpsmaxlat.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_clientgpsmaxlon.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((decimal)(Original_clientgpsmaxlon.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_clientgpsminalt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((decimal)(Original_clientgpsminalt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_clientgpsmaxalt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[21].Value = ((decimal)(Original_clientgpsmaxalt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Original_clientgpsminspeed.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[23].Value = ((decimal)(Original_clientgpsminspeed.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Original_clientgpsmaxspeed.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[25].Value = ((decimal)(Original_clientgpsmaxspeed.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Original_clientdatasize.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[27].Value = ((decimal)(Original_clientdatasize.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_clientmaxrate == null)) {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[29].Value = ((string)(Original_clientmaxrate));
            }
            if ((Original_clientmaxseenrate == null)) {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[31].Value = ((string)(Original_clientmaxseenrate));
            }
            if ((Original_clientlasttime == null)) {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[33].Value = ((string)(Original_clientlasttime));
            }
            if ((Original_clientpacketscrypt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[35].Value = ((decimal)(Original_clientpacketscrypt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((Original_clientpacketsdata.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[37].Value = ((decimal)(Original_clientpacketsdata.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((Original_clientpacketsweak.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[39].Value = ((decimal)(Original_clientpacketsweak.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((Original_Number == null)) {
                this.Adapter.DeleteCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[41].Value = ((string)(Original_Number));
            }
            if ((Original_Type == null)) {
                this.Adapter.DeleteCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[43].Value = ((string)(Original_Type));
            }
            if ((Original_wep == null)) {
                this.Adapter.DeleteCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[45].Value = ((string)(Original_wep));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string Clientipaddress, 
                    string oui, 
                    string bssid, 
                    string clientmac, 
                    string clientencryption, 
                    string clientfirsttime, 
                    global::System.Nullable<decimal> clientgpsminlat, 
                    global::System.Nullable<decimal> clientgpsminlon, 
                    global::System.Nullable<decimal> clientgpsmaxlat, 
                    global::System.Nullable<decimal> clientgpsmaxlon, 
                    global::System.Nullable<decimal> clientgpsminalt, 
                    global::System.Nullable<decimal> clientgpsmaxalt, 
                    global::System.Nullable<decimal> clientgpsminspeed, 
                    global::System.Nullable<decimal> clientgpsmaxspeed, 
                    global::System.Nullable<decimal> clientdatasize, 
                    string clientmaxrate, 
                    string clientmaxseenrate, 
                    string clientlasttime, 
                    global::System.Nullable<decimal> clientpacketscrypt, 
                    global::System.Nullable<decimal> clientpacketsdata, 
                    global::System.Nullable<decimal> clientpacketsweak, 
                    string Number, 
                    string Type, 
                    string wep) {
            if ((Clientipaddress == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Clientipaddress));
            }
            if ((oui == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(oui));
            }
            if ((bssid == null)) {
                throw new global::System.ArgumentNullException("bssid");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(bssid));
            }
            if ((clientmac == null)) {
                throw new global::System.ArgumentNullException("clientmac");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(clientmac));
            }
            if ((clientencryption == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(clientencryption));
            }
            if ((clientfirsttime == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(clientfirsttime));
            }
            if ((clientgpsminlat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(clientgpsminlat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((clientgpsminlon.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(clientgpsminlon.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((clientgpsmaxlat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(clientgpsmaxlat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((clientgpsmaxlon.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(clientgpsmaxlon.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((clientgpsminalt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(clientgpsminalt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((clientgpsmaxalt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(clientgpsmaxalt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((clientgpsminspeed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(clientgpsminspeed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((clientgpsmaxspeed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(clientgpsmaxspeed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((clientdatasize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((decimal)(clientdatasize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((clientmaxrate == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(clientmaxrate));
            }
            if ((clientmaxseenrate == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(clientmaxseenrate));
            }
            if ((clientlasttime == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(clientlasttime));
            }
            if ((clientpacketscrypt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((decimal)(clientpacketscrypt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((clientpacketsdata.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((decimal)(clientpacketsdata.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((clientpacketsweak.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((decimal)(clientpacketsweak.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Number == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(Number));
            }
            if ((Type == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(Type));
            }
            if ((wep == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(wep));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Clientipaddress, 
                    string oui, 
                    string bssid, 
                    string clientmac, 
                    string clientencryption, 
                    string clientfirsttime, 
                    global::System.Nullable<decimal> clientgpsminlat, 
                    global::System.Nullable<decimal> clientgpsminlon, 
                    global::System.Nullable<decimal> clientgpsmaxlat, 
                    global::System.Nullable<decimal> clientgpsmaxlon, 
                    global::System.Nullable<decimal> clientgpsminalt, 
                    global::System.Nullable<decimal> clientgpsmaxalt, 
                    global::System.Nullable<decimal> clientgpsminspeed, 
                    global::System.Nullable<decimal> clientgpsmaxspeed, 
                    global::System.Nullable<decimal> clientdatasize, 
                    string clientmaxrate, 
                    string clientmaxseenrate, 
                    string clientlasttime, 
                    global::System.Nullable<decimal> clientpacketscrypt, 
                    global::System.Nullable<decimal> clientpacketsdata, 
                    global::System.Nullable<decimal> clientpacketsweak, 
                    string Number, 
                    string Type, 
                    string wep, 
                    string Original_Clientipaddress, 
                    string Original_oui, 
                    string Original_bssid, 
                    string Original_clientmac, 
                    string Original_clientencryption, 
                    string Original_clientfirsttime, 
                    global::System.Nullable<decimal> Original_clientgpsminlat, 
                    global::System.Nullable<decimal> Original_clientgpsminlon, 
                    global::System.Nullable<decimal> Original_clientgpsmaxlat, 
                    global::System.Nullable<decimal> Original_clientgpsmaxlon, 
                    global::System.Nullable<decimal> Original_clientgpsminalt, 
                    global::System.Nullable<decimal> Original_clientgpsmaxalt, 
                    global::System.Nullable<decimal> Original_clientgpsminspeed, 
                    global::System.Nullable<decimal> Original_clientgpsmaxspeed, 
                    global::System.Nullable<decimal> Original_clientdatasize, 
                    string Original_clientmaxrate, 
                    string Original_clientmaxseenrate, 
                    string Original_clientlasttime, 
                    global::System.Nullable<decimal> Original_clientpacketscrypt, 
                    global::System.Nullable<decimal> Original_clientpacketsdata, 
                    global::System.Nullable<decimal> Original_clientpacketsweak, 
                    string Original_Number, 
                    string Original_Type, 
                    string Original_wep) {
            if ((Clientipaddress == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Clientipaddress));
            }
            if ((oui == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(oui));
            }
            if ((bssid == null)) {
                throw new global::System.ArgumentNullException("bssid");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(bssid));
            }
            if ((clientmac == null)) {
                throw new global::System.ArgumentNullException("clientmac");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(clientmac));
            }
            if ((clientencryption == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(clientencryption));
            }
            if ((clientfirsttime == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(clientfirsttime));
            }
            if ((clientgpsminlat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(clientgpsminlat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((clientgpsminlon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(clientgpsminlon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((clientgpsmaxlat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(clientgpsmaxlat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((clientgpsmaxlon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(clientgpsmaxlon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((clientgpsminalt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(clientgpsminalt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((clientgpsmaxalt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(clientgpsmaxalt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((clientgpsminspeed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(clientgpsminspeed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((clientgpsmaxspeed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(clientgpsmaxspeed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((clientdatasize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(clientdatasize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((clientmaxrate == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(clientmaxrate));
            }
            if ((clientmaxseenrate == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(clientmaxseenrate));
            }
            if ((clientlasttime == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(clientlasttime));
            }
            if ((clientpacketscrypt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(clientpacketscrypt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((clientpacketsdata.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(clientpacketsdata.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((clientpacketsweak.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(clientpacketsweak.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Number == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Number));
            }
            if ((Type == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Type));
            }
            if ((wep == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(wep));
            }
            if ((Original_Clientipaddress == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_Clientipaddress));
            }
            if ((Original_oui == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_oui));
            }
            if ((Original_bssid == null)) {
                throw new global::System.ArgumentNullException("Original_bssid");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_bssid));
            }
            if ((Original_clientmac == null)) {
                throw new global::System.ArgumentNullException("Original_clientmac");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_clientmac));
            }
            if ((Original_clientencryption == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_clientencryption));
            }
            if ((Original_clientfirsttime == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_clientfirsttime));
            }
            if ((Original_clientgpsminlat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((decimal)(Original_clientgpsminlat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((Original_clientgpsminlon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((decimal)(Original_clientgpsminlon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((Original_clientgpsmaxlat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((decimal)(Original_clientgpsmaxlat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((Original_clientgpsmaxlon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((decimal)(Original_clientgpsmaxlon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((Original_clientgpsminalt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[43].Value = ((decimal)(Original_clientgpsminalt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((Original_clientgpsmaxalt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[45].Value = ((decimal)(Original_clientgpsmaxalt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((Original_clientgpsminspeed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((decimal)(Original_clientgpsminspeed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((Original_clientgpsmaxspeed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((decimal)(Original_clientgpsmaxspeed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((Original_clientdatasize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((decimal)(Original_clientdatasize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((Original_clientmaxrate == null)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((string)(Original_clientmaxrate));
            }
            if ((Original_clientmaxseenrate == null)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((string)(Original_clientmaxseenrate));
            }
            if ((Original_clientlasttime == null)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((string)(Original_clientlasttime));
            }
            if ((Original_clientpacketscrypt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[59].Value = ((decimal)(Original_clientpacketscrypt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((Original_clientpacketsdata.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((decimal)(Original_clientpacketsdata.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            if ((Original_clientpacketsweak.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[63].Value = ((decimal)(Original_clientpacketsweak.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((Original_Number == null)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[65].Value = ((string)(Original_Number));
            }
            if ((Original_Type == null)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((string)(Original_Type));
            }
            if ((Original_wep == null)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((string)(Original_wep));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Clientipaddress, 
                    string oui, 
                    string clientencryption, 
                    string clientfirsttime, 
                    global::System.Nullable<decimal> clientgpsminlat, 
                    global::System.Nullable<decimal> clientgpsminlon, 
                    global::System.Nullable<decimal> clientgpsmaxlat, 
                    global::System.Nullable<decimal> clientgpsmaxlon, 
                    global::System.Nullable<decimal> clientgpsminalt, 
                    global::System.Nullable<decimal> clientgpsmaxalt, 
                    global::System.Nullable<decimal> clientgpsminspeed, 
                    global::System.Nullable<decimal> clientgpsmaxspeed, 
                    global::System.Nullable<decimal> clientdatasize, 
                    string clientmaxrate, 
                    string clientmaxseenrate, 
                    string clientlasttime, 
                    global::System.Nullable<decimal> clientpacketscrypt, 
                    global::System.Nullable<decimal> clientpacketsdata, 
                    global::System.Nullable<decimal> clientpacketsweak, 
                    string Number, 
                    string Type, 
                    string wep, 
                    string Original_Clientipaddress, 
                    string Original_oui, 
                    string Original_bssid, 
                    string Original_clientmac, 
                    string Original_clientencryption, 
                    string Original_clientfirsttime, 
                    global::System.Nullable<decimal> Original_clientgpsminlat, 
                    global::System.Nullable<decimal> Original_clientgpsminlon, 
                    global::System.Nullable<decimal> Original_clientgpsmaxlat, 
                    global::System.Nullable<decimal> Original_clientgpsmaxlon, 
                    global::System.Nullable<decimal> Original_clientgpsminalt, 
                    global::System.Nullable<decimal> Original_clientgpsmaxalt, 
                    global::System.Nullable<decimal> Original_clientgpsminspeed, 
                    global::System.Nullable<decimal> Original_clientgpsmaxspeed, 
                    global::System.Nullable<decimal> Original_clientdatasize, 
                    string Original_clientmaxrate, 
                    string Original_clientmaxseenrate, 
                    string Original_clientlasttime, 
                    global::System.Nullable<decimal> Original_clientpacketscrypt, 
                    global::System.Nullable<decimal> Original_clientpacketsdata, 
                    global::System.Nullable<decimal> Original_clientpacketsweak, 
                    string Original_Number, 
                    string Original_Type, 
                    string Original_wep) {
            return this.Update(Clientipaddress, oui, Original_bssid, Original_clientmac, clientencryption, clientfirsttime, clientgpsminlat, clientgpsminlon, clientgpsmaxlat, clientgpsmaxlon, clientgpsminalt, clientgpsmaxalt, clientgpsminspeed, clientgpsmaxspeed, clientdatasize, clientmaxrate, clientmaxseenrate, clientlasttime, clientpacketscrypt, clientpacketsdata, clientpacketsweak, Number, Type, wep, Original_Clientipaddress, Original_oui, Original_bssid, Original_clientmac, Original_clientencryption, Original_clientfirsttime, Original_clientgpsminlat, Original_clientgpsminlon, Original_clientgpsmaxlat, Original_clientgpsmaxlon, Original_clientgpsminalt, Original_clientgpsmaxalt, Original_clientgpsminspeed, Original_clientgpsmaxspeed, Original_clientdatasize, Original_clientmaxrate, Original_clientmaxseenrate, Original_clientlasttime, Original_clientpacketscrypt, Original_clientpacketsdata, Original_clientpacketsweak, Original_Number, Original_Type, Original_wep);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateQuery(string oui, string Original_bssid) {
            global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[4];
            if ((oui == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(oui));
            }
            if ((Original_bssid == null)) {
                throw new global::System.ArgumentNullException("Original_bssid");
            }
            else {
                command.Parameters[1].Value = ((string)(Original_bssid));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class statsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public statsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "stats";
            tableMapping.ColumnMappings.Add("filename", "filename");
            tableMapping.ColumnMappings.Add("nettotal", "nettotal");
            tableMapping.ColumnMappings.Add("netnew", "netnew");
            tableMapping.ColumnMappings.Add("netseen", "netseen");
            tableMapping.ColumnMappings.Add("clienttotal", "clienttotal");
            tableMapping.ColumnMappings.Add("clientsnew", "clientsnew");
            tableMapping.ColumnMappings.Add("clientsseen", "clientsseen");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [stats] WHERE (([filename] = @Original_filename) AND ((@IsNull_nettotal = 1 AND [nettotal] IS NULL) OR ([nettotal] = @Original_nettotal)) AND ((@IsNull_netnew = 1 AND [netnew] IS NULL) OR ([netnew] = @Original_netnew)) AND ((@IsNull_netseen = 1 AND [netseen] IS NULL) OR ([netseen] = @Original_netseen)) AND ((@IsNull_clienttotal = 1 AND [clienttotal] IS NULL) OR ([clienttotal] = @Original_clienttotal)) AND ((@IsNull_clientsnew = 1 AND [clientsnew] IS NULL) OR ([clientsnew] = @Original_clientsnew)) AND ((@IsNull_clientsseen = 1 AND [clientsseen] IS NULL) OR ([clientsseen] = @Original_clientsseen)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_filename";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "filename";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_nettotal";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "nettotal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_nettotal";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "nettotal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_netnew";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "netnew";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_netnew";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "netnew";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_netseen";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "netseen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_netseen";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "netseen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clienttotal";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clienttotal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clienttotal";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "clienttotal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientsnew";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientsnew";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientsnew";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "clientsnew";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientsseen";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientsseen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientsseen";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "clientsseen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [stats] ([filename], [nettotal], [netnew], [netseen], [clienttotal], " +
                "[clientsnew], [clientsseen]) VALUES (@filename, @nettotal, @netnew, @netseen, @c" +
                "lienttotal, @clientsnew, @clientsseen)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@filename";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "filename";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@nettotal";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "nettotal";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@netnew";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "netnew";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@netseen";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "netseen";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clienttotal";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "clienttotal";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientsnew";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "clientsnew";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientsseen";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "clientsseen";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [stats] SET [filename] = @filename, [nettotal] = @nettotal, [netnew] = @netnew, [netseen] = @netseen, [clienttotal] = @clienttotal, [clientsnew] = @clientsnew, [clientsseen] = @clientsseen WHERE (([filename] = @Original_filename) AND ((@IsNull_nettotal = 1 AND [nettotal] IS NULL) OR ([nettotal] = @Original_nettotal)) AND ((@IsNull_netnew = 1 AND [netnew] IS NULL) OR ([netnew] = @Original_netnew)) AND ((@IsNull_netseen = 1 AND [netseen] IS NULL) OR ([netseen] = @Original_netseen)) AND ((@IsNull_clienttotal = 1 AND [clienttotal] IS NULL) OR ([clienttotal] = @Original_clienttotal)) AND ((@IsNull_clientsnew = 1 AND [clientsnew] IS NULL) OR ([clientsnew] = @Original_clientsnew)) AND ((@IsNull_clientsseen = 1 AND [clientsseen] IS NULL) OR ([clientsseen] = @Original_clientsseen)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@filename";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "filename";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@nettotal";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "nettotal";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@netnew";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "netnew";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@netseen";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "netseen";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clienttotal";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "clienttotal";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientsnew";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "clientsnew";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientsseen";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "clientsseen";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_filename";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "filename";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_nettotal";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "nettotal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_nettotal";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "nettotal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_netnew";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "netnew";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_netnew";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "netnew";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_netseen";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "netseen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_netseen";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "netseen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clienttotal";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clienttotal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clienttotal";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "clienttotal";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientsnew";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientsnew";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientsnew";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "clientsnew";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_clientsseen";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "clientsseen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_clientsseen";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "clientsseen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::KismetLogger.Properties.Settings.Default.ConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[2];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [filename], [nettotal], [netnew], [netseen], [clienttotal], [clientsnew], " +
                "[clientsseen] FROM [stats]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "INSERT INTO [stats] ([filename], [nettotal], [netnew], [netseen], [clienttotal], " +
                "[clientsnew], [clientsseen]) VALUES (@filename, @nettotal, @netnew, @netseen, @c" +
                "lienttotal, @clientsnew, @clientsseen)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@filename";
            param.DbType = global::System.Data.DbType.String;
            param.Size = 2147483647;
            param.SourceColumn = "filename";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@nettotal";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.SourceColumn = "nettotal";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@netnew";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.SourceColumn = "netnew";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@netseen";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.SourceColumn = "netseen";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clienttotal";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.SourceColumn = "clienttotal";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientsnew";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.SourceColumn = "clientsnew";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@clientsseen";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.SourceColumn = "clientsseen";
            this._commandCollection[1].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(KismetData.statsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual KismetData.statsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            KismetData.statsDataTable dataTable = new KismetData.statsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(KismetData.statsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(KismetData dataSet) {
            return this.Adapter.Update(dataSet, "stats");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_filename, global::System.Nullable<long> Original_nettotal, global::System.Nullable<long> Original_netnew, global::System.Nullable<long> Original_netseen, global::System.Nullable<long> Original_clienttotal, global::System.Nullable<long> Original_clientsnew, global::System.Nullable<long> Original_clientsseen) {
            if ((Original_filename == null)) {
                throw new global::System.ArgumentNullException("Original_filename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_filename));
            }
            if ((Original_nettotal.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_nettotal.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_netnew.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_netnew.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_netseen.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_netseen.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_clienttotal.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_clienttotal.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_clientsnew.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((long)(Original_clientsnew.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_clientsseen.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((long)(Original_clientsseen.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string filename, global::System.Nullable<long> nettotal, global::System.Nullable<long> netnew, global::System.Nullable<long> netseen, global::System.Nullable<long> clienttotal, global::System.Nullable<long> clientsnew, global::System.Nullable<long> clientsseen) {
            if ((filename == null)) {
                throw new global::System.ArgumentNullException("filename");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(filename));
            }
            if ((nettotal.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(nettotal.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((netnew.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(netnew.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((netseen.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(netseen.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((clienttotal.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((long)(clienttotal.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((clientsnew.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((long)(clientsnew.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((clientsseen.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((long)(clientsseen.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string filename, global::System.Nullable<long> nettotal, global::System.Nullable<long> netnew, global::System.Nullable<long> netseen, global::System.Nullable<long> clienttotal, global::System.Nullable<long> clientsnew, global::System.Nullable<long> clientsseen, string Original_filename, global::System.Nullable<long> Original_nettotal, global::System.Nullable<long> Original_netnew, global::System.Nullable<long> Original_netseen, global::System.Nullable<long> Original_clienttotal, global::System.Nullable<long> Original_clientsnew, global::System.Nullable<long> Original_clientsseen) {
            if ((filename == null)) {
                throw new global::System.ArgumentNullException("filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(filename));
            }
            if ((nettotal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(nettotal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((netnew.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(netnew.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((netseen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(netseen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((clienttotal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(clienttotal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((clientsnew.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(clientsnew.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((clientsseen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(clientsseen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_filename == null)) {
                throw new global::System.ArgumentNullException("Original_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_filename));
            }
            if ((Original_nettotal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(Original_nettotal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_netnew.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(Original_netnew.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_netseen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_netseen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_clienttotal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(Original_clienttotal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_clientsnew.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(Original_clientsnew.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_clientsseen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((long)(Original_clientsseen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<long> nettotal, global::System.Nullable<long> netnew, global::System.Nullable<long> netseen, global::System.Nullable<long> clienttotal, global::System.Nullable<long> clientsnew, global::System.Nullable<long> clientsseen, string Original_filename, global::System.Nullable<long> Original_nettotal, global::System.Nullable<long> Original_netnew, global::System.Nullable<long> Original_netseen, global::System.Nullable<long> Original_clienttotal, global::System.Nullable<long> Original_clientsnew, global::System.Nullable<long> Original_clientsseen) {
            return this.Update(Original_filename, nettotal, netnew, netseen, clienttotal, clientsnew, clientsseen, Original_filename, Original_nettotal, Original_netnew, Original_netseen, Original_clienttotal, Original_clientsnew, Original_clientsseen);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(string filename, global::System.Nullable<long> nettotal, global::System.Nullable<long> netnew, global::System.Nullable<long> netseen, global::System.Nullable<long> clienttotal, global::System.Nullable<long> clientsnew, global::System.Nullable<long> clientsseen) {
            global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[1];
            if ((filename == null)) {
                throw new global::System.ArgumentNullException("filename");
            }
            else {
                command.Parameters[0].Value = ((string)(filename));
            }
            if ((nettotal.HasValue == true)) {
                command.Parameters[1].Value = ((long)(nettotal.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((netnew.HasValue == true)) {
                command.Parameters[2].Value = ((long)(netnew.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((netseen.HasValue == true)) {
                command.Parameters[3].Value = ((long)(netseen.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((clienttotal.HasValue == true)) {
                command.Parameters[4].Value = ((long)(clienttotal.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((clientsnew.HasValue == true)) {
                command.Parameters[5].Value = ((long)(clientsnew.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((clientsseen.HasValue == true)) {
                command.Parameters[6].Value = ((long)(clientsseen.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FilesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FilesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Files";
            tableMapping.ColumnMappings.Add("filename", "filename");
            tableMapping.ColumnMappings.Add("year", "year");
            tableMapping.ColumnMappings.Add("month", "month");
            tableMapping.ColumnMappings.Add("day", "day");
            tableMapping.ColumnMappings.Add("number", "number");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [Files] WHERE (([filename] = @Original_filename) AND ((@IsNull_year = 1 AND [year] IS NULL) OR ([year] = @Original_year)) AND ((@IsNull_month = 1 AND [month] IS NULL) OR ([month] = @Original_month)) AND ((@IsNull_day = 1 AND [day] IS NULL) OR ([day] = @Original_day)) AND ((@IsNull_number = 1 AND [number] IS NULL) OR ([number] = @Original_number)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_filename";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "filename";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_year";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "year";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_year";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "year";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_month";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "month";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_month";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "month";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_day";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "day";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_day";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "day";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_number";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "number";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_number";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "number";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Files] ([filename], [year], [month], [day], [number]) VALUES (@filen" +
                "ame, @year, @month, @day, @number)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@filename";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "filename";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@year";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "year";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@month";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "month";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@day";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "day";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@number";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "number";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Files] SET [filename] = @filename, [year] = @year, [month] = @month, [day] = @day, [number] = @number WHERE (([filename] = @Original_filename) AND ((@IsNull_year = 1 AND [year] IS NULL) OR ([year] = @Original_year)) AND ((@IsNull_month = 1 AND [month] IS NULL) OR ([month] = @Original_month)) AND ((@IsNull_day = 1 AND [day] IS NULL) OR ([day] = @Original_day)) AND ((@IsNull_number = 1 AND [number] IS NULL) OR ([number] = @Original_number)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@filename";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "filename";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@year";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "year";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@month";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "month";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@day";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "day";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@number";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "number";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_filename";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "filename";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_year";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "year";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_year";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "year";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_month";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "month";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_month";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "month";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_day";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "day";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_day";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "day";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_number";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "number";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_number";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "number";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::KismetLogger.Properties.Settings.Default.ConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[3];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [filename], [year], [month], [day], [number] FROM [Files]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     filename, year, month, day, number\r\nFROM         Files\r\nWHERE     (fil" +
                "ename = @param1)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@param1";
            param.DbType = global::System.Data.DbType.String;
            param.Size = 2147483647;
            param.SourceColumn = "filename";
            this._commandCollection[1].Parameters.Add(param);
            this._commandCollection[2] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "INSERT INTO [Files] ([filename], [year], [month], [day], [number]) VALUES (@filen" +
                "ame, @year, @month, @day, @number)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@filename";
            param.DbType = global::System.Data.DbType.String;
            param.Size = 2147483647;
            param.SourceColumn = "filename";
            this._commandCollection[2].Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@year";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.SourceColumn = "year";
            this._commandCollection[2].Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@month";
            param.DbType = global::System.Data.DbType.String;
            param.Size = 2147483647;
            param.SourceColumn = "month";
            this._commandCollection[2].Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@day";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.SourceColumn = "day";
            this._commandCollection[2].Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@number";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.Size = 8;
            param.SourceColumn = "number";
            this._commandCollection[2].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(KismetData.FilesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual KismetData.FilesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            KismetData.FilesDataTable dataTable = new KismetData.FilesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(KismetData.FilesDataTable dataTable, string param1) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((param1 == null)) {
                throw new global::System.ArgumentNullException("param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(param1));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual KismetData.FilesDataTable GetDataByFilename(string param1) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((param1 == null)) {
                throw new global::System.ArgumentNullException("param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(param1));
            }
            KismetData.FilesDataTable dataTable = new KismetData.FilesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(KismetData.FilesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(KismetData dataSet) {
            return this.Adapter.Update(dataSet, "Files");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_filename, global::System.Nullable<long> Original_year, string Original_month, global::System.Nullable<long> Original_day, global::System.Nullable<long> Original_number) {
            if ((Original_filename == null)) {
                throw new global::System.ArgumentNullException("Original_filename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_filename));
            }
            if ((Original_year.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_year.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_month == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_month));
            }
            if ((Original_day.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_day.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_number.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_number.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string filename, global::System.Nullable<long> year, string month, global::System.Nullable<long> day, global::System.Nullable<long> number) {
            if ((filename == null)) {
                throw new global::System.ArgumentNullException("filename");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(filename));
            }
            if ((year.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(year.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((month == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(month));
            }
            if ((day.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(day.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((number.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((long)(number.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string filename, global::System.Nullable<long> year, string month, global::System.Nullable<long> day, global::System.Nullable<long> number, string Original_filename, global::System.Nullable<long> Original_year, string Original_month, global::System.Nullable<long> Original_day, global::System.Nullable<long> Original_number) {
            if ((filename == null)) {
                throw new global::System.ArgumentNullException("filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(filename));
            }
            if ((year.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(year.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((month == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(month));
            }
            if ((day.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(day.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((number.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(number.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_filename == null)) {
                throw new global::System.ArgumentNullException("Original_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_filename));
            }
            if ((Original_year.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(Original_year.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_month == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_month));
            }
            if ((Original_day.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(Original_day.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_number.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_number.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<long> year, string month, global::System.Nullable<long> day, global::System.Nullable<long> number, string Original_filename, global::System.Nullable<long> Original_year, string Original_month, global::System.Nullable<long> Original_day, global::System.Nullable<long> Original_number) {
            return this.Update(Original_filename, year, month, day, number, Original_filename, Original_year, Original_month, Original_day, Original_number);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(string filename, global::System.Nullable<long> year, string month, global::System.Nullable<long> day, global::System.Nullable<long> number) {
            global::System.Data.SQLite.SQLiteCommand command = this.CommandCollection[2];
            if ((filename == null)) {
                throw new global::System.ArgumentNullException("filename");
            }
            else {
                command.Parameters[0].Value = ((string)(filename));
            }
            if ((year.HasValue == true)) {
                command.Parameters[1].Value = ((long)(year.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((month == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(month));
            }
            if ((day.HasValue == true)) {
                command.Parameters[3].Value = ((long)(day.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((number.HasValue == true)) {
                command.Parameters[4].Value = ((long)(number.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class bssidclientcountTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bssidclientcountTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "bssidclientcount";
            tableMapping.ColumnMappings.Add("[bssid]", "[bssid]");
            tableMapping.ColumnMappings.Add("[count(bssid)]", "[count(bssid)]");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::KismetLogger.Properties.Settings.Default.ConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [bssid], [count(bssid)] FROM [bssidclientcount]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(KismetData.bssidclientcountDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual KismetData.bssidclientcountDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            KismetData.bssidclientcountDataTable dataTable = new KismetData.bssidclientcountDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ophensTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ophensTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ophens";
            tableMapping.ColumnMappings.Add("data.bssid", "data_bssid");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [ophens] ([data.bssid]) VALUES (@param1)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@param1";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "data.bssid";
            this._adapter.InsertCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::KismetLogger.Properties.Settings.Default.ConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [data.bssid] FROM [ophens]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(KismetData.ophensDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual KismetData.ophensDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            KismetData.ophensDataTable dataTable = new KismetData.ophensDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(KismetData.ophensDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(KismetData dataSet) {
            return this.Adapter.Update(dataSet, "ophens");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string param1) {
            if ((param1 == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(param1));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591